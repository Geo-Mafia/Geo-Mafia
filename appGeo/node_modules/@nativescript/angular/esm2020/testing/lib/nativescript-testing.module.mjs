import { NgModule } from '@angular/core';
import { TestComponentRenderer } from '@angular/core/testing';
import { COMMON_PROVIDERS, APP_ROOT_VIEW, NativeScriptModule } from '@nativescript/angular';
import { NativeScriptTestComponentRenderer } from './nativescript_test_component_renderer';
import { testingRootView } from './test-root-view';
import * as i0 from "@angular/core";
if (typeof Node === 'undefined' && !global.Node) {
    class DummyNode {
    }
    global.Node = DummyNode;
}
/**
 * Providers array is exported for cases where a custom module has to be constructed
 * to test a particular piece of code. This can happen, for example, if you are trying
 * to test dynamic component loading and need to specify an entryComponent for the testing
 * module.
 */
export const NATIVESCRIPT_TESTING_PROVIDERS = [...COMMON_PROVIDERS, { provide: APP_ROOT_VIEW, useFactory: testingRootView }, { provide: TestComponentRenderer, useClass: NativeScriptTestComponentRenderer }];
/**
 * NativeScript testing support module. Enables use of TestBed for angular components, directives,
 * pipes, and services.
 */
export class NativeScriptTestingModule {
}
NativeScriptTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptTestingModule, exports: [NativeScriptModule] });
NativeScriptTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptTestingModule, providers: NATIVESCRIPT_TESTING_PROVIDERS, imports: [NativeScriptModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [NativeScriptModule],
                    providers: NATIVESCRIPT_TESTING_PROVIDERS,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci90ZXN0aW5nL3NyYy9saWIvbmF0aXZlc2NyaXB0LXRlc3RpbmcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFbkQsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQy9DLE1BQU0sU0FBUztLQUFHO0lBQ2xCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBZ0IsQ0FBQztDQUNoQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQWUsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLGlDQUFpQyxFQUFFLENBQUMsQ0FBQztBQUUxTjs7O0dBR0c7QUFLSCxNQUFNLE9BQU8seUJBQXlCOztzSEFBekIseUJBQXlCO3VIQUF6Qix5QkFBeUIsWUFIMUIsa0JBQWtCO3VIQUdqQix5QkFBeUIsYUFGekIsOEJBQThCLFlBRC9CLGtCQUFrQjsyRkFHakIseUJBQXlCO2tCQUpyQyxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUM3QixTQUFTLEVBQUUsOEJBQThCO2lCQUMxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGVzdENvbXBvbmVudFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IENPTU1PTl9QUk9WSURFUlMsIEFQUF9ST09UX1ZJRVcsIE5hdGl2ZVNjcmlwdE1vZHVsZSB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvYW5ndWxhcic7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRUZXN0Q29tcG9uZW50UmVuZGVyZXIgfSBmcm9tICcuL25hdGl2ZXNjcmlwdF90ZXN0X2NvbXBvbmVudF9yZW5kZXJlcic7XG5pbXBvcnQgeyB0ZXN0aW5nUm9vdFZpZXcgfSBmcm9tICcuL3Rlc3Qtcm9vdC12aWV3JztcblxuaWYgKHR5cGVvZiBOb2RlID09PSAndW5kZWZpbmVkJyAmJiAhZ2xvYmFsLk5vZGUpIHtcbiAgY2xhc3MgRHVtbXlOb2RlIHt9XG4gIGdsb2JhbC5Ob2RlID0gRHVtbXlOb2RlIGFzIGFueTtcbn1cblxuLyoqXG4gKiBQcm92aWRlcnMgYXJyYXkgaXMgZXhwb3J0ZWQgZm9yIGNhc2VzIHdoZXJlIGEgY3VzdG9tIG1vZHVsZSBoYXMgdG8gYmUgY29uc3RydWN0ZWRcbiAqIHRvIHRlc3QgYSBwYXJ0aWN1bGFyIHBpZWNlIG9mIGNvZGUuIFRoaXMgY2FuIGhhcHBlbiwgZm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgdHJ5aW5nXG4gKiB0byB0ZXN0IGR5bmFtaWMgY29tcG9uZW50IGxvYWRpbmcgYW5kIG5lZWQgdG8gc3BlY2lmeSBhbiBlbnRyeUNvbXBvbmVudCBmb3IgdGhlIHRlc3RpbmdcbiAqIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE5BVElWRVNDUklQVF9URVNUSU5HX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFsuLi5DT01NT05fUFJPVklERVJTLCB7IHByb3ZpZGU6IEFQUF9ST09UX1ZJRVcsIHVzZUZhY3Rvcnk6IHRlc3RpbmdSb290VmlldyB9LCB7IHByb3ZpZGU6IFRlc3RDb21wb25lbnRSZW5kZXJlciwgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdFRlc3RDb21wb25lbnRSZW5kZXJlciB9XTtcblxuLyoqXG4gKiBOYXRpdmVTY3JpcHQgdGVzdGluZyBzdXBwb3J0IG1vZHVsZS4gRW5hYmxlcyB1c2Ugb2YgVGVzdEJlZCBmb3IgYW5ndWxhciBjb21wb25lbnRzLCBkaXJlY3RpdmVzLFxuICogcGlwZXMsIGFuZCBzZXJ2aWNlcy5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogW05hdGl2ZVNjcmlwdE1vZHVsZV0sXG4gIHByb3ZpZGVyczogTkFUSVZFU0NSSVBUX1RFU1RJTkdfUFJPVklERVJTLFxufSlcbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRUZXN0aW5nTW9kdWxlIHt9XG4iXX0=