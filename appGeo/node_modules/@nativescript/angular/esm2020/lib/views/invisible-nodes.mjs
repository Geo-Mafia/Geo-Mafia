import { View } from '@nativescript/core';
const getClassName = (instance) => instance.constructor.name;
export class InvisibleNode extends View {
    constructor(name = '') {
        super();
        this.name = name;
        this.nodeType = 1;
        this.nodeName = getClassName(this);
    }
    toString() {
        return `${this.nodeName}(${this.id})-${this.name}`;
    }
}
export class CommentNode extends InvisibleNode {
    constructor(value) {
        super(value);
        this.meta = {
            skipAddToDom: true,
        };
        this.id = CommentNode.id.toString();
        CommentNode.id += 1;
    }
}
CommentNode.id = 0;
export class TextNode extends InvisibleNode {
    constructor(value) {
        super(value);
        this._text = '';
        this.callbackMap = new Map();
        this._text = value;
        this.meta = {
            skipAddToDom: true,
        };
        this.id = TextNode.id.toString();
        TextNode.id += 1;
    }
    get text() {
        return this._text;
    }
    set text(t) {
        this._text = t;
        this.notify({ eventName: TextNode.textChangeEvent, object: this, value: t });
    }
    registerTextChange(callback, id) {
        const cb = (evt) => callback(evt.value);
        const cbArr = this.callbackMap.get(id) || [];
        cbArr.push(cb);
        this.callbackMap.set(id, cbArr);
        this.on('textChange', cb);
    }
    unregisterTextChange(id) {
        const cbArr = this.callbackMap.get(id) || [];
        cbArr.forEach((cb) => this.off('textChange', cb));
        this.callbackMap.delete(id);
    }
}
TextNode.textChangeEvent = 'textChange';
TextNode.id = 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52aXNpYmxlLW5vZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL3ZpZXdzL2ludmlzaWJsZS1ub2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHMUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBRTdELE1BQU0sT0FBZ0IsYUFBYyxTQUFRLElBQUk7SUFXOUMsWUFBc0IsT0FBZSxFQUFFO1FBQ3JDLEtBQUssRUFBRSxDQUFDO1FBRFksU0FBSSxHQUFKLElBQUksQ0FBYTtRQUdyQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxXQUFZLFNBQVEsYUFBYTtJQUc1QyxZQUFZLEtBQWM7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWIsSUFBSSxDQUFDLElBQUksR0FBRztZQUNWLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7UUFDRixJQUFJLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7QUFWZ0IsY0FBRSxHQUFHLENBQUMsQ0FBQztBQWExQixNQUFNLE9BQU8sUUFBUyxTQUFRLGFBQWE7SUFhekMsWUFBWSxLQUFjO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVhMLFVBQUssR0FBRyxFQUFFLENBQUM7UUFRckIsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBc0MsQ0FBQztRQUkxRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1YsWUFBWSxFQUFFLElBQUk7U0FDbkIsQ0FBQztRQUNGLElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBbEJELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsQ0FBUztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFjRCxrQkFBa0IsQ0FBQyxRQUFnQyxFQUFFLEVBQVc7UUFDOUQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELG9CQUFvQixDQUFDLEVBQVc7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7QUFuQ2Esd0JBQWUsR0FBRyxZQUFZLENBQUM7QUFDNUIsV0FBRSxHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgTmdWaWV3IH0gZnJvbSAnLi92aWV3LXR5cGVzJztcblxuY29uc3QgZ2V0Q2xhc3NOYW1lID0gKGluc3RhbmNlKSA9PiBpbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW52aXNpYmxlTm9kZSBleHRlbmRzIFZpZXcgaW1wbGVtZW50cyBOZ1ZpZXcge1xuICBtZXRhOiB7IHNraXBBZGRUb0RvbTogYm9vbGVhbiB9O1xuICBub2RlVHlwZTogbnVtYmVyO1xuICBub2RlTmFtZTogc3RyaW5nO1xuICBwYXJlbnROb2RlOiBOZ1ZpZXc7XG4gIG5leHRTaWJsaW5nOiBOZ1ZpZXc7XG4gIHByZXZpb3VzU2libGluZzogTmdWaWV3O1xuICBmaXJzdENoaWxkOiBOZ1ZpZXc7XG4gIGxhc3RDaGlsZDogTmdWaWV3O1xuICBuZ0Nzc0NsYXNzZXM6IE1hcDxzdHJpbmcsIGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBuYW1lOiBzdHJpbmcgPSAnJykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm5vZGVUeXBlID0gMTtcbiAgICB0aGlzLm5vZGVOYW1lID0gZ2V0Q2xhc3NOYW1lKHRoaXMpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubm9kZU5hbWV9KCR7dGhpcy5pZH0pLSR7dGhpcy5uYW1lfWA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbW1lbnROb2RlIGV4dGVuZHMgSW52aXNpYmxlTm9kZSB7XG4gIHByb3RlY3RlZCBzdGF0aWMgaWQgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodmFsdWUpO1xuXG4gICAgdGhpcy5tZXRhID0ge1xuICAgICAgc2tpcEFkZFRvRG9tOiB0cnVlLFxuICAgIH07XG4gICAgdGhpcy5pZCA9IENvbW1lbnROb2RlLmlkLnRvU3RyaW5nKCk7XG4gICAgQ29tbWVudE5vZGUuaWQgKz0gMTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGV4dE5vZGUgZXh0ZW5kcyBJbnZpc2libGVOb2RlIHtcbiAgcHVibGljIHN0YXRpYyB0ZXh0Q2hhbmdlRXZlbnQgPSAndGV4dENoYW5nZSc7XG4gIHByb3RlY3RlZCBzdGF0aWMgaWQgPSAwO1xuICBwcm90ZWN0ZWQgX3RleHQgPSAnJztcbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHQ7XG4gIH1cbiAgc2V0IHRleHQodDogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGV4dCA9IHQ7XG4gICAgdGhpcy5ub3RpZnkoeyBldmVudE5hbWU6IFRleHROb2RlLnRleHRDaGFuZ2VFdmVudCwgb2JqZWN0OiB0aGlzLCB2YWx1ZTogdCB9KTtcbiAgfVxuICBjYWxsYmFja01hcCA9IG5ldyBNYXA8dW5rbm93biwgQXJyYXk8KGV2dDogYW55KSA9PiB2b2lkPj4oKTtcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZT86IHN0cmluZykge1xuICAgIHN1cGVyKHZhbHVlKTtcbiAgICB0aGlzLl90ZXh0ID0gdmFsdWU7XG5cbiAgICB0aGlzLm1ldGEgPSB7XG4gICAgICBza2lwQWRkVG9Eb206IHRydWUsXG4gICAgfTtcbiAgICB0aGlzLmlkID0gVGV4dE5vZGUuaWQudG9TdHJpbmcoKTtcbiAgICBUZXh0Tm9kZS5pZCArPSAxO1xuICB9XG5cbiAgcmVnaXN0ZXJUZXh0Q2hhbmdlKGNhbGxiYWNrOiAodGV4dDogc3RyaW5nKSA9PiB2b2lkLCBpZDogdW5rbm93bikge1xuICAgIGNvbnN0IGNiID0gKGV2dCkgPT4gY2FsbGJhY2soZXZ0LnZhbHVlKTtcbiAgICBjb25zdCBjYkFyciA9IHRoaXMuY2FsbGJhY2tNYXAuZ2V0KGlkKSB8fCBbXTtcbiAgICBjYkFyci5wdXNoKGNiKTtcbiAgICB0aGlzLmNhbGxiYWNrTWFwLnNldChpZCwgY2JBcnIpO1xuICAgIHRoaXMub24oJ3RleHRDaGFuZ2UnLCBjYik7XG4gIH1cblxuICB1bnJlZ2lzdGVyVGV4dENoYW5nZShpZDogdW5rbm93bikge1xuICAgIGNvbnN0IGNiQXJyID0gdGhpcy5jYWxsYmFja01hcC5nZXQoaWQpIHx8IFtdO1xuICAgIGNiQXJyLmZvckVhY2goKGNiKSA9PiB0aGlzLm9mZigndGV4dENoYW5nZScsIGNiKSk7XG4gICAgdGhpcy5jYWxsYmFja01hcC5kZWxldGUoaWQpO1xuICB9XG59XG4iXX0=