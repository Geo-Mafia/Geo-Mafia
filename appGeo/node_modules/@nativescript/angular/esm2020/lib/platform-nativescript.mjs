import { Sanitizer, createPlatformFactory, platformCore } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NativeScriptPlatformRefProxy } from './platform-ref';
import { AppHostView } from './app-host-view';
import { Color, GridLayout } from '@nativescript/core';
import { defaultPageFactory, PAGE_FACTORY } from './tokens';
export const defaultPageFactoryProvider = { provide: PAGE_FACTORY, useValue: defaultPageFactory };
export class NativeScriptSanitizer extends Sanitizer {
    sanitize(_context, value) {
        return value;
    }
}
// TODO: when angular finally exports their scheduler token for ivy CD, provide our own with queueMacroTask
// export function schedulerFactory() {
//   return (fn: any) => {
//     console.log('SCHEDULER');
//     setTimeout(fn, 0);
//   };
// }
export class NativeScriptDocument {
    constructor() {
        // Required by the AnimationDriver
        this.body = {
            isOverride: true,
        };
    }
    createElement(tag) {
        throw new Error('NativeScriptDocument is not DOM Document. There is no createElement() method.');
    }
}
export const COMMON_PROVIDERS = [defaultPageFactoryProvider, { provide: Sanitizer, useClass: NativeScriptSanitizer, deps: [] }, { provide: DOCUMENT, useClass: NativeScriptDocument, deps: [] }];
export const platformNativeScript = createPlatformFactory(platformCore, 'nativescriptDynamic', COMMON_PROVIDERS);
/**
 * @deprecated use runNativeScriptAngularApp instead
 */
export const platformNativeScriptDynamic = function (options, extraProviders) {
    console.log('platformNativeScriptDynamic is deprecated, use runNativeScriptAngularApp instead');
    options = options || {};
    extraProviders = extraProviders || [];
    const ngRootView = new AppHostView(new Color(options.backgroundColor || 'white'));
    let launchView = options.launchView;
    if (!launchView && options.async) {
        launchView = new GridLayout();
        launchView.backgroundColor = options.backgroundColor || 'white';
    }
    return new NativeScriptPlatformRefProxy(platformNativeScript([...extraProviders]), launchView);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0tbmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL3BsYXRmb3JtLW5hdGl2ZXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQTRGLFNBQVMsRUFBa0MscUJBQXFCLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pNLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRzVELE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztBQUNsRyxNQUFNLE9BQU8scUJBQXNCLFNBQVEsU0FBUztJQUNsRCxRQUFRLENBQUMsUUFBYSxFQUFFLEtBQWE7UUFDbkMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFDRCwyR0FBMkc7QUFDM0csdUNBQXVDO0FBQ3ZDLDBCQUEwQjtBQUMxQixnQ0FBZ0M7QUFDaEMseUJBQXlCO0FBQ3pCLE9BQU87QUFDUCxJQUFJO0FBRUosTUFBTSxPQUFPLG9CQUFvQjtJQUFqQztRQUNFLGtDQUFrQztRQUMzQixTQUFJLEdBQVE7WUFDakIsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQztJQUtKLENBQUM7SUFIQyxhQUFhLENBQUMsR0FBVztRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLCtFQUErRSxDQUFDLENBQUM7SUFDbkcsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRWpNLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBb0NqSDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLFVBQVUsT0FBb0IsRUFBRSxjQUFpQztJQUMxRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtGQUFrRixDQUFDLENBQUM7SUFDaEcsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDeEIsY0FBYyxHQUFHLGNBQWMsSUFBSSxFQUFFLENBQUM7SUFFdEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDcEMsSUFBSSxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ2hDLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzlCLFVBQVUsQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUM7S0FDakU7SUFDRCxPQUFPLElBQUksNEJBQTRCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakcsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgSW5qZWN0b3IsIENvbXBpbGVyT3B0aW9ucywgUGxhdGZvcm1SZWYsIE5nTW9kdWxlRmFjdG9yeSwgTmdNb2R1bGVSZWYsIEV2ZW50RW1pdHRlciwgU2FuaXRpemVyLCBJbmplY3Rpb25Ub2tlbiwgU3RhdGljUHJvdmlkZXIsIGNyZWF0ZVBsYXRmb3JtRmFjdG9yeSwgcGxhdGZvcm1Db3JlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRQbGF0Zm9ybVJlZlByb3h5IH0gZnJvbSAnLi9wbGF0Zm9ybS1yZWYnO1xuaW1wb3J0IHsgQXBwSG9zdFZpZXcgfSBmcm9tICcuL2FwcC1ob3N0LXZpZXcnO1xuaW1wb3J0IHsgQ29sb3IsIEdyaWRMYXlvdXQgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgZGVmYXVsdFBhZ2VGYWN0b3J5LCBQQUdFX0ZBQ1RPUlkgfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQgeyBBcHBMYXVuY2hWaWV3IH0gZnJvbSAnLi9hcHBsaWNhdGlvbic7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UGFnZUZhY3RvcnlQcm92aWRlciA9IHsgcHJvdmlkZTogUEFHRV9GQUNUT1JZLCB1c2VWYWx1ZTogZGVmYXVsdFBhZ2VGYWN0b3J5IH07XG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0U2FuaXRpemVyIGV4dGVuZHMgU2FuaXRpemVyIHtcbiAgc2FuaXRpemUoX2NvbnRleHQ6IGFueSwgdmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vLyBUT0RPOiB3aGVuIGFuZ3VsYXIgZmluYWxseSBleHBvcnRzIHRoZWlyIHNjaGVkdWxlciB0b2tlbiBmb3IgaXZ5IENELCBwcm92aWRlIG91ciBvd24gd2l0aCBxdWV1ZU1hY3JvVGFza1xuLy8gZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlckZhY3RvcnkoKSB7XG4vLyAgIHJldHVybiAoZm46IGFueSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdTQ0hFRFVMRVInKTtcbi8vICAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbi8vICAgfTtcbi8vIH1cblxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdERvY3VtZW50IHtcbiAgLy8gUmVxdWlyZWQgYnkgdGhlIEFuaW1hdGlvbkRyaXZlclxuICBwdWJsaWMgYm9keTogYW55ID0ge1xuICAgIGlzT3ZlcnJpZGU6IHRydWUsXG4gIH07XG5cbiAgY3JlYXRlRWxlbWVudCh0YWc6IHN0cmluZykge1xuICAgIHRocm93IG5ldyBFcnJvcignTmF0aXZlU2NyaXB0RG9jdW1lbnQgaXMgbm90IERPTSBEb2N1bWVudC4gVGhlcmUgaXMgbm8gY3JlYXRlRWxlbWVudCgpIG1ldGhvZC4nKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ09NTU9OX1BST1ZJREVSUyA9IFtkZWZhdWx0UGFnZUZhY3RvcnlQcm92aWRlciwgeyBwcm92aWRlOiBTYW5pdGl6ZXIsIHVzZUNsYXNzOiBOYXRpdmVTY3JpcHRTYW5pdGl6ZXIsIGRlcHM6IFtdIH0sIHsgcHJvdmlkZTogRE9DVU1FTlQsIHVzZUNsYXNzOiBOYXRpdmVTY3JpcHREb2N1bWVudCwgZGVwczogW10gfV07XG5cbmV4cG9ydCBjb25zdCBwbGF0Zm9ybU5hdGl2ZVNjcmlwdCA9IGNyZWF0ZVBsYXRmb3JtRmFjdG9yeShwbGF0Zm9ybUNvcmUsICduYXRpdmVzY3JpcHREeW5hbWljJywgQ09NTU9OX1BST1ZJREVSUyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSG1yT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlciBNb2R1bGUgdHlwZSBvciBOZ01vZHVsZUZhY3RvcnkgdHlwZS5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBhIGZhY3RvcnkgZnVuY3Rpb24gYXMgdGhlIHR5cGVzIHdpbGwgY2hhbmdlIHdoZW4gbW9kdWxlcyBhcmUgcmVwbGFjZWQuXG4gICAqL1xuICBtb2R1bGVUeXBlRmFjdG9yeT86ICgpID0+IFR5cGU8YW55PiB8IE5nTW9kdWxlRmFjdG9yeTxhbnk+O1xuXG4gIC8qKlxuICAgKiBBIGxpdmVzeW5jIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgbGl2ZXN5bmMuXG4gICAqIEl0IGdpdmVzIHRoZSBITVIgYSBob29rIHRvIGFwcGx5IHRoZSBtb2R1bGUgcmVwbGFjZW1lbnQuXG4gICAqIEBwYXJhbSBib290c3RyYXBQbGF0Zm9ybSAtIEEgYm9vdHN0cmFwIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBhZnRlciBITVIgaXMgZG9uZS4gSXQgd2lsbCBib290c3RyYXAgYSBuZXcgYW5ndWxhciBhcHAgd2l0aGluIHRoZSBleGlzaXRpbmcgcGxhdGZvcm0sIHVzaW5nIHRoZSBtb2R1bGVUeXBlRmFjdG9yeSB0byBnZXQgdGhlIE1vZHVsZSBvciBOZ01vZHVsZUZhY3RvcnkgdG8gYmUgdXNlZC5cbiAgICovXG4gIGxpdmVzeW5jQ2FsbGJhY2s6IChib290c3RyYXBQbGF0Zm9ybTogKCkgPT4gdm9pZCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBPcHRpb25zIHtcbiAgY3NzRmlsZT86IHN0cmluZztcbiAgc3RhcnRQYWdlQWN0aW9uQmFySGlkZGVuPzogYm9vbGVhbjtcbiAgaG1yT3B0aW9ucz86IEhtck9wdGlvbnM7XG4gIC8qKlxuICAgKiBCYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSByb290IHZpZXdcbiAgICovXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgLyoqXG4gICAqIFVzZSBhbmltYXRlZCBsYXVuY2ggdmlldyAoYXN5bmMgYnkgZGVmYXVsdClcbiAgICovXG4gIGxhdW5jaFZpZXc/OiBBcHBMYXVuY2hWaWV3O1xuICAvKipcbiAgICogV2hlbiB1c2luZyBBc3luYyBBUFBfSU5JVElBTElaRVIsIHNldCB0aGlzIHRvIGB0cnVlYC5cbiAgICogKE5vdCBuZWVkZWQgd2hlbiB1c2luZyBsYXVuY2hWaWV3KVxuICAgKi9cbiAgYXN5bmM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBydW5OYXRpdmVTY3JpcHRBbmd1bGFyQXBwIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IHBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyA9IGZ1bmN0aW9uIChvcHRpb25zPzogQXBwT3B0aW9ucywgZXh0cmFQcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdKSB7XG4gIGNvbnNvbGUubG9nKCdwbGF0Zm9ybU5hdGl2ZVNjcmlwdER5bmFtaWMgaXMgZGVwcmVjYXRlZCwgdXNlIHJ1bk5hdGl2ZVNjcmlwdEFuZ3VsYXJBcHAgaW5zdGVhZCcpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZXh0cmFQcm92aWRlcnMgPSBleHRyYVByb3ZpZGVycyB8fCBbXTtcblxuICBjb25zdCBuZ1Jvb3RWaWV3ID0gbmV3IEFwcEhvc3RWaWV3KG5ldyBDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvciB8fCAnd2hpdGUnKSk7XG4gIGxldCBsYXVuY2hWaWV3ID0gb3B0aW9ucy5sYXVuY2hWaWV3O1xuICBpZiAoIWxhdW5jaFZpZXcgJiYgb3B0aW9ucy5hc3luYykge1xuICAgIGxhdW5jaFZpZXcgPSBuZXcgR3JpZExheW91dCgpO1xuICAgIGxhdW5jaFZpZXcuYmFja2dyb3VuZENvbG9yID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgfHwgJ3doaXRlJztcbiAgfVxuICByZXR1cm4gbmV3IE5hdGl2ZVNjcmlwdFBsYXRmb3JtUmVmUHJveHkocGxhdGZvcm1OYXRpdmVTY3JpcHQoWy4uLmV4dHJhUHJvdmlkZXJzXSksIGxhdW5jaFZpZXcpO1xufTtcbiJdfQ==