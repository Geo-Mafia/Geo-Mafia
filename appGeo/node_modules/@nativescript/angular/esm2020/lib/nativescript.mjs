import { ViewportScroller, XhrFactory, ɵNullViewportScroller as NullViewportScroller } from '@angular/common';
import { ApplicationModule, ErrorHandler, Inject, NgModule, NO_ERRORS_SCHEMA, Optional, RendererFactory2, SkipSelf, ɵINJECTOR_SCOPE as INJECTOR_SCOPE } from '@angular/core';
import { Color, Device } from '@nativescript/core';
import { AppHostView } from './app-host-view';
import { NativescriptXhrFactory } from './nativescript-xhr-factory';
import { NativeScriptRendererFactory } from './nativescript-renderer';
import { PlatformNamespaceFilter, NAMESPACE_FILTERS } from './property-filter';
import { APP_ROOT_VIEW, DEVICE, ENABLE_REUSABE_VIEWS, NATIVESCRIPT_ROOT_MODULE_ID } from './tokens';
import { ViewUtil } from './view-util';
import { DetachedLoader } from './cdk/detached-loader';
import { NativeScriptCommonModule } from './nativescript-common.module';
import * as i0 from "@angular/core";
export function generateFallbackRootView(parentRootView) {
    if (parentRootView) {
        return parentRootView;
    }
    return new AppHostView(new Color('white'));
}
export function errorHandler() {
    return new ErrorHandler();
}
export function generateRandomId() {
    return `${Date.now()}` + '_' + Math.random().toString(36).substr(2, 9);
}
export const NATIVESCRIPT_MODULE_STATIC_PROVIDERS = [
    { provide: APP_ROOT_VIEW, useFactory: generateFallbackRootView, deps: [[new Optional(), new SkipSelf(), APP_ROOT_VIEW]] },
    { provide: INJECTOR_SCOPE, useValue: 'root' },
    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
    { provide: ViewUtil, useClass: ViewUtil, deps: [NAMESPACE_FILTERS, [new Optional(), ENABLE_REUSABE_VIEWS]] },
    {
        provide: NativeScriptRendererFactory,
        useClass: NativeScriptRendererFactory,
        deps: [APP_ROOT_VIEW, NAMESPACE_FILTERS, NATIVESCRIPT_ROOT_MODULE_ID, [new Optional(), ENABLE_REUSABE_VIEWS]],
    },
    { provide: NATIVESCRIPT_ROOT_MODULE_ID, useFactory: generateRandomId },
    { provide: RendererFactory2, useExisting: NativeScriptRendererFactory },
    { provide: NAMESPACE_FILTERS, useClass: PlatformNamespaceFilter, deps: [DEVICE], multi: true },
    { provide: DEVICE, useValue: Device },
    { provide: XhrFactory, useClass: NativescriptXhrFactory, deps: [] },
];
export const NATIVESCRIPT_MODULE_PROVIDERS = [{ provide: ViewportScroller, useClass: NullViewportScroller }];
export class NativeScriptModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`NativeScriptModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);
        }
    }
}
NativeScriptModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptModule, deps: [{ token: NativeScriptModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptModule, declarations: [DetachedLoader], imports: [ApplicationModule, NativeScriptCommonModule], exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule] });
NativeScriptModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptModule, providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS], imports: [ApplicationModule, NativeScriptCommonModule, ApplicationModule, NativeScriptCommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ApplicationModule, NativeScriptCommonModule],
                    declarations: [DetachedLoader],
                    providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS],
                    exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }], ctorParameters: function () { return [{ type: NativeScriptModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [NativeScriptModule]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL25hdGl2ZXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixJQUFJLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBWSxnQkFBZ0IsRUFBRSxRQUFRLEVBQWtCLGVBQWUsSUFBSSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdk0sT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDcEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRXhFLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxjQUFxQjtJQUM1RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUNELE9B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QUUsR0FBRyw2QkFBNkIsQ0FBQztvQkFDdEYsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLHdCQUF3QixDQUFDO29CQUN0RSxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDNUI7OzBCQUVjLFFBQVE7OzBCQUFJLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld3BvcnRTY3JvbGxlciwgWGhyRmFjdG9yeSwgybVOdWxsVmlld3BvcnRTY3JvbGxlciBhcyBOdWxsVmlld3BvcnRTY3JvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbk1vZHVsZSwgRXJyb3JIYW5kbGVyLCBJbmplY3QsIE5nTW9kdWxlLCBOT19FUlJPUlNfU0NIRU1BLCBPcHRpb25hbCwgUHJvdmlkZXIsIFJlbmRlcmVyRmFjdG9yeTIsIFNraXBTZWxmLCBTdGF0aWNQcm92aWRlciwgybVJTkpFQ1RPUl9TQ09QRSBhcyBJTkpFQ1RPUl9TQ09QRSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sb3IsIERldmljZSwgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBBcHBIb3N0VmlldyB9IGZyb20gJy4vYXBwLWhvc3Qtdmlldyc7XG5pbXBvcnQgeyBOYXRpdmVzY3JpcHRYaHJGYWN0b3J5IH0gZnJvbSAnLi9uYXRpdmVzY3JpcHQteGhyLWZhY3RvcnknO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5IH0gZnJvbSAnLi9uYXRpdmVzY3JpcHQtcmVuZGVyZXInO1xuaW1wb3J0IHsgUGxhdGZvcm1OYW1lc3BhY2VGaWx0ZXIsIE5BTUVTUEFDRV9GSUxURVJTIH0gZnJvbSAnLi9wcm9wZXJ0eS1maWx0ZXInO1xuaW1wb3J0IHsgQVBQX1JPT1RfVklFVywgREVWSUNFLCBFTkFCTEVfUkVVU0FCRV9WSUVXUywgTkFUSVZFU0NSSVBUX1JPT1RfTU9EVUxFX0lEIH0gZnJvbSAnLi90b2tlbnMnO1xuaW1wb3J0IHsgVmlld1V0aWwgfSBmcm9tICcuL3ZpZXctdXRpbCc7XG5pbXBvcnQgeyBEZXRhY2hlZExvYWRlciB9IGZyb20gJy4vY2RrL2RldGFjaGVkLWxvYWRlcic7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGUgfSBmcm9tICcuL25hdGl2ZXNjcmlwdC1jb21tb24ubW9kdWxlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRmFsbGJhY2tSb290VmlldyhwYXJlbnRSb290Vmlldz86IFZpZXcpIHtcbiAgaWYgKHBhcmVudFJvb3RWaWV3KSB7XG4gICAgcmV0dXJuIHBhcmVudFJvb3RWaWV3O1xuICB9XG4gIHJldHVybiBuZXcgQXBwSG9zdFZpZXcobmV3IENvbG9yKCd3aGl0ZScpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgcmV0dXJuIG5ldyBFcnJvckhhbmRsZXIoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUlkKCkge1xuICByZXR1cm4gYCR7RGF0ZS5ub3coKX1gICsgJ18nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xufVxuXG5leHBvcnQgY29uc3QgTkFUSVZFU0NSSVBUX01PRFVMRV9TVEFUSUNfUFJPVklERVJTOiBTdGF0aWNQcm92aWRlcltdID0gW1xuICB7IHByb3ZpZGU6IEFQUF9ST09UX1ZJRVcsIHVzZUZhY3Rvcnk6IGdlbmVyYXRlRmFsbGJhY2tSb290VmlldywgZGVwczogW1tuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCksIEFQUF9ST09UX1ZJRVddXSB9LFxuICB7IHByb3ZpZGU6IElOSkVDVE9SX1NDT1BFLCB1c2VWYWx1ZTogJ3Jvb3QnIH0sXG4gIHsgcHJvdmlkZTogRXJyb3JIYW5kbGVyLCB1c2VGYWN0b3J5OiBlcnJvckhhbmRsZXIsIGRlcHM6IFtdIH0sXG4gIHsgcHJvdmlkZTogVmlld1V0aWwsIHVzZUNsYXNzOiBWaWV3VXRpbCwgZGVwczogW05BTUVTUEFDRV9GSUxURVJTLCBbbmV3IE9wdGlvbmFsKCksIEVOQUJMRV9SRVVTQUJFX1ZJRVdTXV0gfSxcbiAge1xuICAgIHByb3ZpZGU6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSxcbiAgICB1c2VDbGFzczogTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5LFxuICAgIGRlcHM6IFtBUFBfUk9PVF9WSUVXLCBOQU1FU1BBQ0VfRklMVEVSUywgTkFUSVZFU0NSSVBUX1JPT1RfTU9EVUxFX0lELCBbbmV3IE9wdGlvbmFsKCksIEVOQUJMRV9SRVVTQUJFX1ZJRVdTXV0sXG4gIH0sXG4gIHsgcHJvdmlkZTogTkFUSVZFU0NSSVBUX1JPT1RfTU9EVUxFX0lELCB1c2VGYWN0b3J5OiBnZW5lcmF0ZVJhbmRvbUlkIH0sXG4gIHsgcHJvdmlkZTogUmVuZGVyZXJGYWN0b3J5MiwgdXNlRXhpc3Rpbmc6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSB9LFxuICB7IHByb3ZpZGU6IE5BTUVTUEFDRV9GSUxURVJTLCB1c2VDbGFzczogUGxhdGZvcm1OYW1lc3BhY2VGaWx0ZXIsIGRlcHM6IFtERVZJQ0VdLCBtdWx0aTogdHJ1ZSB9LFxuICB7IHByb3ZpZGU6IERFVklDRSwgdXNlVmFsdWU6IERldmljZSB9LFxuICB7IHByb3ZpZGU6IFhockZhY3RvcnksIHVzZUNsYXNzOiBOYXRpdmVzY3JpcHRYaHJGYWN0b3J5LCBkZXBzOiBbXSB9LFxuXTtcbmV4cG9ydCBjb25zdCBOQVRJVkVTQ1JJUFRfTU9EVUxFX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFt7IHByb3ZpZGU6IFZpZXdwb3J0U2Nyb2xsZXIsIHVzZUNsYXNzOiBOdWxsVmlld3BvcnRTY3JvbGxlciB9XTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0FwcGxpY2F0aW9uTW9kdWxlLCBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtEZXRhY2hlZExvYWRlcl0sXG4gIHByb3ZpZGVyczogWy4uLk5BVElWRVNDUklQVF9NT0RVTEVfU1RBVElDX1BST1ZJREVSUywgLi4uTkFUSVZFU0NSSVBUX01PRFVMRV9QUk9WSURFUlNdLFxuICBleHBvcnRzOiBbQXBwbGljYXRpb25Nb2R1bGUsIERldGFjaGVkTG9hZGVyLCBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuICBzY2hlbWFzOiBbTk9fRVJST1JTX1NDSEVNQV0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIEBJbmplY3QoTmF0aXZlU2NyaXB0TW9kdWxlKSBwYXJlbnRNb2R1bGU6IE5hdGl2ZVNjcmlwdE1vZHVsZSB8IG51bGwpIHtcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5hdGl2ZVNjcmlwdE1vZHVsZSBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZC4gSWYgeW91IG5lZWQgYWNjZXNzIHRvIGNvbW1vbiBkaXJlY3RpdmVzIHN1Y2ggYXMgTmdJZiBhbmQgTmdGb3IgZnJvbSBhIGxhenkgbG9hZGVkIG1vZHVsZSwgaW1wb3J0IENvbW1vbk1vZHVsZSBpbnN0ZWFkLmApO1xuICAgIH1cbiAgfVxufVxuIl19