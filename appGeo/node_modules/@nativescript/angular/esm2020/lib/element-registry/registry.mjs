import { LayoutBase } from '@nativescript/core';
import { InvisibleNode } from '../views/invisible-nodes';
export const elementMap = new Map();
const camelCaseSplit = /([a-z0-9])([A-Z])/g;
const defaultViewMeta = { skipAddToDom: false };
export function registerElement(elementName, resolver, meta) {
    const entry = { resolver, meta };
    elementMap.set(elementName, entry);
    elementMap.set(elementName.toLowerCase(), entry);
    elementMap.set(elementName.replace(camelCaseSplit, '$1-$2').toLowerCase(), entry);
}
export function getViewClass(elementName) {
    const entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
    if (!entry) {
        throw new TypeError(`No known component for element ${elementName}.`);
    }
    try {
        return entry.resolver();
    }
    catch (e) {
        throw new TypeError(`Could not load view for: ${elementName}.${e}`);
    }
}
export function getViewMeta(nodeName) {
    const entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
    return (entry && entry.meta) || defaultViewMeta;
}
export function isKnownView(elementName) {
    return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
export function extractSingleViewRecursive(nodes, nestLevel) {
    const actualNodes = nodes.filter((node) => !(node instanceof InvisibleNode));
    if (actualNodes.length === 0) {
        throw new Error(`No suitable views found in list template! ` + `Nesting level: ${nestLevel}`);
    }
    else if (actualNodes.length > 1) {
        throw new Error(`More than one view found in list template!` + `Nesting level: ${nestLevel}`);
    }
    const rootLayout = actualNodes[0];
    if (!rootLayout) {
        return extractSingleViewRecursive(rootLayout.children, nestLevel + 1);
    }
    const parentLayout = rootLayout.parent;
    if (parentLayout instanceof LayoutBase) {
        const node = rootLayout.parentNode;
        parentLayout.removeChild(rootLayout);
        rootLayout.parentNode = node;
    }
    return rootLayout;
}
/**
 * @deprecated getSingleViewRecursive is deprecated, use extractSingleViewRecursive
 */
export function getSingleViewRecursive(nodes, nestLevel) {
    return extractSingleViewRecursive(nodes, nestLevel);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvZWxlbWVudC1yZWdpc3RyeS9yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBS3pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBNEQsQ0FBQztBQUM5RixNQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQztBQUM1QyxNQUFNLGVBQWUsR0FBa0IsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFFL0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxXQUFtQixFQUFFLFFBQXNCLEVBQUUsSUFBb0I7SUFDL0YsTUFBTSxLQUFLLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDakMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxXQUFtQjtJQUM5QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDdkYsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLE1BQU0sSUFBSSxTQUFTLENBQUMsa0NBQWtDLFdBQVcsR0FBRyxDQUFDLENBQUM7S0FDdkU7SUFFRCxJQUFJO1FBQ0YsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDekI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sSUFBSSxTQUFTLENBQUMsNEJBQTRCLFdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JFO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsUUFBZ0I7SUFDMUMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLE9BQU8sQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQWUsQ0FBQztBQUNsRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxXQUFtQjtJQUM3QyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLEtBQWlCLEVBQUUsU0FBaUI7SUFDN0UsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksWUFBWSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBRTdFLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsR0FBRyxrQkFBa0IsU0FBUyxFQUFFLENBQUMsQ0FBQztLQUMvRjtTQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsR0FBRyxrQkFBa0IsU0FBUyxFQUFFLENBQUMsQ0FBQztLQUMvRjtJQUVELE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsT0FBTywwQkFBMEIsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN2RTtJQUVELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDdkMsSUFBSSxZQUFZLFlBQVksVUFBVSxFQUFFO1FBQ3RDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFDbkMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztLQUM5QjtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxLQUFpQixFQUFFLFNBQWlCO0lBQ3pFLE9BQU8sMEJBQTBCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYXlvdXRCYXNlLCBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEludmlzaWJsZU5vZGUgfSBmcm9tICcuLi92aWV3cy9pbnZpc2libGUtbm9kZXMnO1xuaW1wb3J0IHsgVmlld0NsYXNzTWV0YSB9IGZyb20gJy4uL3ZpZXdzL3ZpZXctdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBWaWV3UmVzb2x2ZXIgPSAoKSA9PiBhbnk7XG5cbmV4cG9ydCBjb25zdCBlbGVtZW50TWFwID0gbmV3IE1hcDxzdHJpbmcsIHsgcmVzb2x2ZXI6IFZpZXdSZXNvbHZlcjsgbWV0YT86IFZpZXdDbGFzc01ldGEgfT4oKTtcbmNvbnN0IGNhbWVsQ2FzZVNwbGl0ID0gLyhbYS16MC05XSkoW0EtWl0pL2c7XG5jb25zdCBkZWZhdWx0Vmlld01ldGE6IFZpZXdDbGFzc01ldGEgPSB7IHNraXBBZGRUb0RvbTogZmFsc2UgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRWxlbWVudChlbGVtZW50TmFtZTogc3RyaW5nLCByZXNvbHZlcjogVmlld1Jlc29sdmVyLCBtZXRhPzogVmlld0NsYXNzTWV0YSk6IHZvaWQge1xuICBjb25zdCBlbnRyeSA9IHsgcmVzb2x2ZXIsIG1ldGEgfTtcbiAgZWxlbWVudE1hcC5zZXQoZWxlbWVudE5hbWUsIGVudHJ5KTtcbiAgZWxlbWVudE1hcC5zZXQoZWxlbWVudE5hbWUudG9Mb3dlckNhc2UoKSwgZW50cnkpO1xuICBlbGVtZW50TWFwLnNldChlbGVtZW50TmFtZS5yZXBsYWNlKGNhbWVsQ2FzZVNwbGl0LCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpLCBlbnRyeSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3Q2xhc3MoZWxlbWVudE5hbWU6IHN0cmluZyk6IGFueSB7XG4gIGNvbnN0IGVudHJ5ID0gZWxlbWVudE1hcC5nZXQoZWxlbWVudE5hbWUpIHx8IGVsZW1lbnRNYXAuZ2V0KGVsZW1lbnROYW1lLnRvTG93ZXJDYXNlKCkpO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8ga25vd24gY29tcG9uZW50IGZvciBlbGVtZW50ICR7ZWxlbWVudE5hbWV9LmApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cnkucmVzb2x2ZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENvdWxkIG5vdCBsb2FkIHZpZXcgZm9yOiAke2VsZW1lbnROYW1lfS4ke2V9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpZXdNZXRhKG5vZGVOYW1lOiBzdHJpbmcpOiBWaWV3Q2xhc3NNZXRhIHtcbiAgY29uc3QgZW50cnkgPSBlbGVtZW50TWFwLmdldChub2RlTmFtZSkgfHwgZWxlbWVudE1hcC5nZXQobm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIHJldHVybiAoZW50cnkgJiYgZW50cnkubWV0YSkgfHwgZGVmYXVsdFZpZXdNZXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNLbm93blZpZXcoZWxlbWVudE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gZWxlbWVudE1hcC5oYXMoZWxlbWVudE5hbWUpIHx8IGVsZW1lbnRNYXAuaGFzKGVsZW1lbnROYW1lLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFNpbmdsZVZpZXdSZWN1cnNpdmUobm9kZXM6IEFycmF5PGFueT4sIG5lc3RMZXZlbDogbnVtYmVyKTogVmlldyB7XG4gIGNvbnN0IGFjdHVhbE5vZGVzID0gbm9kZXMuZmlsdGVyKChub2RlKSA9PiAhKG5vZGUgaW5zdGFuY2VvZiBJbnZpc2libGVOb2RlKSk7XG5cbiAgaWYgKGFjdHVhbE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3VpdGFibGUgdmlld3MgZm91bmQgaW4gbGlzdCB0ZW1wbGF0ZSEgYCArIGBOZXN0aW5nIGxldmVsOiAke25lc3RMZXZlbH1gKTtcbiAgfSBlbHNlIGlmIChhY3R1YWxOb2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBNb3JlIHRoYW4gb25lIHZpZXcgZm91bmQgaW4gbGlzdCB0ZW1wbGF0ZSFgICsgYE5lc3RpbmcgbGV2ZWw6ICR7bmVzdExldmVsfWApO1xuICB9XG5cbiAgY29uc3Qgcm9vdExheW91dCA9IGFjdHVhbE5vZGVzWzBdO1xuICBpZiAoIXJvb3RMYXlvdXQpIHtcbiAgICByZXR1cm4gZXh0cmFjdFNpbmdsZVZpZXdSZWN1cnNpdmUocm9vdExheW91dC5jaGlsZHJlbiwgbmVzdExldmVsICsgMSk7XG4gIH1cblxuICBjb25zdCBwYXJlbnRMYXlvdXQgPSByb290TGF5b3V0LnBhcmVudDtcbiAgaWYgKHBhcmVudExheW91dCBpbnN0YW5jZW9mIExheW91dEJhc2UpIHtcbiAgICBjb25zdCBub2RlID0gcm9vdExheW91dC5wYXJlbnROb2RlO1xuICAgIHBhcmVudExheW91dC5yZW1vdmVDaGlsZChyb290TGF5b3V0KTtcbiAgICByb290TGF5b3V0LnBhcmVudE5vZGUgPSBub2RlO1xuICB9XG5cbiAgcmV0dXJuIHJvb3RMYXlvdXQ7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgZ2V0U2luZ2xlVmlld1JlY3Vyc2l2ZSBpcyBkZXByZWNhdGVkLCB1c2UgZXh0cmFjdFNpbmdsZVZpZXdSZWN1cnNpdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNpbmdsZVZpZXdSZWN1cnNpdmUobm9kZXM6IEFycmF5PGFueT4sIG5lc3RMZXZlbDogbnVtYmVyKTogVmlldyB7XG4gIHJldHVybiBleHRyYWN0U2luZ2xlVmlld1JlY3Vyc2l2ZShub2RlcywgbmVzdExldmVsKTtcbn1cbiJdfQ==