import { ProxyViewContainer, eachDescendant, CssAnimationProperty, CSSHelper } from '@nativescript/core';
import { NativeScriptAnimationPlayer } from './animation-player';
import { dashCaseToCamelCase } from './utils';
import { InvisibleNode } from '../views/invisible-nodes';
import { NativeScriptDebug } from '../trace';
class Selector {
    constructor(rawSelector) {
        this.parse(rawSelector);
    }
    match(element) {
        return this.nsSelectorMatch(element) || this.classSelectorsMatch(element);
    }
    parse(rawSelector) {
        const selectors = rawSelector.split(',').map((s) => s.trim());
        this.nsSelectors = selectors.map(CSSHelper.createSelector);
        this.classSelectors = selectors.filter((s) => s.startsWith('.')).map((s) => s.substring(1));
    }
    nsSelectorMatch(element) {
        return this.nsSelectors.some((s) => s.match(element));
    }
    classSelectorsMatch(element) {
        return this.classSelectors.some((s) => this.hasClass(element, s));
    }
    // we're using that instead of match for classes
    // that are dynamically added by the animation engine
    // such as .ng-trigger, that's added for every :enter view
    hasClass(element, cls) {
        return element && element['$$classes'] && element['$$classes'][cls];
    }
}
export class NativeScriptAnimationDriver {
    getParentElement(element) {
        return element?.parent;
    }
    validateStyleProperty(property) {
        NativeScriptDebug.animationsLog(`CssAnimationProperty.validateStyleProperty: ${property}`);
        return NativeScriptAnimationDriver.validProperties.indexOf(property) !== -1;
    }
    matchesElement(element, rawSelector) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.matchesElement ` + `element: ${element}, selector: ${rawSelector}`);
        const selector = this.makeSelector(rawSelector);
        return selector.match(element);
    }
    containsElement(elm1, elm2) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.containsElement ` + `element1: ${elm1}, element2: ${elm2}`);
        // Checking if the parent is our fake body object
        if (elm1['isOverride']) {
            return true;
        }
        const params = { originalView: elm2 };
        const result = this.visitDescendants(elm1, viewMatches, params);
        return result.found;
    }
    query(element, rawSelector, multi) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.query ` + `element: ${element}, selector: ${rawSelector} ` + `multi: ${multi}`);
        const selector = this.makeSelector(rawSelector);
        const params = { selector, multi };
        const result = this.visitDescendants(element, queryDescendants, params);
        return result.matches || [];
    }
    computeStyle(element, prop) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.computeStyle ` + `element: ${element}, prop: ${prop}`);
        const camelCaseProp = dashCaseToCamelCase(prop);
        return element.style[camelCaseProp];
    }
    animate(element, keyframes, duration, delay, easing) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.animate ` + `element: ${element}, keyframes: ${keyframes} ` + `duration: ${duration}, delay: ${delay} ` + `easing: ${easing}`);
        return new NativeScriptAnimationPlayer(element, keyframes, duration, delay, easing);
    }
    makeSelector(rawSelector) {
        return new Selector(rawSelector);
    }
    visitDescendants(element, cb, cbParams) {
        const result = {};
        // fill the result obj with the result from the callback function
        eachDescendant(element, (child) => cb(child, result, cbParams));
        return result;
    }
}
NativeScriptAnimationDriver.validProperties = [...CssAnimationProperty._getPropertyNames(), 'transform'];
function viewMatches(element, result, params) {
    if (element === params.originalView) {
        result.found = true;
    }
    return !result.found;
}
function queryDescendants(element, result, params) {
    if (!result.matches) {
        result.matches = [];
    }
    const { selector, multi } = params;
    // skip comment and text nodes
    // because they are not actual Views
    // and cannot be animated
    if (element instanceof InvisibleNode || !selector.match(element)) {
        return true;
    }
    if (element instanceof ProxyViewContainer) {
        element.eachChild((child) => {
            result.matches.push(child);
            return true;
        });
    }
    else {
        result.matches.push(element);
    }
    return multi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWRyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9hbmltYXRpb25zL2FuaW1hdGlvbi1kcml2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRSxPQUFPLEVBQVksbUJBQW1CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQW1CN0MsTUFBTSxRQUFRO0lBSVosWUFBWSxXQUFtQjtRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBZTtRQUNuQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTyxLQUFLLENBQUMsV0FBbUI7UUFDL0IsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FB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LE9BQU8sS0FBSyxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ25DLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0tBQ3JCO0lBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDdkIsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsT0FBZSxFQUFFLE1BQW1CLEVBQUUsTUFBbUI7SUFDakYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbkIsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7S0FDckI7SUFFRCxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUVuQyw4QkFBOEI7SUFDOUIsb0NBQW9DO0lBQ3BDLHlCQUF5QjtJQUN6QixJQUFJLE9BQU8sWUFBWSxhQUFhLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2hFLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLE9BQU8sWUFBWSxrQkFBa0IsRUFBRTtRQUN6QyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUU7WUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU07UUFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuaW1hdGlvblBsYXllciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRHJpdmVyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucy9icm93c2VyJztcbmltcG9ydCB7IFByb3h5Vmlld0NvbnRhaW5lciwgZWFjaERlc2NlbmRhbnQsIENzc0FuaW1hdGlvblByb3BlcnR5LCBDU1NIZWxwZXIgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRBbmltYXRpb25QbGF5ZXIgfSBmcm9tICcuL2FuaW1hdGlvbi1wbGF5ZXInO1xuaW1wb3J0IHsgS2V5ZnJhbWUsIGRhc2hDYXNlVG9DYW1lbENhc2UgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEludmlzaWJsZU5vZGUgfSBmcm9tICcuLi92aWV3cy9pbnZpc2libGUtbm9kZXMnO1xuaW1wb3J0IHsgTmdWaWV3IH0gZnJvbSAnLi4vdmlld3Mvdmlldy10eXBlcyc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHREZWJ1ZyB9IGZyb20gJy4uL3RyYWNlJztcblxuaW50ZXJmYWNlIFZpZXdNYXRjaFJlc3VsdCB7XG4gIGZvdW5kOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgVmlld01hdGNoUGFyYW1zIHtcbiAgb3JpZ2luYWxWaWV3OiBOZ1ZpZXc7XG59XG5cbmludGVyZmFjZSBRdWVyeVBhcmFtcyB7XG4gIHNlbGVjdG9yOiBTZWxlY3RvcjtcbiAgbXVsdGk6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBRdWVyeVJlc3VsdCB7XG4gIG1hdGNoZXM6IE5nVmlld1tdO1xufVxuXG5jbGFzcyBTZWxlY3RvciB7XG4gIHByaXZhdGUgbnNTZWxlY3RvcnM6IEFycmF5PGFueT47XG4gIHByaXZhdGUgY2xhc3NTZWxlY3RvcnM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHJhd1NlbGVjdG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLnBhcnNlKHJhd1NlbGVjdG9yKTtcbiAgfVxuXG4gIG1hdGNoKGVsZW1lbnQ6IE5nVmlldyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5zU2VsZWN0b3JNYXRjaChlbGVtZW50KSB8fCB0aGlzLmNsYXNzU2VsZWN0b3JzTWF0Y2goZWxlbWVudCk7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlKHJhd1NlbGVjdG9yOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzZWxlY3RvcnMgPSByYXdTZWxlY3Rvci5zcGxpdCgnLCcpLm1hcCgocykgPT4gcy50cmltKCkpO1xuXG4gICAgdGhpcy5uc1NlbGVjdG9ycyA9IHNlbGVjdG9ycy5tYXAoQ1NTSGVscGVyLmNyZWF0ZVNlbGVjdG9yKTtcbiAgICB0aGlzLmNsYXNzU2VsZWN0b3JzID0gc2VsZWN0b3JzLmZpbHRlcigocykgPT4gcy5zdGFydHNXaXRoKCcuJykpLm1hcCgocykgPT4gcy5zdWJzdHJpbmcoMSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBuc1NlbGVjdG9yTWF0Y2goZWxlbWVudDogTmdWaWV3KSB7XG4gICAgcmV0dXJuIHRoaXMubnNTZWxlY3RvcnMuc29tZSgocykgPT4gcy5tYXRjaChlbGVtZW50KSk7XG4gIH1cblxuICBwcml2YXRlIGNsYXNzU2VsZWN0b3JzTWF0Y2goZWxlbWVudDogTmdWaWV3KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xhc3NTZWxlY3RvcnMuc29tZSgocykgPT4gdGhpcy5oYXNDbGFzcyhlbGVtZW50LCBzKSk7XG4gIH1cblxuICAvLyB3ZSdyZSB1c2luZyB0aGF0IGluc3RlYWQgb2YgbWF0Y2ggZm9yIGNsYXNzZXNcbiAgLy8gdGhhdCBhcmUgZHluYW1pY2FsbHkgYWRkZWQgYnkgdGhlIGFuaW1hdGlvbiBlbmdpbmVcbiAgLy8gc3VjaCBhcyAubmctdHJpZ2dlciwgdGhhdCdzIGFkZGVkIGZvciBldmVyeSA6ZW50ZXIgdmlld1xuICBwcml2YXRlIGhhc0NsYXNzKGVsZW1lbnQ6IE5nVmlldywgY2xzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50WyckJGNsYXNzZXMnXSAmJiBlbGVtZW50WyckJGNsYXNzZXMnXVtjbHNdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRBbmltYXRpb25Ecml2ZXIgaW1wbGVtZW50cyBBbmltYXRpb25Ecml2ZXIge1xuICBwcml2YXRlIHN0YXRpYyB2YWxpZFByb3BlcnRpZXMgPSBbLi4uQ3NzQW5pbWF0aW9uUHJvcGVydHkuX2dldFByb3BlcnR5TmFtZXMoKSwgJ3RyYW5zZm9ybSddO1xuXG4gIGdldFBhcmVudEVsZW1lbnQoZWxlbWVudDogTmdWaWV3KTogTmdWaWV3IHtcbiAgICByZXR1cm4gZWxlbWVudD8ucGFyZW50IGFzIE5nVmlldztcbiAgfVxuXG4gIHZhbGlkYXRlU3R5bGVQcm9wZXJ0eShwcm9wZXJ0eTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgTmF0aXZlU2NyaXB0RGVidWcuYW5pbWF0aW9uc0xvZyhgQ3NzQW5pbWF0aW9uUHJvcGVydHkudmFsaWRhdGVTdHlsZVByb3BlcnR5OiAke3Byb3BlcnR5fWApO1xuICAgIHJldHVybiBOYXRpdmVTY3JpcHRBbmltYXRpb25Ecml2ZXIudmFsaWRQcm9wZXJ0aWVzLmluZGV4T2YocHJvcGVydHkpICE9PSAtMTtcbiAgfVxuXG4gIG1hdGNoZXNFbGVtZW50KGVsZW1lbnQ6IE5nVmlldywgcmF3U2VsZWN0b3I6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIE5hdGl2ZVNjcmlwdERlYnVnLmFuaW1hdGlvbnNMb2coYE5hdGl2ZVNjcmlwdEFuaW1hdGlvbkRyaXZlci5tYXRjaGVzRWxlbWVudCBgICsgYGVsZW1lbnQ6ICR7ZWxlbWVudH0sIHNlbGVjdG9yOiAke3Jhd1NlbGVjdG9yfWApO1xuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLm1ha2VTZWxlY3RvcihyYXdTZWxlY3Rvcik7XG4gICAgcmV0dXJuIHNlbGVjdG9yLm1hdGNoKGVsZW1lbnQpO1xuICB9XG5cbiAgY29udGFpbnNFbGVtZW50KGVsbTE6IE5nVmlldywgZWxtMjogTmdWaWV3KTogYm9vbGVhbiB7XG4gICAgTmF0aXZlU2NyaXB0RGVidWcuYW5pbWF0aW9uc0xvZyhgTmF0aXZlU2NyaXB0QW5pbWF0aW9uRHJpdmVyLmNvbnRhaW5zRWxlbWVudCBgICsgYGVsZW1lbnQxOiAke2VsbTF9LCBlbGVtZW50MjogJHtlbG0yfWApO1xuXG4gICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHBhcmVudCBpcyBvdXIgZmFrZSBib2R5IG9iamVjdFxuICAgIGlmIChlbG0xWydpc092ZXJyaWRlJ10pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmFtczogVmlld01hdGNoUGFyYW1zID0geyBvcmlnaW5hbFZpZXc6IGVsbTIgfTtcbiAgICBjb25zdCByZXN1bHQ6IFZpZXdNYXRjaFJlc3VsdCA9IHRoaXMudmlzaXREZXNjZW5kYW50cyhlbG0xLCB2aWV3TWF0Y2hlcywgcGFyYW1zKTtcblxuICAgIHJldHVybiByZXN1bHQuZm91bmQ7XG4gIH1cblxuICBxdWVyeShlbGVtZW50OiBOZ1ZpZXcsIHJhd1NlbGVjdG9yOiBzdHJpbmcsIG11bHRpOiBib29sZWFuKTogTmdWaWV3W10ge1xuICAgIE5hdGl2ZVNjcmlwdERlYnVnLmFuaW1hdGlvbnNMb2coYE5hdGl2ZVNjcmlwdEFuaW1hdGlvbkRyaXZlci5xdWVyeSBgICsgYGVsZW1lbnQ6ICR7ZWxlbWVudH0sIHNlbGVjdG9yOiAke3Jhd1NlbGVjdG9yfSBgICsgYG11bHRpOiAke211bHRpfWApO1xuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLm1ha2VTZWxlY3RvcihyYXdTZWxlY3Rvcik7XG4gICAgY29uc3QgcGFyYW1zOiBRdWVyeVBhcmFtcyA9IHsgc2VsZWN0b3IsIG11bHRpIH07XG4gICAgY29uc3QgcmVzdWx0OiBRdWVyeVJlc3VsdCA9IHRoaXMudmlzaXREZXNjZW5kYW50cyhlbGVtZW50LCBxdWVyeURlc2NlbmRhbnRzLCBwYXJhbXMpO1xuXG4gICAgcmV0dXJuIHJlc3VsdC5tYXRjaGVzIHx8IFtdO1xuICB9XG5cbiAgY29tcHV0ZVN0eWxlKGVsZW1lbnQ6IE5nVmlldywgcHJvcDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBOYXRpdmVTY3JpcHREZWJ1Zy5hbmltYXRpb25zTG9nKGBOYXRpdmVTY3JpcHRBbmltYXRpb25Ecml2ZXIuY29tcHV0ZVN0eWxlIGAgKyBgZWxlbWVudDogJHtlbGVtZW50fSwgcHJvcDogJHtwcm9wfWApO1xuXG4gICAgY29uc3QgY2FtZWxDYXNlUHJvcCA9IGRhc2hDYXNlVG9DYW1lbENhc2UocHJvcCk7XG4gICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbY2FtZWxDYXNlUHJvcF07XG4gIH1cblxuICBhbmltYXRlKGVsZW1lbnQ6IE5nVmlldywga2V5ZnJhbWVzOiBLZXlmcmFtZVtdLCBkdXJhdGlvbjogbnVtYmVyLCBkZWxheTogbnVtYmVyLCBlYXNpbmc6IHN0cmluZyk6IEFuaW1hdGlvblBsYXllciB7XG4gICAgTmF0aXZlU2NyaXB0RGVidWcuYW5pbWF0aW9uc0xvZyhgTmF0aXZlU2NyaXB0QW5pbWF0aW9uRHJpdmVyLmFuaW1hdGUgYCArIGBlbGVtZW50OiAke2VsZW1lbnR9LCBrZXlmcmFtZXM6ICR7a2V5ZnJhbWVzfSBgICsgYGR1cmF0aW9uOiAke2R1cmF0aW9ufSwgZGVsYXk6ICR7ZGVsYXl9IGAgKyBgZWFzaW5nOiAke2Vhc2luZ31gKTtcblxuICAgIHJldHVybiBuZXcgTmF0aXZlU2NyaXB0QW5pbWF0aW9uUGxheWVyKGVsZW1lbnQsIGtleWZyYW1lcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcpO1xuICB9XG5cbiAgcHJpdmF0ZSBtYWtlU2VsZWN0b3IocmF3U2VsZWN0b3I6IHN0cmluZyk6IFNlbGVjdG9yIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdG9yKHJhd1NlbGVjdG9yKTtcbiAgfVxuXG4gIHByaXZhdGUgdmlzaXREZXNjZW5kYW50cyhlbGVtZW50OiBOZ1ZpZXcsIGNiOiAoY2hpbGQ6IE5nVmlldywgcmVzdWx0OiBhbnksIHBhcmFtczogYW55KSA9PiBib29sZWFuLCBjYlBhcmFtczogYW55KTogYW55IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAvLyBmaWxsIHRoZSByZXN1bHQgb2JqIHdpdGggdGhlIHJlc3VsdCBmcm9tIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgIGVhY2hEZXNjZW5kYW50KGVsZW1lbnQsIChjaGlsZDogTmdWaWV3KSA9PiBjYihjaGlsZCwgcmVzdWx0LCBjYlBhcmFtcykpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiB2aWV3TWF0Y2hlcyhlbGVtZW50OiBOZ1ZpZXcsIHJlc3VsdDogVmlld01hdGNoUmVzdWx0LCBwYXJhbXM6IFZpZXdNYXRjaFBhcmFtcyk6IGJvb2xlYW4ge1xuICBpZiAoZWxlbWVudCA9PT0gcGFyYW1zLm9yaWdpbmFsVmlldykge1xuICAgIHJlc3VsdC5mb3VuZCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gIXJlc3VsdC5mb3VuZDtcbn1cblxuZnVuY3Rpb24gcXVlcnlEZXNjZW5kYW50cyhlbGVtZW50OiBOZ1ZpZXcsIHJlc3VsdDogUXVlcnlSZXN1bHQsIHBhcmFtczogUXVlcnlQYXJhbXMpOiBib29sZWFuIHtcbiAgaWYgKCFyZXN1bHQubWF0Y2hlcykge1xuICAgIHJlc3VsdC5tYXRjaGVzID0gW107XG4gIH1cblxuICBjb25zdCB7IHNlbGVjdG9yLCBtdWx0aSB9ID0gcGFyYW1zO1xuXG4gIC8vIHNraXAgY29tbWVudCBhbmQgdGV4dCBub2Rlc1xuICAvLyBiZWNhdXNlIHRoZXkgYXJlIG5vdCBhY3R1YWwgVmlld3NcbiAgLy8gYW5kIGNhbm5vdCBiZSBhbmltYXRlZFxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEludmlzaWJsZU5vZGUgfHwgIXNlbGVjdG9yLm1hdGNoKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFByb3h5Vmlld0NvbnRhaW5lcikge1xuICAgIGVsZW1lbnQuZWFjaENoaWxkKChjaGlsZDogTmdWaWV3KSA9PiB7XG4gICAgICByZXN1bHQubWF0Y2hlcy5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5tYXRjaGVzLnB1c2goZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gbXVsdGk7XG59XG4iXX0=