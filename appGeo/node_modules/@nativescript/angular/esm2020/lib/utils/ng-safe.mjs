/**
 * This decorator delays a potentially unsafe event (like loaded/unloaded that will sometimes be called before ngOnInit) to be handled safely by ensuring it's called after a lifecycle hook.
 * @param runAfterEvent event/function call to wait until the event can be fired ('ngOnInit', 'ngAfterViewInit', ...)
 * @param options Optional event handling params
 * @returns decorator
 */
export function NativeScriptNgSafeEvent(runAfterEvent, options = {}) {
    const event = runAfterEvent;
    return function (target, propertyKey, descriptor) {
        function getNgSafe() {
            return target['__ng_safe__'];
        }
        if (!target['__ng_safe__']) {
            const defaultNgSafe = {
                events: {},
                runBefore: {},
            };
            target['__ng_safe__'] = defaultNgSafe;
        }
        if (!getNgSafe().events[event]) {
            getNgSafe().events[event] = {
                done: false,
                buffer: [],
                originalDelegate: target[event],
            };
            target[event] = function (...args) {
                try {
                    if (getNgSafe().events[event].originalDelegate) {
                        return getNgSafe().events[event].originalDelegate.apply(this, args);
                    }
                }
                finally {
                    getNgSafe().events[event].done = true;
                    getNgSafe().events[event].buffer.forEach((fn) => fn.fn());
                    getNgSafe().events[event].buffer = [];
                }
            };
        }
        if (options.alwaysRunBefore) {
            getNgSafe().runBefore[propertyKey] = target[options.alwaysRunBefore];
            target[`${options.alwaysRunBefore}`] = function (...args) {
                getNgSafe()
                    .events[event].buffer.filter((v) => v.key === propertyKey)
                    .forEach((fn) => fn.fn());
                getNgSafe().events[event].buffer = getNgSafe().events[event].buffer.filter((v) => v.key !== propertyKey);
                getNgSafe().runBefore[propertyKey];
                if (getNgSafe().runBefore[propertyKey]) {
                    return getNgSafe().runBefore[propertyKey].apply(this, args);
                }
            };
        }
        const oldFn = descriptor.value;
        descriptor.value = function (...args) {
            if (getNgSafe().events[event].done) {
                return oldFn.apply(this, args);
            }
            let shouldPush = true;
            if (options.onlyFirst || options.onlyLast) {
                for (let i = 0; i < getNgSafe().events[event].buffer.length; i++) {
                    if (getNgSafe().events[event].buffer[i].key === propertyKey) {
                        if (options.onlyFirst) {
                            shouldPush = false;
                            break;
                        }
                        if (options.onlyLast) {
                            getNgSafe().events[event].buffer.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            if (shouldPush) {
                getNgSafe().events[event].buffer.push({
                    key: propertyKey,
                    fn: oldFn.bind(this, args),
                });
            }
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2FmZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi91dGlscy9uZy1zYWZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxhQUFxQixFQUNyQixVQUlJLEVBQUU7SUFFTixNQUFNLEtBQUssR0FBRyxhQUFhLENBQUM7SUFDNUIsT0FBTyxVQUFVLE1BQWUsRUFBRSxXQUFtQixFQUFFLFVBQThCO1FBZ0JuRixTQUFTLFNBQVM7WUFDaEIsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxhQUFhLEdBQWU7Z0JBQ2hDLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxFQUFFO2FBQ2QsQ0FBQztZQUNGLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxhQUFhLENBQUM7U0FDdkM7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlCLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDMUIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNoQyxDQUFDO1lBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLFVBQVUsR0FBRyxJQUFJO2dCQUMvQixJQUFJO29CQUNGLElBQUksU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFO3dCQUM5QyxPQUFPLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxF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QkFDUDtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ3BDLEdBQUcsRUFBRSxXQUFXO29CQUNoQixFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO2lCQUMzQixDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZGVjb3JhdG9yIGRlbGF5cyBhIHBvdGVudGlhbGx5IHVuc2FmZSBldmVudCAobGlrZSBsb2FkZWQvdW5sb2FkZWQgdGhhdCB3aWxsIHNvbWV0aW1lcyBiZSBjYWxsZWQgYmVmb3JlIG5nT25Jbml0KSB0byBiZSBoYW5kbGVkIHNhZmVseSBieSBlbnN1cmluZyBpdCdzIGNhbGxlZCBhZnRlciBhIGxpZmVjeWNsZSBob29rLlxuICogQHBhcmFtIHJ1bkFmdGVyRXZlbnQgZXZlbnQvZnVuY3Rpb24gY2FsbCB0byB3YWl0IHVudGlsIHRoZSBldmVudCBjYW4gYmUgZmlyZWQgKCduZ09uSW5pdCcsICduZ0FmdGVyVmlld0luaXQnLCAuLi4pXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBldmVudCBoYW5kbGluZyBwYXJhbXNcbiAqIEByZXR1cm5zIGRlY29yYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gTmF0aXZlU2NyaXB0TmdTYWZlRXZlbnQoXG4gIHJ1bkFmdGVyRXZlbnQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIG9ubHlMYXN0PzogYm9vbGVhbjtcbiAgICBvbmx5Rmlyc3Q/OiBib29sZWFuO1xuICAgIGFsd2F5c1J1bkJlZm9yZT86IHN0cmluZztcbiAgfSA9IHt9XG4pIHtcbiAgY29uc3QgZXZlbnQgPSBydW5BZnRlckV2ZW50O1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogdW5rbm93biwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgdHlwZSBOZ1NhZmVUeXBlID0ge1xuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgICBkb25lOiBib29sZWFuO1xuICAgICAgICAgIG9yaWdpbmFsRGVsZWdhdGU6ICguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd247XG4gICAgICAgICAgYnVmZmVyOiBBcnJheTx7XG4gICAgICAgICAgICBrZXk6IHN0cmluZztcbiAgICAgICAgICAgIGZuOiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB1bmtub3duO1xuICAgICAgICAgIH0+O1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIHJ1bkJlZm9yZToge1xuICAgICAgICBbcHJvcGVydHlLZXk6IHN0cmluZ106ICguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd247XG4gICAgICB9O1xuICAgIH07XG4gICAgZnVuY3Rpb24gZ2V0TmdTYWZlKCk6IE5nU2FmZVR5cGUge1xuICAgICAgcmV0dXJuIHRhcmdldFsnX19uZ19zYWZlX18nXTtcbiAgICB9XG4gICAgaWYgKCF0YXJnZXRbJ19fbmdfc2FmZV9fJ10pIHtcbiAgICAgIGNvbnN0IGRlZmF1bHROZ1NhZmU6IE5nU2FmZVR5cGUgPSB7XG4gICAgICAgIGV2ZW50czoge30sXG4gICAgICAgIHJ1bkJlZm9yZToge30sXG4gICAgICB9O1xuICAgICAgdGFyZ2V0WydfX25nX3NhZmVfXyddID0gZGVmYXVsdE5nU2FmZTtcbiAgICB9XG4gICAgaWYgKCFnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdKSB7XG4gICAgICBnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdID0ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgb3JpZ2luYWxEZWxlZ2F0ZTogdGFyZ2V0W2V2ZW50XSxcbiAgICAgIH07XG4gICAgICB0YXJnZXRbZXZlbnRdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoZ2V0TmdTYWZlKCkuZXZlbnRzW2V2ZW50XS5vcmlnaW5hbERlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmdTYWZlKCkuZXZlbnRzW2V2ZW50XS5vcmlnaW5hbERlbGVnYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdLmRvbmUgPSB0cnVlO1xuICAgICAgICAgIGdldE5nU2FmZSgpLmV2ZW50c1tldmVudF0uYnVmZmVyLmZvckVhY2goKGZuKSA9PiBmbi5mbigpKTtcbiAgICAgICAgICBnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdLmJ1ZmZlciA9IFtdO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFsd2F5c1J1bkJlZm9yZSkge1xuICAgICAgZ2V0TmdTYWZlKCkucnVuQmVmb3JlW3Byb3BlcnR5S2V5XSA9IHRhcmdldFtvcHRpb25zLmFsd2F5c1J1bkJlZm9yZV07XG5cbiAgICAgIHRhcmdldFtgJHtvcHRpb25zLmFsd2F5c1J1bkJlZm9yZX1gXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGdldE5nU2FmZSgpXG4gICAgICAgICAgLmV2ZW50c1tldmVudF0uYnVmZmVyLmZpbHRlcigodikgPT4gdi5rZXkgPT09IHByb3BlcnR5S2V5KVxuICAgICAgICAgIC5mb3JFYWNoKChmbikgPT4gZm4uZm4oKSk7XG4gICAgICAgIGdldE5nU2FmZSgpLmV2ZW50c1tldmVudF0uYnVmZmVyID0gZ2V0TmdTYWZlKCkuZXZlbnRzW2V2ZW50XS5idWZmZXIuZmlsdGVyKCh2KSA9PiB2LmtleSAhPT0gcHJvcGVydHlLZXkpO1xuICAgICAgICBnZXROZ1NhZmUoKS5ydW5CZWZvcmVbcHJvcGVydHlLZXldO1xuICAgICAgICBpZiAoZ2V0TmdTYWZlKCkucnVuQmVmb3JlW3Byb3BlcnR5S2V5XSkge1xuICAgICAgICAgIHJldHVybiBnZXROZ1NhZmUoKS5ydW5CZWZvcmVbcHJvcGVydHlLZXldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG9sZEZuID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgIGlmIChnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIG9sZEZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgbGV0IHNob3VsZFB1c2ggPSB0cnVlO1xuICAgICAgaWYgKG9wdGlvbnMub25seUZpcnN0IHx8IG9wdGlvbnMub25seUxhc3QpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdLmJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdLmJ1ZmZlcltpXS5rZXkgPT09IHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vbmx5Rmlyc3QpIHtcbiAgICAgICAgICAgICAgc2hvdWxkUHVzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9ubHlMYXN0KSB7XG4gICAgICAgICAgICAgIGdldE5nU2FmZSgpLmV2ZW50c1tldmVudF0uYnVmZmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkUHVzaCkge1xuICAgICAgICBnZXROZ1NhZmUoKS5ldmVudHNbZXZlbnRdLmJ1ZmZlci5wdXNoKHtcbiAgICAgICAgICBrZXk6IHByb3BlcnR5S2V5LFxuICAgICAgICAgIGZuOiBvbGRGbi5iaW5kKHRoaXMsIGFyZ3MpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuIl19