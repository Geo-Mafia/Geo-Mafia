import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { NSLocationStrategy } from './ns-location-strategy';
import { FrameService } from '../frame.service';
import { NativeScriptDebug } from '../../trace';
import { findTopActivatedRouteNodeForOutlet } from './page-router-outlet-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./ns-location-strategy";
import * as i3 from "../frame.service";
export class RouterExtensions {
    constructor(router, locationStrategy, frameService) {
        this.router = router;
        this.locationStrategy = locationStrategy;
        this.frameService = frameService;
    }
    navigate(commands, extras) {
        if (extras) {
            this.locationStrategy._setNavigationOptions(extras);
        }
        return this.router.navigate(commands, extras);
    }
    navigateByUrl(url, options) {
        if (options) {
            this.locationStrategy._setNavigationOptions(options);
        }
        return this.router.navigateByUrl(url);
    }
    back(backNavigationOptions) {
        if (backNavigationOptions) {
            this.backOutlets(backNavigationOptions);
        }
        else {
            this.locationStrategy.back();
        }
    }
    canGoBack(backNavigationOptions) {
        let canGoBack = true;
        if (backNavigationOptions) {
            const { outletsToBack, outlets } = this.findOutletsToBack(backNavigationOptions);
            if (outletsToBack.length !== outlets.length) {
                NativeScriptDebug.routerError('No outlet found relative to activated route');
            }
            else {
                outletsToBack.forEach((outletToBack) => {
                    if (!this.locationStrategy.canGoBack(outletToBack)) {
                        canGoBack = false;
                    }
                });
            }
        }
        else {
            canGoBack = this.locationStrategy.canGoBack();
        }
        return canGoBack;
    }
    backToPreviousPage() {
        this.frameService.getFrame().goBack();
    }
    canGoBackToPreviousPage() {
        return this.frameService.getFrame().canGoBack();
    }
    backOutlets(options) {
        const { outletsToBack, outlets } = this.findOutletsToBack(options);
        if (outletsToBack.length !== outlets.length) {
            NativeScriptDebug.routerError('No outlet found relative to activated route');
        }
        else {
            outletsToBack.forEach((outletToBack) => {
                if (outletToBack.isPageNavigationBack) {
                    NativeScriptDebug.routerError('Attempted to call startGoBack while going back:');
                }
                else {
                    this.locationStrategy.back(outletToBack);
                }
            });
        }
    }
    // tslint:disable-next-line:max-line-length
    findOutletsToBack(options) {
        const rootRoute = this.router.routerState.root;
        let outlets = options.outlets;
        let relativeRoute = options.relativeTo || rootRoute;
        const relativeRouteOutlet = this.findOutletByRoute(relativeRoute);
        const isNSEmptyOutlet = relativeRouteOutlet && relativeRouteOutlet.isNSEmptyOutlet;
        // Lazy named outlet has added 'primary' inner NSEmptyOutlet child.
        // Take parent route when `relativeTo` option points to the outer named outlet.
        if (isNSEmptyOutlet && relativeRoute.outlet !== 'primary') {
            relativeRoute = relativeRoute.parent || relativeRoute;
        }
        outlets = outlets || [relativeRoute.outlet];
        const outletsToBack = this.findOutletsRecursive([...outlets], relativeRoute);
        return { outletsToBack: outletsToBack, outlets: outlets };
    }
    // warning, outlets is mutable!
    findOutletsRecursive(outlets, route) {
        if (!route || outlets.length === 0) {
            return [];
        }
        const outletsToBack = [];
        if (outlets.some((currentOutlet) => currentOutlet === route.outlet)) {
            const outlet = this.findOutletByRoute(route);
            if (outlet) {
                outlets.splice(outlets.indexOf(route.outlet), 1);
                outletsToBack.push(outlet);
            }
        }
        if (!route.children) {
            return outletsToBack;
        }
        for (let index = 0; index < route.children.length; index++) {
            if (outlets.length === 0) {
                break;
            }
            const currentRoute = route.children[index];
            outletsToBack.push(...this.findOutletsRecursive(outlets, currentRoute));
        }
        return outletsToBack;
    }
    findOutletByRoute(currentRoute) {
        let outlet;
        const currentRouteSnapshop = findTopActivatedRouteNodeForOutlet(currentRoute.snapshot);
        const outletKey = this.locationStrategy.getRouteFullPath(currentRouteSnapshop);
        outlet = this.locationStrategy.findOutlet(outletKey, currentRouteSnapshop);
        return outlet;
    }
}
RouterExtensions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: RouterExtensions, deps: [{ token: i1.Router }, { token: i2.NSLocationStrategy }, { token: i3.FrameService }], target: i0.ɵɵFactoryTarget.Injectable });
RouterExtensions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: RouterExtensions, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: RouterExtensions, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.NSLocationStrategy }, { type: i3.FrameService }]; } });
//# sourceMappingURL=data:application/json;base64,