import { Directive, Input, ElementRef, NgZone } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { NativeScriptDebug } from '../../trace';
import { RouterExtensions } from './router-extensions';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./router-extensions";
/**
 * The nsRouterLink directive lets you link to specific parts of your app.
 *
 * Consider the following route configuration:
 * ```
 * [{ path: "/user", component: UserCmp }]
 * ```
 *
 * When linking to this `User` route, you can write:
 *
 * ```
 * <a [nsRouterLink]="["/user"]">link to user component</a>
 * ```
 *
 * NSRouterLink expects the value to be an array of path segments, followed by the params
 * for that level of routing. For instance `["/team", {teamId: 1}, "user", {userId: 2}]`
 * means that we want to generate a link to `/team;teamId=1/user;userId=2`.
 *
 * The first segment name can be prepended with `/`, `./`, or `../`.
 * If the segment begins with `/`, the router will look up the route from the root of the app.
 * If the segment begins with `./`, or doesn"t begin with a slash, the router will
 * instead look in the current component"s children for the route.
 * And if the segment begins with `../`, the router will go up one level.
 */
export class NSRouterLink {
    constructor(ngZone, router, navigator, route, el) {
        this.ngZone = ngZone;
        this.router = router;
        this.navigator = navigator;
        this.route = route;
        this.el = el;
        this.pageTransition = true;
        this.commands = [];
    }
    ngAfterViewInit() {
        this.el.nativeElement.on('tap', () => {
            this.ngZone.run(() => {
                this.onTap();
            });
        });
    }
    set params(data) {
        if (Array.isArray(data)) {
            this.commands = data;
        }
        else {
            this.commands = [data];
        }
    }
    onTap() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`nsRouterLink.tapped: ${this.commands} ` + `clear: ${this.clearHistory} ` + `transition: ${JSON.stringify(this.pageTransition)} ` + `duration: ${this.pageTransitionDuration}`);
        }
        const extras = this.getExtras();
        // this.navigator.navigateByUrl(this.urlTree, extras);
        this.navigator.navigate(this.commands, {
            ...extras,
            relativeTo: this.route,
            queryParams: this.queryParams,
            fragment: this.fragment,
            queryParamsHandling: this.queryParamsHandling,
            preserveFragment: attrBoolValue(this.preserveFragment),
        });
    }
    getExtras() {
        const transition = this.getTransition();
        return {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
            clearHistory: this.convertClearHistory(this.clearHistory),
            animated: transition.animated,
            transition: transition.transition,
        };
    }
    get urlTree() {
        const urlTree = this.router.createUrlTree(this.commands, {
            relativeTo: this.route,
            queryParams: this.queryParams,
            fragment: this.fragment,
            queryParamsHandling: this.queryParamsHandling,
            preserveFragment: attrBoolValue(this.preserveFragment),
        });
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`nsRouterLink urlTree created: ${urlTree}`);
        }
        return urlTree;
    }
    convertClearHistory(value) {
        return value === true || value === 'true';
    }
    getTransition() {
        let transition;
        let animated;
        if (typeof this.pageTransition === 'boolean') {
            animated = this.pageTransition;
        }
        else if (typeof this.pageTransition === 'string') {
            if (this.pageTransition === 'none' || this.pageTransition === 'false') {
                animated = false;
            }
            else {
                animated = true;
                transition = {
                    name: this.pageTransition,
                };
            }
        }
        else {
            animated = true;
            transition = this.pageTransition;
        }
        let duration = +this.pageTransitionDuration;
        if (!isNaN(duration)) {
            transition = transition || {};
            transition.duration = duration;
        }
        return { animated, transition };
    }
}
NSRouterLink.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NSRouterLink, deps: [{ token: i0.NgZone }, { token: i1.Router }, { token: i2.RouterExtensions }, { token: i1.ActivatedRoute }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NSRouterLink.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.3", type: NSRouterLink, selector: "[nsRouterLink]", inputs: { target: "target", queryParams: "queryParams", fragment: "fragment", queryParamsHandling: "queryParamsHandling", preserveQueryParams: "preserveQueryParams", preserveFragment: "preserveFragment", skipLocationChange: "skipLocationChange", replaceUrl: "replaceUrl", clearHistory: "clearHistory", pageTransition: "pageTransition", pageTransitionDuration: "pageTransitionDuration", params: ["nsRouterLink", "params"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NSRouterLink, decorators: [{
            type: Directive,
            args: [{ selector: '[nsRouterLink]' }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Router }, { type: i2.RouterExtensions }, { type: i1.ActivatedRoute }, { type: i0.ElementRef }]; }, propDecorators: { target: [{
                type: Input
            }], queryParams: [{
                type: Input
            }], fragment: [{
                type: Input
            }], queryParamsHandling: [{
                type: Input
            }], preserveQueryParams: [{
                type: Input
            }], preserveFragment: [{
                type: Input
            }], skipLocationChange: [{
                type: Input
            }], replaceUrl: [{
                type: Input
            }], clearHistory: [{
                type: Input
            }], pageTransition: [{
                type: Input
            }], pageTransitionDuration: [{
                type: Input
            }], params: [{
                type: Input,
                args: ['nsRouterLink']
            }] } });
function attrBoolValue(s) {
    return s === '' || !!s;
}
//# sourceMappingURL=data:application/json;base64,