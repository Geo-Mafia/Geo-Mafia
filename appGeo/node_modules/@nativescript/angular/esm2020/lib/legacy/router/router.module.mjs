import { NgModule, NO_ERRORS_SCHEMA, Optional, SkipSelf } from '@angular/core';
import { RouterModule, RouteReuseStrategy } from '@angular/router';
import { LocationStrategy, PlatformLocation } from '@angular/common';
import { NSRouterLink } from './ns-router-link';
import { NSRouterLinkActive } from './ns-router-link-active';
import { PageRouterOutlet } from './page-router-outlet';
import { NSLocationStrategy } from './ns-location-strategy';
import { NativescriptPlatformLocation } from './ns-platform-location';
import { NSRouteReuseStrategy } from './ns-route-reuse-strategy';
import { RouterExtensions } from './router-extensions';
import { FrameService } from '../frame.service';
import { NSEmptyOutletComponent } from './ns-empty-outlet.component';
import { NativeScriptCommonModule } from '../../nativescript-common.module';
import { START_PATH } from '../../tokens';
import * as i0 from "@angular/core";
export { PageRoute } from './page-router-outlet';
export { RouterExtensions } from './router-extensions';
export { Outlet, defaultNavOptions } from './ns-location-utils';
export { NSRouterLink } from './ns-router-link';
export { NSRouterLinkActive } from './ns-router-link-active';
export { PageRouterOutlet } from './page-router-outlet';
export { NSLocationStrategy } from './ns-location-strategy';
export { NSEmptyOutletComponent } from './ns-empty-outlet.component';
export function provideLocationStrategy(locationStrategy, frameService, startPath) {
    return locationStrategy ? locationStrategy : new NSLocationStrategy(frameService, startPath);
}
export class NativeScriptRouterModule {
    static forRoot(routes, config) {
        return {
            ngModule: NativeScriptRouterModule,
            providers: [
                ...RouterModule.forRoot(routes, config).providers,
                {
                    provide: NSLocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [[NSLocationStrategy, new Optional(), new SkipSelf()], FrameService, [new Optional(), START_PATH]],
                },
                { provide: LocationStrategy, useExisting: NSLocationStrategy },
                NativescriptPlatformLocation,
                { provide: PlatformLocation, useExisting: NativescriptPlatformLocation },
                RouterExtensions,
                NSRouteReuseStrategy,
                { provide: RouteReuseStrategy, useExisting: NSRouteReuseStrategy },
            ],
        };
    }
    static forChild(routes) {
        return { ngModule: NativeScriptRouterModule, providers: RouterModule.forChild(routes).providers };
    }
}
NativeScriptRouterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptRouterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptRouterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptRouterModule, declarations: [NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent], imports: [RouterModule, NativeScriptCommonModule], exports: [RouterModule, NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent] });
NativeScriptRouterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptRouterModule, imports: [RouterModule, NativeScriptCommonModule, RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptRouterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                    imports: [RouterModule, NativeScriptCommonModule],
                    exports: [RouterModule, NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9sZWdhY3kvcm91dGVyL3JvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRyxPQUFPLEVBQUUsWUFBWSxFQUF3QixrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQW9DLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxnQkFBb0MsRUFBRSxZQUEwQixFQUFFLFNBQWlCO0lBQ3pILE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBUUQsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWMsRUFBRSxNQUFxQjtRQUNsRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxTQUFTLEVBQUU7Z0JBQ1QsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxTQUFTO2dCQUNqRDtvQkFDRSxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixVQUFVLEVBQUUsdUJBQXVCO29CQUNuQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3pHO2dCQUNELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRTtnQkFDOUQsNEJBQTRCO2dCQUM1QixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsNEJBQTRCLEVBQUU7Z0JBQ3hFLGdCQUFnQjtnQkFDaEIsb0JBQW9CO2dCQUNwQixFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUU7YUFDbkU7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBYztRQUM1QixPQUFPLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3BHLENBQUM7O3FIQXZCVSx3QkFBd0I7c0hBQXhCLHdCQUF3QixpQkFMcEIsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixhQUMvRSxZQUFZLEVBQUUsd0JBQXdCLGFBQ3RDLFlBQVksRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCO3NIQUd2Rix3QkFBd0IsWUFKekIsWUFBWSxFQUFFLHdCQUF3QixFQUN0QyxZQUFZOzJGQUdYLHdCQUF3QjtrQkFOcEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUM7b0JBQzFGLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSx3QkFBd0IsQ0FBQztvQkFDakQsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQztvQkFDbkcsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQzVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5PX0VSUk9SU19TQ0hFTUEsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlLCBSb3V0ZXMsIEV4dHJhT3B0aW9ucywgUm91dGVSZXVzZVN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3ksIFBsYXRmb3JtTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTlNSb3V0ZXJMaW5rIH0gZnJvbSAnLi9ucy1yb3V0ZXItbGluayc7XG5pbXBvcnQgeyBOU1JvdXRlckxpbmtBY3RpdmUgfSBmcm9tICcuL25zLXJvdXRlci1saW5rLWFjdGl2ZSc7XG5pbXBvcnQgeyBQYWdlUm91dGVyT3V0bGV0IH0gZnJvbSAnLi9wYWdlLXJvdXRlci1vdXRsZXQnO1xuaW1wb3J0IHsgTlNMb2NhdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9ucy1sb2NhdGlvbi1zdHJhdGVneSc7XG5pbXBvcnQgeyBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIH0gZnJvbSAnLi9ucy1wbGF0Zm9ybS1sb2NhdGlvbic7XG5pbXBvcnQgeyBOU1JvdXRlUmV1c2VTdHJhdGVneSB9IGZyb20gJy4vbnMtcm91dGUtcmV1c2Utc3RyYXRlZ3knO1xuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJy4vcm91dGVyLWV4dGVuc2lvbnMnO1xuaW1wb3J0IHsgRnJhbWVTZXJ2aWNlIH0gZnJvbSAnLi4vZnJhbWUuc2VydmljZSc7XG5pbXBvcnQgeyBOU0VtcHR5T3V0bGV0Q29tcG9uZW50IH0gZnJvbSAnLi9ucy1lbXB0eS1vdXRsZXQuY29tcG9uZW50JztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdENvbW1vbk1vZHVsZSB9IGZyb20gJy4uLy4uL25hdGl2ZXNjcmlwdC1jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IFNUQVJUX1BBVEggfSBmcm9tICcuLi8uLi90b2tlbnMnO1xuXG5leHBvcnQgeyBQYWdlUm91dGUgfSBmcm9tICcuL3BhZ2Utcm91dGVyLW91dGxldCc7XG5leHBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSAnLi9yb3V0ZXItZXh0ZW5zaW9ucyc7XG5leHBvcnQgeyBPdXRsZXQsIE5hdmlnYXRpb25PcHRpb25zLCBMb2NhdGlvblN0YXRlLCBkZWZhdWx0TmF2T3B0aW9ucyB9IGZyb20gJy4vbnMtbG9jYXRpb24tdXRpbHMnO1xuZXhwb3J0IHsgTlNSb3V0ZXJMaW5rIH0gZnJvbSAnLi9ucy1yb3V0ZXItbGluayc7XG5leHBvcnQgeyBOU1JvdXRlckxpbmtBY3RpdmUgfSBmcm9tICcuL25zLXJvdXRlci1saW5rLWFjdGl2ZSc7XG5leHBvcnQgeyBQYWdlUm91dGVyT3V0bGV0IH0gZnJvbSAnLi9wYWdlLXJvdXRlci1vdXRsZXQnO1xuZXhwb3J0IHsgTlNMb2NhdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9ucy1sb2NhdGlvbi1zdHJhdGVneSc7XG5leHBvcnQgeyBOU0VtcHR5T3V0bGV0Q29tcG9uZW50IH0gZnJvbSAnLi9ucy1lbXB0eS1vdXRsZXQuY29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVMb2NhdGlvblN0cmF0ZWd5KGxvY2F0aW9uU3RyYXRlZ3k6IE5TTG9jYXRpb25TdHJhdGVneSwgZnJhbWVTZXJ2aWNlOiBGcmFtZVNlcnZpY2UsIHN0YXJ0UGF0aDogc3RyaW5nKTogTlNMb2NhdGlvblN0cmF0ZWd5IHtcbiAgcmV0dXJuIGxvY2F0aW9uU3RyYXRlZ3kgPyBsb2NhdGlvblN0cmF0ZWd5IDogbmV3IE5TTG9jYXRpb25TdHJhdGVneShmcmFtZVNlcnZpY2UsIHN0YXJ0UGF0aCk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05TUm91dGVyTGluaywgTlNSb3V0ZXJMaW5rQWN0aXZlLCBQYWdlUm91dGVyT3V0bGV0LCBOU0VtcHR5T3V0bGV0Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW1JvdXRlck1vZHVsZSwgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1JvdXRlck1vZHVsZSwgTlNSb3V0ZXJMaW5rLCBOU1JvdXRlckxpbmtBY3RpdmUsIFBhZ2VSb3V0ZXJPdXRsZXQsIE5TRW1wdHlPdXRsZXRDb21wb25lbnRdLFxuICBzY2hlbWFzOiBbTk9fRVJST1JTX1NDSEVNQV0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KHJvdXRlczogUm91dGVzLCBjb25maWc/OiBFeHRyYU9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC4uLlJvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcywgY29uZmlnKS5wcm92aWRlcnMsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOU0xvY2F0aW9uU3RyYXRlZ3ksXG4gICAgICAgICAgdXNlRmFjdG9yeTogcHJvdmlkZUxvY2F0aW9uU3RyYXRlZ3ksXG4gICAgICAgICAgZGVwczogW1tOU0xvY2F0aW9uU3RyYXRlZ3ksIG5ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKV0sIEZyYW1lU2VydmljZSwgW25ldyBPcHRpb25hbCgpLCBTVEFSVF9QQVRIXV0sXG4gICAgICAgIH0sXG4gICAgICAgIHsgcHJvdmlkZTogTG9jYXRpb25TdHJhdGVneSwgdXNlRXhpc3Rpbmc6IE5TTG9jYXRpb25TdHJhdGVneSB9LFxuICAgICAgICBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uLFxuICAgICAgICB7IHByb3ZpZGU6IFBsYXRmb3JtTG9jYXRpb24sIHVzZUV4aXN0aW5nOiBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIH0sXG4gICAgICAgIFJvdXRlckV4dGVuc2lvbnMsXG4gICAgICAgIE5TUm91dGVSZXVzZVN0cmF0ZWd5LFxuICAgICAgICB7IHByb3ZpZGU6IFJvdXRlUmV1c2VTdHJhdGVneSwgdXNlRXhpc3Rpbmc6IE5TUm91dGVSZXVzZVN0cmF0ZWd5IH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZm9yQ2hpbGQocm91dGVzOiBSb3V0ZXMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7IG5nTW9kdWxlOiBOYXRpdmVTY3JpcHRSb3V0ZXJNb2R1bGUsIHByb3ZpZGVyczogUm91dGVyTW9kdWxlLmZvckNoaWxkKHJvdXRlcykucHJvdmlkZXJzIH07XG4gIH1cbn1cbiJdfQ==