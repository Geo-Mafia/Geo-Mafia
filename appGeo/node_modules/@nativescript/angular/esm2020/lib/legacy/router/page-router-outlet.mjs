import { __decorate, __metadata } from "tslib";
import { Attribute, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, Inject, Injector, EventEmitter, Output, ViewContainerRef, ElementRef, NgZone } from '@angular/core';
import { ActivatedRoute, ChildrenOutletContexts, PRIMARY_OUTLET } from '@angular/router';
import { Frame, Page, profile } from '@nativescript/core';
import { BehaviorSubject } from 'rxjs';
import { PAGE_FACTORY } from '../../tokens';
import { NativeScriptDebug } from '../../trace';
import { DetachedLoader } from '../../cdk/detached-loader';
import { ViewUtil } from '../../view-util';
import { NSLocationStrategy } from './ns-location-strategy';
import { NSRouteReuseStrategy } from './ns-route-reuse-strategy';
import { findTopActivatedRouteNodeForOutlet, pageRouterActivatedSymbol, loaderRefSymbol, destroyComponentRef } from './page-router-outlet-utils';
import { registerElement } from '../../element-registry';
import { PageService } from '../../cdk/frame-page/page.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./ns-location-strategy";
import * as i3 from "./ns-route-reuse-strategy";
import * as i4 from "../../view-util";
export class PageRoute {
    constructor(startRoute) {
        this.activatedRoute = new BehaviorSubject(startRoute);
    }
}
export class DestructibleInjector {
    constructor(destructableProviders, parent) {
        this.destructableProviders = destructableProviders;
        this.parent = parent;
        this.refs = new Set();
    }
    get(token, notFoundValue, flags) {
        const ref = this.parent.get(token, notFoundValue, flags);
        if (this.destructableProviders.has(token)) {
            this.refs.add(ref);
        }
        return ref;
    }
    destroy() {
        this.refs.forEach((ref) => {
            if (ref.ngOnDestroy instanceof Function) {
                ref.ngOnDestroy();
            }
        });
        this.refs.clear();
    }
}
const routeToString = function (activatedRoute) {
    return activatedRoute.pathFromRoot.join('->');
};
registerElement('page-router-outlet', () => Frame);
// eslint-disable-next-line @angular-eslint/directive-selector
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class PageRouterOutlet {
    constructor(parentContexts, location, name, actionBarVisibility, isEmptyOutlet, locationStrategy, componentFactoryResolver, resolver, changeDetector, pageFactory, routeReuseStrategy, ngZone, elRef, viewUtil) {
        this.parentContexts = parentContexts;
        this.location = location;
        this.locationStrategy = locationStrategy;
        this.componentFactoryResolver = componentFactoryResolver;
        this.resolver = resolver;
        this.changeDetector = changeDetector;
        this.pageFactory = pageFactory;
        this.routeReuseStrategy = routeReuseStrategy;
        this.ngZone = ngZone;
        // tslint:disable-line:directive-class-suffix
        this.activated = null;
        this._activatedRoute = null;
        this.attachEvents = new EventEmitter();
        this.detachEvents = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.activateEvents = new EventEmitter(); // tslint:disable-line:no-output-rename
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.deactivateEvents = new EventEmitter(); // tslint:disable-line:no-output-rename
        this.isEmptyOutlet = isEmptyOutlet;
        this.frame = elRef.nativeElement;
        this.setActionBarVisibility(actionBarVisibility);
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`PageRouterOutlet.constructor frame: ${this.frame}`);
        }
        this.name = name || PRIMARY_OUTLET;
        parentContexts.onChildOutletCreated(this.name, this);
        this.viewUtil = viewUtil;
        this.detachedLoaderFactory = resolver.resolveComponentFactory(DetachedLoader);
    }
    /** @deprecated from Angular since v4 */
    get locationInjector() {
        return this.location.injector;
    }
    /** @deprecated from Angular since v4 */
    get locationFactoryResolver() {
        return this.resolver;
    }
    get isActivated() {
        return !!this.activated;
    }
    get component() {
        if (!this.activated) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.routerLog('Outlet is not activated');
            }
            return;
        }
        return this.activated.instance;
    }
    get activatedRoute() {
        if (!this.activated) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.routerLog('Outlet is not activated');
            }
            return;
        }
        return this._activatedRoute;
    }
    get activatedRouteData() {
        if (this._activatedRoute) {
            return this._activatedRoute.snapshot.data;
        }
        return {};
    }
    setActionBarVisibility(actionBarVisibility) {
        switch (actionBarVisibility) {
            case 'always':
            case 'never':
                this.frame.actionBarVisibility = actionBarVisibility;
                return;
            default:
                this.frame.actionBarVisibility = 'auto';
        }
    }
    ngOnDestroy() {
        // In the event that the `parentContexts` has changed the outlet
        // via the creation of another outlet, the `onChildOutletDestroyed`
        // will be skipped
        if (this.parentContexts.getContext(this.name)?.outlet === this) {
            // Clear accumulated modal view page cache when page-router-outlet
            // destroyed on modal view closing
            this.parentContexts.onChildOutletDestroyed(this.name);
        }
        if (this.outlet) {
            this.outlet.outletKeys.forEach((key) => {
                this.routeReuseStrategy.clearModalCache(key);
            });
            this.locationStrategy.clearOutlet(this.frame);
        }
        else {
            NativeScriptDebug.routerLog('PageRouterOutlet.ngOnDestroy: no outlet available for page-router-outlet');
        }
        if (this.isActivated) {
            const c = this.activated.instance;
            this.activated.hostView.detach();
            destroyComponentRef(this.activated);
            this.deactivateEvents.emit(c);
            this.activated = null;
        }
    }
    deactivate() {
        if (!this.outlet || !this.outlet.isPageNavigationBack) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.routerLog('Currently not in page back navigation - component should be detached instead of deactivated.');
            }
            return;
        }
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog('PageRouterOutlet.deactivate() while going back - should destroy');
        }
        if (!this.isActivated) {
            return;
        }
        const c = this.activated.instance;
        destroyComponentRef(this.activated);
        this.activated = null;
        this._activatedRoute = null;
        this.deactivateEvents.emit(c);
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */
    detach() {
        if (!this.isActivated) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.routerLog('Outlet is not activated');
            }
            return;
        }
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`PageRouterOutlet.detach() - ${routeToString(this._activatedRoute)}`);
        }
        // Detach from ChangeDetection
        this.activated.hostView.detach();
        const component = this.activated;
        this.activated = null;
        this._activatedRoute = null;
        this.detachEvents.emit(component.instance);
        return component;
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */
    attach(ref, activatedRoute) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`PageRouterOutlet.attach() - ${routeToString(activatedRoute)}`);
        }
        this.activated = ref;
        // reattach to ChangeDetection
        this.activated.hostView.markForCheck();
        this.activated.hostView.reattach();
        this._activatedRoute = activatedRoute;
        this.markActivatedRoute(activatedRoute);
        // we have a child with the same name, so we don't finish the back nav
        if (this.isFinalPageRouterOutlet()) {
            this.locationStrategy._finishBackPageNavigation(this.frame);
        }
        this.attachEvents.emit(ref.instance);
    }
    isFinalPageRouterOutlet() {
        let children = this.parentContexts.getContext(this.name)?.children;
        while (children) {
            const childContext = children.getContext(this.name);
            if (!childContext || !childContext.outlet) {
                return true;
            }
            if (childContext.outlet instanceof PageRouterOutlet) {
                return false;
            }
            children = childContext.children;
        }
        return true;
    }
    /**
     * Called by the Router to instantiate a new component during the commit phase of a navigation.
     * This method in turn is responsible for calling the `routerOnActivate` hook of its child.
     */
    activateWith(activatedRoute, resolver) {
        this.outlet = this.outlet || this.getOutlet(activatedRoute.snapshot);
        if (!this.outlet) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.routerError('No outlet found relative to activated route');
            }
            return;
        }
        this.outlet.isNSEmptyOutlet = this.isEmptyOutlet;
        this.locationStrategy.updateOutletFrame(this.outlet, this.frame, this.isEmptyOutlet);
        if (this.outlet && this.outlet.isPageNavigationBack) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.routerLog('Currently in page back navigation - component should be reattached instead of activated.');
            }
            if (this.isFinalPageRouterOutlet()) {
                this.locationStrategy._finishBackPageNavigation(this.frame);
            }
        }
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`PageRouterOutlet.activateWith() - ${routeToString(activatedRoute)}`);
        }
        this._activatedRoute = activatedRoute;
        this.markActivatedRoute(activatedRoute);
        resolver = resolver || this.resolver;
        this.activateOnGoForward(activatedRoute, resolver);
        this.activateEvents.emit(this.activated.instance);
    }
    activateOnGoForward(activatedRoute, loadedResolver) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog('PageRouterOutlet.activate() forward navigation - ' + 'create detached loader in the loader container');
        }
        let resolver;
        let ourInjector = this.location.injector;
        if (!(loadedResolver instanceof ComponentFactoryResolver)) {
            ourInjector = loadedResolver;
            resolver = loadedResolver?.get(ComponentFactoryResolver);
        }
        else {
            resolver = loadedResolver;
        }
        const factory = this.getComponentFactory(activatedRoute, resolver);
        const page = this.pageFactory({
            isNavigation: true,
            componentType: factory.componentType,
        });
        const destructables = new Set([]);
        const injector = Injector.create({
            providers: [
                { provide: Page, useValue: page },
                { provide: Frame, useValue: this.frame },
                { provide: PageRoute, useValue: new PageRoute(activatedRoute) },
                { provide: ActivatedRoute, useValue: activatedRoute },
                { provide: ChildrenOutletContexts, useValue: this.parentContexts.getOrCreateContext(this.name).children },
                { provide: PageService, useClass: PageService },
            ],
            parent: ourInjector,
        });
        const childInjector = new DestructibleInjector(destructables, injector);
        const loaderRef = this.location.createComponent(this.detachedLoaderFactory, this.location.length, childInjector, []);
        loaderRef.onDestroy(() => childInjector.destroy());
        this.changeDetector.markForCheck();
        this.activated = loaderRef.instance.loadWithFactoryInLocation(factory);
        this.activated.changeDetectorRef.detectChanges();
        this.loadComponentInPage(page, this.activated, { activatedRoute });
        this.activated[loaderRefSymbol] = loaderRef;
    }
    loadComponentInPage(page, componentRef, navigationContext) {
        // Component loaded. Find its root native view.
        const componentView = componentRef.location.nativeElement;
        // Remove it from original native parent.
        this.viewUtil.removeChild(componentView.parent, componentView);
        // Add it to the new page
        this.viewUtil.appendChild(page, componentView);
        let topActivatedRoute = findTopActivatedRouteNodeForOutlet(this._activatedRoute.snapshot);
        let outletKey = this.locationStrategy.getRouteFullPath(topActivatedRoute);
        const thisRouteKey = outletKey;
        while (!this.locationStrategy.findOutlet(outletKey)) {
            topActivatedRoute = topActivatedRoute.parent;
            if (!topActivatedRoute) {
                NativeScriptDebug.routerError('Could not find outlet for route: ' + thisRouteKey);
                break;
            }
            outletKey = this.locationStrategy.getRouteFullPath(topActivatedRoute);
        }
        const navigatedFromCallback = global.Zone.current.wrap((args) => {
            if (args.isBackNavigation) {
                this.locationStrategy._beginBackPageNavigation(this.frame, outletKey);
                this.locationStrategy.back(null, this.frame);
            }
        });
        // TODO: experiment with using NgZone instead of global above
        // const navigatedFromCallback = (args: NavigatedData) => {
        // 	if (args.isBackNavigation) {
        //     this.ngZone.run(() => {
        //       this.locationStrategy._beginBackPageNavigation(this.frame);
        //       this.locationStrategy.back(null, this.frame);
        //     });
        // 	}
        // };
        page.on(Page.navigatedFromEvent, navigatedFromCallback);
        componentRef.onDestroy(() => {
            if (page) {
                page.off(Page.navigatedFromEvent, navigatedFromCallback);
                page = null;
            }
        });
        const navOptions = this.locationStrategy._beginPageNavigation(this.frame);
        const isReplace = navOptions.replaceUrl && !navOptions.clearHistory;
        // Clear refCache if navigation with clearHistory
        if (navOptions.clearHistory) {
            const clearCallback = () => setTimeout(() => {
                if (this.outlet) {
                    // potential alternative fix (only fix children of the current outlet)
                    // const nests = outletKey.split('/');
                    // this.outlet.outletKeys.filter((k) => k.split('/').length >= nests.length).forEach((key) => this.routeReuseStrategy.clearCache(key));
                    this.outlet.outletKeys.forEach((key) => this.routeReuseStrategy.clearCache(key));
                }
            });
            page.once(Page.navigatedToEvent, clearCallback);
        }
        else if (navOptions.replaceUrl) {
            const clearCallback = () => setTimeout(() => {
                if (this.outlet) {
                    // potential alternative fix (only fix children of the current outlet)
                    // const nests = outletKey.split('/');
                    // this.outlet.outletKeys.filter((k) => k.split('/').length >= nests.length).forEach((key) => this.routeReuseStrategy.popCache(key));
                    this.outlet.outletKeys.forEach((key) => this.routeReuseStrategy.popCache(key));
                }
            });
            page.once(Page.navigatedToEvent, clearCallback);
        }
        const navigationEntry = {
            create() {
                return page;
            },
            context: navigationContext,
            clearHistory: navOptions.clearHistory,
            animated: navOptions.animated,
            transition: navOptions.transition,
        };
        if (isReplace && this.frame.currentPage) {
            this.frame.replacePage(navigationEntry);
        }
        else {
            this.frame.navigate(navigationEntry);
        }
    }
    // Find and mark the top activated route as an activated one.
    // In ns-location-strategy we are reusing components only if their corresponing routes
    // are marked as activated from this method.
    markActivatedRoute(activatedRoute) {
        const queue = [];
        queue.push(activatedRoute.snapshot);
        let currentRoute = queue.shift();
        while (currentRoute) {
            currentRoute.children.forEach((childRoute) => {
                queue.push(childRoute);
            });
            const topActivatedRoute = findTopActivatedRouteNodeForOutlet(currentRoute);
            const outletKey = this.locationStrategy.getRouteFullPath(topActivatedRoute);
            const outlet = this.locationStrategy.findOutlet(outletKey, topActivatedRoute);
            if (outlet && outlet.frames.length) {
                topActivatedRoute[pageRouterActivatedSymbol] = true;
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.routerLog('Activated route marked as page: ' + routeToString(topActivatedRoute));
                }
            }
            currentRoute = queue.shift();
        }
    }
    getComponentFactory(activatedRoute, loadedResolver) {
        const component = activatedRoute.routeConfig.component || activatedRoute.component;
        return loadedResolver ? loadedResolver.resolveComponentFactory(component) : this.componentFactoryResolver.resolveComponentFactory(component);
    }
    getOutlet(activatedRouteSnapshot) {
        const topActivatedRoute = findTopActivatedRouteNodeForOutlet(activatedRouteSnapshot);
        const outletKey = this.locationStrategy.getRouteFullPath(topActivatedRoute);
        let outlet = this.locationStrategy.findOutlet(outletKey, topActivatedRoute);
        // Named lazy loaded outlet.
        if (!outlet && this.isEmptyOutlet) {
            const parentOutletKey = this.locationStrategy.getRouteFullPath(topActivatedRoute.parent);
            outlet = this.locationStrategy.findOutlet(parentOutletKey, topActivatedRoute.parent);
            if (outlet) {
                outlet.outletKeys.push(outletKey);
            }
        }
        return outlet;
    }
}
PageRouterOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: PageRouterOutlet, deps: [{ token: i1.ChildrenOutletContexts }, { token: i0.ViewContainerRef }, { token: 'name', attribute: true }, { token: 'actionBarVisibility', attribute: true }, { token: 'isEmptyOutlet', attribute: true }, { token: i2.NSLocationStrategy }, { token: i0.ComponentFactoryResolver }, { token: i0.ComponentFactoryResolver }, { token: i0.ChangeDetectorRef }, { token: PAGE_FACTORY }, { token: i3.NSRouteReuseStrategy }, { token: i0.NgZone }, { token: i0.ElementRef }, { token: i4.ViewUtil }], target: i0.ɵɵFactoryTarget.Directive });
PageRouterOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.3", type: PageRouterOutlet, selector: "page-router-outlet", outputs: { activateEvents: "activate", deactivateEvents: "deactivate" }, ngImport: i0 });
__decorate([
    profile,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [ActivatedRoute, Object]),
    __metadata("design:returntype", void 0)
], PageRouterOutlet.prototype, "activateWith", null);
__decorate([
    profile,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Page, ComponentRef, Object]),
    __metadata("design:returntype", void 0)
], PageRouterOutlet.prototype, "loadComponentInPage", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: PageRouterOutlet, decorators: [{
            type: Directive,
            args: [{ selector: 'page-router-outlet' }]
        }], ctorParameters: function () { return [{ type: i1.ChildrenOutletContexts }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['name']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['actionBarVisibility']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['isEmptyOutlet']
                }] }, { type: i2.NSLocationStrategy }, { type: i0.ComponentFactoryResolver }, { type: i0.ComponentFactoryResolver }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PAGE_FACTORY]
                }] }, { type: i3.NSRouteReuseStrategy }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: i4.ViewUtil }]; }, propDecorators: { activateEvents: [{
                type: Output,
                args: ['activate']
            }], deactivateEvents: [{
                type: Output,
                args: ['deactivate']
            }], activateWith: [], loadComponentInPage: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1yb3V0ZXItb3V0bGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2xlZ2FjeS9yb3V0ZXIvcGFnZS1yb3V0ZXItb3V0bGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFvQix3QkFBd0IsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBa0IsUUFBUSxFQUFhLFlBQVksRUFBRSxNQUFNLEVBQVEsZ0JBQWdCLEVBQUUsVUFBVSxFQUFlLE1BQU0sRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDblIsT0FBTyxFQUFFLGNBQWMsRUFBMEIsc0JBQXNCLEVBQVEsY0FBYyxFQUF3QixNQUFNLGlCQUFpQixDQUFDO0FBRTdJLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFpQixPQUFPLEVBQW1CLE1BQU0sb0JBQW9CLENBQUM7QUFFMUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QyxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sY0FBYyxDQUFDO0FBQ3pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSx5QkFBeUIsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqSixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7Ozs7QUFFaEUsTUFBTSxPQUFPLFNBQVM7SUFHcEIsWUFBWSxVQUEwQjtRQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBb0IscUJBQWtDLEVBQVUsTUFBZ0I7UUFBNUQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFhO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUR4RSxTQUFJLEdBQUcsSUFBSSxHQUFHLEVBQU8sQ0FBQztJQUNxRCxDQUFDO0lBQ3BGLEdBQUcsQ0FBSSxLQUFrQyxFQUFFLGFBQWlCLEVBQUUsS0FBbUI7UUFDL0UsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN4QixJQUFJLEdBQUcsQ0FBQyxXQUFXLFlBQVksUUFBUSxFQUFFO2dCQUN2QyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDbkI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBSUQsTUFBTSxhQUFhLEdBQUcsVUFBVSxjQUF1RDtJQUNyRixPQUFPLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLGVBQWUsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRCw4REFBOEQ7QUFFOUQsa0VBQWtFO0FBQ2xFLE1BQU0sT0FBTyxnQkFBZ0I7SUE2RDNCLFlBQ1UsY0FBc0MsRUFDdEMsUUFBMEIsRUFDZixJQUFZLEVBQ0csbUJBQTJCLEVBQ2pDLGFBQXNCLEVBQzFDLGdCQUFvQyxFQUNwQyx3QkFBa0QsRUFDbEQsUUFBa0MsRUFDbEMsY0FBaUMsRUFDWCxXQUF3QixFQUM5QyxrQkFBd0MsRUFDeEMsTUFBYyxFQUN0QixLQUFpQixFQUNqQixRQUFrQjtRQWJWLG1CQUFjLEdBQWQsY0FBYyxDQUF3QjtRQUN0QyxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUkxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW9CO1FBQ3BDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQ1gsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDOUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFzQjtRQUN4QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBeEV4Qiw2Q0FBNkM7UUFDckMsY0FBUyxHQUE2QixJQUFJLENBQUM7UUFDM0Msb0JBQWUsR0FBMEIsSUFBSSxDQUFDO1FBU3RELGlCQUFZLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDekQsaUJBQVksR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV6RCw0REFBNEQ7UUFDeEMsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsdUNBQXVDO1FBQ3JHLDREQUE0RDtRQUN0QyxxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsdUNBQXVDO1FBMkR2RyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDakMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsdUNBQXVDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksY0FBYyxDQUFDO1FBQ25DLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFPLElBQUksQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxRQUFRLENBQUMsdUJBQXVCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQXJFRCx3Q0FBd0M7SUFDeEMsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBQ0Qsd0NBQXdDO0lBQ3hDLElBQUksdUJBQXVCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7YUFDeEQ7WUFDRCxPQUFPO1NBQ1I7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLGNBQWM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7YUFDeEQ7WUFDRCxPQUFPO1NBQ1I7UUFFRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksa0JBQWtCO1FBQ3BCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztTQUMzQztRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQWdDRCxzQkFBc0IsQ0FBQyxtQkFBMkI7UUFDaEQsUUFBUSxtQkFBbUIsRUFBRTtZQUMzQixLQUFLLFFBQVEsQ0FBQztZQUNkLEtBQUssT0FBTztnQkFDVixJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO2dCQUNyRCxPQUFPO1lBRVQ7Z0JBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULGdFQUFnRTtRQUNoRSxtRUFBbUU7UUFDbkUsa0JBQWtCO1FBQ2xCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sS0FBVSxJQUFJLEVBQUU7WUFDbkUsa0VBQWtFO1lBQ2xFLGtDQUFrQztZQUNsQyxJQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2RDtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNyQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9DLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNMLGlCQUFpQixDQUFDLFNBQVMsQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO1NBQ3pHO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUVwQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUU7WUFDckQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLDhGQUE4RixDQUFDLENBQUM7YUFDN0g7WUFDRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3BDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxpRUFBaUUsQ0FBQyxDQUFDO1NBQ2hHO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTztTQUNSO1FBRUQsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDbEMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBRTVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ3BDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2FBQ3hEO1lBQ0QsT0FBTztTQUNSO1FBRUQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsK0JBQStCLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ25HO1FBRUQsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWpDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxHQUFzQixFQUFFLGNBQThCO1FBQzNELElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDcEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLCtCQUErQixhQUFhLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFFckIsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV4QyxzRUFBc0U7UUFDdEUsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTyx1QkFBdUI7UUFDN0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQztRQUNuRSxPQUFPLFFBQVEsRUFBRTtZQUNmLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO2dCQUN6QyxPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsSUFBSSxZQUFZLENBQUMsTUFBTSxZQUFZLGdCQUFnQixFQUFFO2dCQUNuRCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsUUFBUSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUM7U0FDbEM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7O09BR0c7SUFFSCxZQUFZLENBQUMsY0FBOEIsRUFBRSxRQUErRDtRQUMxRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtnQkFDcEMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7YUFDOUU7WUFDRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2pELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXJGLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFO1lBQ25ELElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ3BDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQywwRkFBMEYsQ0FBQyxDQUFDO2FBQ3pIO1lBQ0QsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM3RDtTQUNGO1FBRUQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMscUNBQXFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbkc7UUFFRCxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztRQUV0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFeEMsUUFBUSxHQUFHLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRXJDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sbUJBQW1CLENBQUMsY0FBOEIsRUFBRSxjQUE4RDtRQUN4SCxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3BDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxtREFBbUQsR0FBRyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ3JJO1FBRUQsSUFBSSxRQUFrQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxDQUFDLGNBQWMsWUFBWSx3QkFBd0IsQ0FBQyxFQUFFO1lBQ3pELFdBQVcsR0FBRyxjQUFjLENBQUM7WUFDN0IsUUFBUSxHQUFHLGNBQWMsRUFBRSxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0wsUUFBUSxHQUFHLGNBQWMsQ0FBQztTQUMzQjtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUM1QixZQUFZLEVBQUUsSUFBSTtZQUNsQixhQUFhLEVBQUUsT0FBTyxDQUFDLGFBQWE7U0FDckMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7Z0JBQ2pDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDeEMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFDL0QsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7Z0JBQ3JELEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pHLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO2FBQ2hEO1lBQ0QsTUFBTSxFQUFFLFdBQVc7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNySCxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDakQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBR08sbUJBQW1CLENBQUMsSUFBVSxFQUFFLFlBQStCLEVBQUUsaUJBQWlCO1FBQ3hGLCtDQUErQztRQUMvQyxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUMxRCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUMvRCx5QkFBeUI7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRS9DLElBQUksaUJBQWlCLEdBQUcsa0NBQWtDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRSxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7UUFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbkQsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1lBQzdDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtnQkFDdEIsaUJBQWlCLENBQUMsV0FBVyxDQUFDLG1DQUFtQyxHQUFHLFlBQVksQ0FBQyxDQUFDO2dCQUNsRixNQUFNO2FBQ1A7WUFDRCxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDdkU7UUFFRCxNQUFNLHFCQUFxQixHQUFTLE1BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQW1CLEVBQUUsRUFBRTtZQUNwRixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ3RFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsNkRBQTZEO1FBQzdELDJEQUEyRDtRQUMzRCxnQ0FBZ0M7UUFDaEMsOEJBQThCO1FBQzlCLG9FQUFvRTtRQUNwRSxzREFBc0Q7UUFDdEQsVUFBVTtRQUNWLEtBQUs7UUFDTCxLQUFLO1FBRUwsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUN4RCxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUMxQixJQUFJLElBQUksRUFBRTtnQkFDUixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLEdBQUcsSUFBSSxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUUsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFVBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7UUFFcEUsaURBQWlEO1FBQ2pELElBQUksVUFBVSxDQUFDLFlBQVksRUFBRTtZQUMzQixNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FDekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2Ysc0VBQXNFO29CQUN0RSxzQ0FBc0M7b0JBQ3RDLHVJQUF1STtvQkFDdkksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2xGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFTCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNqRDthQUFNLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRTtZQUNoQyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FDekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2Ysc0VBQXNFO29CQUN0RSxzQ0FBc0M7b0JBQ3RDLHFJQUFxSTtvQkFDckksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2hGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFTCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNqRDtRQUVELE1BQU0sZUFBZSxHQUFvQjtZQUN2QyxNQUFNO2dCQUNKLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUNELE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZO1lBQ3JDLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtZQUM3QixVQUFVLEVBQUUsVUFBVSxDQUFDLFVBQVU7U0FDbEMsQ0FBQztRQUVGLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3pDO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFRCw2REFBNkQ7SUFDN0Qsc0ZBQXNGO0lBQ3RGLDRDQUE0QztJQUNwQyxrQkFBa0IsQ0FBQyxjQUE4QjtRQUN2RCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWpDLE9BQU8sWUFBWSxFQUFFO1lBQ25CLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQzNDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLGlCQUFpQixHQUFHLGtDQUFrQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzVFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFFOUUsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xDLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUNwRCxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO29CQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztpQkFDcEc7YUFDRjtZQUVELFlBQVksR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRU8sbUJBQW1CLENBQUMsY0FBOEIsRUFBRSxjQUF3QztRQUNsRyxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLFNBQVMsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDO1FBRW5GLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvSSxDQUFDO0lBRU8sU0FBUyxDQUFDLHNCQUE4QztRQUM5RCxNQUFNLGlCQUFpQixHQUFHLGtDQUFrQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDckYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDNUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUU1RSw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2pDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RixNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFckYsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDbkM7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OzZHQS9iVSxnQkFBZ0Isd0ZBZ0VkLE1BQU0sOEJBQ04scUJBQXFCLDhCQUNyQixlQUFlLGlMQUtsQixZQUFZO2lHQXZFWCxnQkFBZ0I7O0lBZ08xQixPQUFPOztxQ0FDcUIsY0FBYzs7b0RBaUMxQzs7SUErQ0EsT0FBTzs7cUNBQzBCLElBQUksRUFBZ0IsWUFBWTs7MkRBeUZqRTsyRkEzWVUsZ0JBQWdCO2tCQUY1QixTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFOzswQkFrRXhDLFNBQVM7MkJBQUMsTUFBTTs7MEJBQ2hCLFNBQVM7MkJBQUMscUJBQXFCOzswQkFDL0IsU0FBUzsyQkFBQyxlQUFlOzswQkFLekIsTUFBTTsyQkFBQyxZQUFZO29KQXZERixjQUFjO3NCQUFqQyxNQUFNO3VCQUFDLFVBQVU7Z0JBRUksZ0JBQWdCO3NCQUFyQyxNQUFNO3VCQUFDLFlBQVk7Z0JBK01wQixZQUFZLE1BaUZKLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0dHJpYnV0ZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBEaXJlY3RpdmUsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBUeXBlLCBWaWV3Q29udGFpbmVyUmVmLCBFbGVtZW50UmVmLCBJbmplY3RGbGFncywgTmdab25lLCBFbnZpcm9ubWVudEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2hpbGRyZW5PdXRsZXRDb250ZXh0cywgRGF0YSwgUFJJTUFSWV9PVVRMRVQsIFJvdXRlck91dGxldENvbnRyYWN0IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgRnJhbWUsIFBhZ2UsIE5hdmlnYXRlZERhdGEsIHByb2ZpbGUsIE5hdmlnYXRpb25FbnRyeSB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5cbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQQUdFX0ZBQ1RPUlksIFBhZ2VGYWN0b3J5IH0gZnJvbSAnLi4vLi4vdG9rZW5zJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdERlYnVnIH0gZnJvbSAnLi4vLi4vdHJhY2UnO1xuaW1wb3J0IHsgRGV0YWNoZWRMb2FkZXIgfSBmcm9tICcuLi8uLi9jZGsvZGV0YWNoZWQtbG9hZGVyJztcbmltcG9ydCB7IFZpZXdVdGlsIH0gZnJvbSAnLi4vLi4vdmlldy11dGlsJztcbmltcG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHsgT3V0bGV0IH0gZnJvbSAnLi9ucy1sb2NhdGlvbi11dGlscyc7XG5pbXBvcnQgeyBOU1JvdXRlUmV1c2VTdHJhdGVneSB9IGZyb20gJy4vbnMtcm91dGUtcmV1c2Utc3RyYXRlZ3knO1xuaW1wb3J0IHsgZmluZFRvcEFjdGl2YXRlZFJvdXRlTm9kZUZvck91dGxldCwgcGFnZVJvdXRlckFjdGl2YXRlZFN5bWJvbCwgbG9hZGVyUmVmU3ltYm9sLCBkZXN0cm95Q29tcG9uZW50UmVmIH0gZnJvbSAnLi9wYWdlLXJvdXRlci1vdXRsZXQtdXRpbHMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSAnLi4vLi4vZWxlbWVudC1yZWdpc3RyeSc7XG5pbXBvcnQgeyBQYWdlU2VydmljZSB9IGZyb20gJy4uLy4uL2Nkay9mcmFtZS1wYWdlL3BhZ2Uuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBQYWdlUm91dGUge1xuICBhY3RpdmF0ZWRSb3V0ZTogQmVoYXZpb3JTdWJqZWN0PEFjdGl2YXRlZFJvdXRlPjtcblxuICBjb25zdHJ1Y3RvcihzdGFydFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIHRoaXMuYWN0aXZhdGVkUm91dGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHN0YXJ0Um91dGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZXN0cnVjdGlibGVJbmplY3RvciBpbXBsZW1lbnRzIEluamVjdG9yIHtcbiAgcHJpdmF0ZSByZWZzID0gbmV3IFNldDxhbnk+KCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGVzdHJ1Y3RhYmxlUHJvdmlkZXJzOiBQcm92aWRlclNldCwgcHJpdmF0ZSBwYXJlbnQ6IEluamVjdG9yKSB7fVxuICBnZXQ8VD4odG9rZW46IFR5cGU8VD4gfCBJbmplY3Rpb25Ub2tlbjxUPiwgbm90Rm91bmRWYWx1ZT86IFQsIGZsYWdzPzogSW5qZWN0RmxhZ3MpOiBUIHtcbiAgICBjb25zdCByZWYgPSB0aGlzLnBhcmVudC5nZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUsIGZsYWdzKTtcbiAgICBpZiAodGhpcy5kZXN0cnVjdGFibGVQcm92aWRlcnMuaGFzKHRva2VuKSkge1xuICAgICAgdGhpcy5yZWZzLmFkZChyZWYpO1xuICAgIH1cbiAgICByZXR1cm4gcmVmO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZWZzLmZvckVhY2goKHJlZikgPT4ge1xuICAgICAgaWYgKHJlZi5uZ09uRGVzdHJveSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgIHJlZi5uZ09uRGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucmVmcy5jbGVhcigpO1xuICB9XG59XG5cbnR5cGUgUHJvdmlkZXJTZXQgPSBTZXQ8VHlwZTxhbnk+IHwgSW5qZWN0aW9uVG9rZW48YW55Pj47XG5cbmNvbnN0IHJvdXRlVG9TdHJpbmcgPSBmdW5jdGlvbiAoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlIHwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IHN0cmluZyB7XG4gIHJldHVybiBhY3RpdmF0ZWRSb3V0ZS5wYXRoRnJvbVJvb3Quam9pbignLT4nKTtcbn07XG5cbnJlZ2lzdGVyRWxlbWVudCgncGFnZS1yb3V0ZXItb3V0bGV0JywgKCkgPT4gRnJhbWUpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9kaXJlY3RpdmUtc2VsZWN0b3JcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ3BhZ2Utcm91dGVyLW91dGxldCcgfSkgLy8gdHNsaW50OmRpc2FibGUtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3Jcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFBhZ2VSb3V0ZXJPdXRsZXQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIFJvdXRlck91dGxldENvbnRyYWN0IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbGluZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG4gIHByaXZhdGUgYWN0aXZhdGVkOiBDb21wb25lbnRSZWY8YW55PiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIF9hY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkZXRhY2hlZExvYWRlckZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8RGV0YWNoZWRMb2FkZXI+O1xuXG4gIHByaXZhdGUgb3V0bGV0OiBPdXRsZXQ7XG4gIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuICBwcml2YXRlIGlzRW1wdHlPdXRsZXQ6IGJvb2xlYW47XG4gIHByaXZhdGUgdmlld1V0aWw6IFZpZXdVdGlsO1xuICBwcml2YXRlIGZyYW1lOiBGcmFtZTtcblxuICBhdHRhY2hFdmVudHM6IEV2ZW50RW1pdHRlcjx1bmtub3duPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgZGV0YWNoRXZlbnRzOiBFdmVudEVtaXR0ZXI8dW5rbm93bj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtcmVuYW1lXG4gIEBPdXRwdXQoJ2FjdGl2YXRlJykgYWN0aXZhdGVFdmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1vdXRwdXQtcmVuYW1lXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8tb3V0cHV0LXJlbmFtZVxuICBAT3V0cHV0KCdkZWFjdGl2YXRlJykgZGVhY3RpdmF0ZUV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW91dHB1dC1yZW5hbWVcblxuICAvKiogQGRlcHJlY2F0ZWQgZnJvbSBBbmd1bGFyIHNpbmNlIHY0ICovXG4gIGdldCBsb2NhdGlvbkluamVjdG9yKCk6IEluamVjdG9yIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5pbmplY3RvcjtcbiAgfVxuICAvKiogQGRlcHJlY2F0ZWQgZnJvbSBBbmd1bGFyIHNpbmNlIHY0ICovXG4gIGdldCBsb2NhdGlvbkZhY3RvcnlSZXNvbHZlcigpOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVyO1xuICB9XG5cbiAgZ2V0IGlzQWN0aXZhdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuYWN0aXZhdGVkO1xuICB9XG5cbiAgZ2V0IGNvbXBvbmVudCgpOiB1bmtub3duIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZhdGVkKSB7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdPdXRsZXQgaXMgbm90IGFjdGl2YXRlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmFjdGl2YXRlZC5pbnN0YW5jZTtcbiAgfVxuICBnZXQgYWN0aXZhdGVkUm91dGUoKTogQWN0aXZhdGVkUm91dGUge1xuICAgIGlmICghdGhpcy5hY3RpdmF0ZWQpIHtcbiAgICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJMb2coJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2YXRlZFJvdXRlO1xuICB9XG5cbiAgZ2V0IGFjdGl2YXRlZFJvdXRlRGF0YSgpOiBEYXRhIHtcbiAgICBpZiAodGhpcy5fYWN0aXZhdGVkUm91dGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5kYXRhO1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHBhcmVudENvbnRleHRzOiBDaGlsZHJlbk91dGxldENvbnRleHRzLFxuICAgIHByaXZhdGUgbG9jYXRpb246IFZpZXdDb250YWluZXJSZWYsXG4gICAgQEF0dHJpYnV0ZSgnbmFtZScpIG5hbWU6IHN0cmluZyxcbiAgICBAQXR0cmlidXRlKCdhY3Rpb25CYXJWaXNpYmlsaXR5JykgYWN0aW9uQmFyVmlzaWJpbGl0eTogc3RyaW5nLFxuICAgIEBBdHRyaWJ1dGUoJ2lzRW1wdHlPdXRsZXQnKSBpc0VtcHR5T3V0bGV0OiBib29sZWFuLFxuICAgIHByaXZhdGUgbG9jYXRpb25TdHJhdGVneTogTlNMb2NhdGlvblN0cmF0ZWd5LFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBJbmplY3QoUEFHRV9GQUNUT1JZKSBwcml2YXRlIHBhZ2VGYWN0b3J5OiBQYWdlRmFjdG9yeSxcbiAgICBwcml2YXRlIHJvdXRlUmV1c2VTdHJhdGVneTogTlNSb3V0ZVJldXNlU3RyYXRlZ3ksXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBlbFJlZjogRWxlbWVudFJlZixcbiAgICB2aWV3VXRpbDogVmlld1V0aWxcbiAgKSB7XG4gICAgdGhpcy5pc0VtcHR5T3V0bGV0ID0gaXNFbXB0eU91dGxldDtcbiAgICB0aGlzLmZyYW1lID0gZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLnNldEFjdGlvbkJhclZpc2liaWxpdHkoYWN0aW9uQmFyVmlzaWJpbGl0eSk7XG4gICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJMb2coYFBhZ2VSb3V0ZXJPdXRsZXQuY29uc3RydWN0b3IgZnJhbWU6ICR7dGhpcy5mcmFtZX1gKTtcbiAgICB9XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lIHx8IFBSSU1BUllfT1VUTEVUO1xuICAgIHBhcmVudENvbnRleHRzLm9uQ2hpbGRPdXRsZXRDcmVhdGVkKHRoaXMubmFtZSwgPGFueT50aGlzKTtcblxuICAgIHRoaXMudmlld1V0aWwgPSB2aWV3VXRpbDtcbiAgICB0aGlzLmRldGFjaGVkTG9hZGVyRmFjdG9yeSA9IHJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KERldGFjaGVkTG9hZGVyKTtcbiAgfVxuXG4gIHNldEFjdGlvbkJhclZpc2liaWxpdHkoYWN0aW9uQmFyVmlzaWJpbGl0eTogc3RyaW5nKTogdm9pZCB7XG4gICAgc3dpdGNoIChhY3Rpb25CYXJWaXNpYmlsaXR5KSB7XG4gICAgICBjYXNlICdhbHdheXMnOlxuICAgICAgY2FzZSAnbmV2ZXInOlxuICAgICAgICB0aGlzLmZyYW1lLmFjdGlvbkJhclZpc2liaWxpdHkgPSBhY3Rpb25CYXJWaXNpYmlsaXR5O1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuZnJhbWUuYWN0aW9uQmFyVmlzaWJpbGl0eSA9ICdhdXRvJztcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAvLyBJbiB0aGUgZXZlbnQgdGhhdCB0aGUgYHBhcmVudENvbnRleHRzYCBoYXMgY2hhbmdlZCB0aGUgb3V0bGV0XG4gICAgLy8gdmlhIHRoZSBjcmVhdGlvbiBvZiBhbm90aGVyIG91dGxldCwgdGhlIGBvbkNoaWxkT3V0bGV0RGVzdHJveWVkYFxuICAgIC8vIHdpbGwgYmUgc2tpcHBlZFxuICAgIGlmICh0aGlzLnBhcmVudENvbnRleHRzLmdldENvbnRleHQodGhpcy5uYW1lKT8ub3V0bGV0ID09PSA8YW55PnRoaXMpIHtcbiAgICAgIC8vIENsZWFyIGFjY3VtdWxhdGVkIG1vZGFsIHZpZXcgcGFnZSBjYWNoZSB3aGVuIHBhZ2Utcm91dGVyLW91dGxldFxuICAgICAgLy8gZGVzdHJveWVkIG9uIG1vZGFsIHZpZXcgY2xvc2luZ1xuICAgICAgdGhpcy5wYXJlbnRDb250ZXh0cy5vbkNoaWxkT3V0bGV0RGVzdHJveWVkKHRoaXMubmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3V0bGV0KSB7XG4gICAgICB0aGlzLm91dGxldC5vdXRsZXRLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICB0aGlzLnJvdXRlUmV1c2VTdHJhdGVneS5jbGVhck1vZGFsQ2FjaGUoa2V5KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LmNsZWFyT3V0bGV0KHRoaXMuZnJhbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJMb2coJ1BhZ2VSb3V0ZXJPdXRsZXQubmdPbkRlc3Ryb3k6IG5vIG91dGxldCBhdmFpbGFibGUgZm9yIHBhZ2Utcm91dGVyLW91dGxldCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzQWN0aXZhdGVkKSB7XG4gICAgICBjb25zdCBjID0gdGhpcy5hY3RpdmF0ZWQuaW5zdGFuY2U7XG4gICAgICB0aGlzLmFjdGl2YXRlZC5ob3N0Vmlldy5kZXRhY2goKTtcbiAgICAgIGRlc3Ryb3lDb21wb25lbnRSZWYodGhpcy5hY3RpdmF0ZWQpO1xuXG4gICAgICB0aGlzLmRlYWN0aXZhdGVFdmVudHMuZW1pdChjKTtcbiAgICAgIHRoaXMuYWN0aXZhdGVkID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBkZWFjdGl2YXRlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5vdXRsZXQgfHwgIXRoaXMub3V0bGV0LmlzUGFnZU5hdmlnYXRpb25CYWNrKSB7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdDdXJyZW50bHkgbm90IGluIHBhZ2UgYmFjayBuYXZpZ2F0aW9uIC0gY29tcG9uZW50IHNob3VsZCBiZSBkZXRhY2hlZCBpbnN0ZWFkIG9mIGRlYWN0aXZhdGVkLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdQYWdlUm91dGVyT3V0bGV0LmRlYWN0aXZhdGUoKSB3aGlsZSBnb2luZyBiYWNrIC0gc2hvdWxkIGRlc3Ryb3knKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNBY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjID0gdGhpcy5hY3RpdmF0ZWQuaW5zdGFuY2U7XG4gICAgZGVzdHJveUNvbXBvbmVudFJlZih0aGlzLmFjdGl2YXRlZCk7XG5cbiAgICB0aGlzLmFjdGl2YXRlZCA9IG51bGw7XG4gICAgdGhpcy5fYWN0aXZhdGVkUm91dGUgPSBudWxsO1xuXG4gICAgdGhpcy5kZWFjdGl2YXRlRXZlbnRzLmVtaXQoYyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGBSb3V0ZVJldXNlU3RyYXRlZ3lgIGluc3RydWN0cyB0byBkZXRhY2ggdGhlIHN1YnRyZWVcbiAgICovXG4gIGRldGFjaCgpOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgaWYgKCF0aGlzLmlzQWN0aXZhdGVkKSB7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdPdXRsZXQgaXMgbm90IGFjdGl2YXRlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKGBQYWdlUm91dGVyT3V0bGV0LmRldGFjaCgpIC0gJHtyb3V0ZVRvU3RyaW5nKHRoaXMuX2FjdGl2YXRlZFJvdXRlKX1gKTtcbiAgICB9XG5cbiAgICAvLyBEZXRhY2ggZnJvbSBDaGFuZ2VEZXRlY3Rpb25cbiAgICB0aGlzLmFjdGl2YXRlZC5ob3N0Vmlldy5kZXRhY2goKTtcblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuYWN0aXZhdGVkO1xuICAgIHRoaXMuYWN0aXZhdGVkID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmF0ZWRSb3V0ZSA9IG51bGw7XG4gICAgdGhpcy5kZXRhY2hFdmVudHMuZW1pdChjb21wb25lbnQuaW5zdGFuY2UpO1xuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGBSb3V0ZVJldXNlU3RyYXRlZ3lgIGluc3RydWN0cyB0byByZS1hdHRhY2ggYSBwcmV2aW91c2x5IGRldGFjaGVkIHN1YnRyZWVcbiAgICovXG4gIGF0dGFjaChyZWY6IENvbXBvbmVudFJlZjxhbnk+LCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLnJvdXRlckxvZyhgUGFnZVJvdXRlck91dGxldC5hdHRhY2goKSAtICR7cm91dGVUb1N0cmluZyhhY3RpdmF0ZWRSb3V0ZSl9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5hY3RpdmF0ZWQgPSByZWY7XG5cbiAgICAvLyByZWF0dGFjaCB0byBDaGFuZ2VEZXRlY3Rpb25cbiAgICB0aGlzLmFjdGl2YXRlZC5ob3N0Vmlldy5tYXJrRm9yQ2hlY2soKTtcbiAgICB0aGlzLmFjdGl2YXRlZC5ob3N0Vmlldy5yZWF0dGFjaCgpO1xuICAgIHRoaXMuX2FjdGl2YXRlZFJvdXRlID0gYWN0aXZhdGVkUm91dGU7XG4gICAgdGhpcy5tYXJrQWN0aXZhdGVkUm91dGUoYWN0aXZhdGVkUm91dGUpO1xuXG4gICAgLy8gd2UgaGF2ZSBhIGNoaWxkIHdpdGggdGhlIHNhbWUgbmFtZSwgc28gd2UgZG9uJ3QgZmluaXNoIHRoZSBiYWNrIG5hdlxuICAgIGlmICh0aGlzLmlzRmluYWxQYWdlUm91dGVyT3V0bGV0KCkpIHtcbiAgICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5fZmluaXNoQmFja1BhZ2VOYXZpZ2F0aW9uKHRoaXMuZnJhbWUpO1xuICAgIH1cbiAgICB0aGlzLmF0dGFjaEV2ZW50cy5lbWl0KHJlZi5pbnN0YW5jZSk7XG4gIH1cblxuICBwcml2YXRlIGlzRmluYWxQYWdlUm91dGVyT3V0bGV0KCkge1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMucGFyZW50Q29udGV4dHMuZ2V0Q29udGV4dCh0aGlzLm5hbWUpPy5jaGlsZHJlbjtcbiAgICB3aGlsZSAoY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGNoaWxkQ29udGV4dCA9IGNoaWxkcmVuLmdldENvbnRleHQodGhpcy5uYW1lKTtcbiAgICAgIGlmICghY2hpbGRDb250ZXh0IHx8ICFjaGlsZENvbnRleHQub3V0bGV0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkQ29udGV4dC5vdXRsZXQgaW5zdGFuY2VvZiBQYWdlUm91dGVyT3V0bGV0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuID0gY2hpbGRDb250ZXh0LmNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYnkgdGhlIFJvdXRlciB0byBpbnN0YW50aWF0ZSBhIG5ldyBjb21wb25lbnQgZHVyaW5nIHRoZSBjb21taXQgcGhhc2Ugb2YgYSBuYXZpZ2F0aW9uLlxuICAgKiBUaGlzIG1ldGhvZCBpbiB0dXJuIGlzIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIHRoZSBgcm91dGVyT25BY3RpdmF0ZWAgaG9vayBvZiBpdHMgY2hpbGQuXG4gICAqL1xuICBAcHJvZmlsZVxuICBhY3RpdmF0ZVdpdGgoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHwgRW52aXJvbm1lbnRJbmplY3RvciB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLm91dGxldCA9IHRoaXMub3V0bGV0IHx8IHRoaXMuZ2V0T3V0bGV0KGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90KTtcbiAgICBpZiAoIXRoaXMub3V0bGV0KSB7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyRXJyb3IoJ05vIG91dGxldCBmb3VuZCByZWxhdGl2ZSB0byBhY3RpdmF0ZWQgcm91dGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm91dGxldC5pc05TRW1wdHlPdXRsZXQgPSB0aGlzLmlzRW1wdHlPdXRsZXQ7XG4gICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LnVwZGF0ZU91dGxldEZyYW1lKHRoaXMub3V0bGV0LCB0aGlzLmZyYW1lLCB0aGlzLmlzRW1wdHlPdXRsZXQpO1xuXG4gICAgaWYgKHRoaXMub3V0bGV0ICYmIHRoaXMub3V0bGV0LmlzUGFnZU5hdmlnYXRpb25CYWNrKSB7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdDdXJyZW50bHkgaW4gcGFnZSBiYWNrIG5hdmlnYXRpb24gLSBjb21wb25lbnQgc2hvdWxkIGJlIHJlYXR0YWNoZWQgaW5zdGVhZCBvZiBhY3RpdmF0ZWQuJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0ZpbmFsUGFnZVJvdXRlck91dGxldCgpKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5fZmluaXNoQmFja1BhZ2VOYXZpZ2F0aW9uKHRoaXMuZnJhbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKGBQYWdlUm91dGVyT3V0bGV0LmFjdGl2YXRlV2l0aCgpIC0gJHtyb3V0ZVRvU3RyaW5nKGFjdGl2YXRlZFJvdXRlKX1gKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hY3RpdmF0ZWRSb3V0ZSA9IGFjdGl2YXRlZFJvdXRlO1xuXG4gICAgdGhpcy5tYXJrQWN0aXZhdGVkUm91dGUoYWN0aXZhdGVkUm91dGUpO1xuXG4gICAgcmVzb2x2ZXIgPSByZXNvbHZlciB8fCB0aGlzLnJlc29sdmVyO1xuXG4gICAgdGhpcy5hY3RpdmF0ZU9uR29Gb3J3YXJkKGFjdGl2YXRlZFJvdXRlLCByZXNvbHZlcik7XG4gICAgdGhpcy5hY3RpdmF0ZUV2ZW50cy5lbWl0KHRoaXMuYWN0aXZhdGVkLmluc3RhbmNlKTtcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGVPbkdvRm9yd2FyZChhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsIGxvYWRlZFJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfCBFbnZpcm9ubWVudEluamVjdG9yKTogdm9pZCB7XG4gICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJMb2coJ1BhZ2VSb3V0ZXJPdXRsZXQuYWN0aXZhdGUoKSBmb3J3YXJkIG5hdmlnYXRpb24gLSAnICsgJ2NyZWF0ZSBkZXRhY2hlZCBsb2FkZXIgaW4gdGhlIGxvYWRlciBjb250YWluZXInKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBsZXQgb3VySW5qZWN0b3IgPSB0aGlzLmxvY2F0aW9uLmluamVjdG9yO1xuICAgIGlmICghKGxvYWRlZFJlc29sdmVyIGluc3RhbmNlb2YgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSkge1xuICAgICAgb3VySW5qZWN0b3IgPSBsb2FkZWRSZXNvbHZlcjtcbiAgICAgIHJlc29sdmVyID0gbG9hZGVkUmVzb2x2ZXI/LmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlciA9IGxvYWRlZFJlc29sdmVyO1xuICAgIH1cblxuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmdldENvbXBvbmVudEZhY3RvcnkoYWN0aXZhdGVkUm91dGUsIHJlc29sdmVyKTtcbiAgICBjb25zdCBwYWdlID0gdGhpcy5wYWdlRmFjdG9yeSh7XG4gICAgICBpc05hdmlnYXRpb246IHRydWUsXG4gICAgICBjb21wb25lbnRUeXBlOiBmYWN0b3J5LmNvbXBvbmVudFR5cGUsXG4gICAgfSk7XG5cbiAgICBjb25zdCBkZXN0cnVjdGFibGVzID0gbmV3IFNldChbXSk7XG4gICAgY29uc3QgaW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogUGFnZSwgdXNlVmFsdWU6IHBhZ2UgfSxcbiAgICAgICAgeyBwcm92aWRlOiBGcmFtZSwgdXNlVmFsdWU6IHRoaXMuZnJhbWUgfSxcbiAgICAgICAgeyBwcm92aWRlOiBQYWdlUm91dGUsIHVzZVZhbHVlOiBuZXcgUGFnZVJvdXRlKGFjdGl2YXRlZFJvdXRlKSB9LFxuICAgICAgICB7IHByb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLCB1c2VWYWx1ZTogYWN0aXZhdGVkUm91dGUgfSxcbiAgICAgICAgeyBwcm92aWRlOiBDaGlsZHJlbk91dGxldENvbnRleHRzLCB1c2VWYWx1ZTogdGhpcy5wYXJlbnRDb250ZXh0cy5nZXRPckNyZWF0ZUNvbnRleHQodGhpcy5uYW1lKS5jaGlsZHJlbiB9LFxuICAgICAgICB7IHByb3ZpZGU6IFBhZ2VTZXJ2aWNlLCB1c2VDbGFzczogUGFnZVNlcnZpY2UgfSxcbiAgICAgIF0sXG4gICAgICBwYXJlbnQ6IG91ckluamVjdG9yLFxuICAgIH0pO1xuXG4gICAgY29uc3QgY2hpbGRJbmplY3RvciA9IG5ldyBEZXN0cnVjdGlibGVJbmplY3RvcihkZXN0cnVjdGFibGVzLCBpbmplY3Rvcik7XG4gICAgY29uc3QgbG9hZGVyUmVmID0gdGhpcy5sb2NhdGlvbi5jcmVhdGVDb21wb25lbnQodGhpcy5kZXRhY2hlZExvYWRlckZhY3RvcnksIHRoaXMubG9jYXRpb24ubGVuZ3RoLCBjaGlsZEluamVjdG9yLCBbXSk7XG4gICAgbG9hZGVyUmVmLm9uRGVzdHJveSgoKSA9PiBjaGlsZEluamVjdG9yLmRlc3Ryb3koKSk7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcblxuICAgIHRoaXMuYWN0aXZhdGVkID0gbG9hZGVyUmVmLmluc3RhbmNlLmxvYWRXaXRoRmFjdG9yeUluTG9jYXRpb24oZmFjdG9yeSk7XG4gICAgdGhpcy5hY3RpdmF0ZWQuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHRoaXMubG9hZENvbXBvbmVudEluUGFnZShwYWdlLCB0aGlzLmFjdGl2YXRlZCwgeyBhY3RpdmF0ZWRSb3V0ZSB9KTtcblxuICAgIHRoaXMuYWN0aXZhdGVkW2xvYWRlclJlZlN5bWJvbF0gPSBsb2FkZXJSZWY7XG4gIH1cblxuICBAcHJvZmlsZVxuICBwcml2YXRlIGxvYWRDb21wb25lbnRJblBhZ2UocGFnZTogUGFnZSwgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PiwgbmF2aWdhdGlvbkNvbnRleHQpOiB2b2lkIHtcbiAgICAvLyBDb21wb25lbnQgbG9hZGVkLiBGaW5kIGl0cyByb290IG5hdGl2ZSB2aWV3LlxuICAgIGNvbnN0IGNvbXBvbmVudFZpZXcgPSBjb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcbiAgICAvLyBSZW1vdmUgaXQgZnJvbSBvcmlnaW5hbCBuYXRpdmUgcGFyZW50LlxuICAgIHRoaXMudmlld1V0aWwucmVtb3ZlQ2hpbGQoY29tcG9uZW50Vmlldy5wYXJlbnQsIGNvbXBvbmVudFZpZXcpO1xuICAgIC8vIEFkZCBpdCB0byB0aGUgbmV3IHBhZ2VcbiAgICB0aGlzLnZpZXdVdGlsLmFwcGVuZENoaWxkKHBhZ2UsIGNvbXBvbmVudFZpZXcpO1xuXG4gICAgbGV0IHRvcEFjdGl2YXRlZFJvdXRlID0gZmluZFRvcEFjdGl2YXRlZFJvdXRlTm9kZUZvck91dGxldCh0aGlzLl9hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdCk7XG4gICAgbGV0IG91dGxldEtleSA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5nZXRSb3V0ZUZ1bGxQYXRoKHRvcEFjdGl2YXRlZFJvdXRlKTtcbiAgICBjb25zdCB0aGlzUm91dGVLZXkgPSBvdXRsZXRLZXk7XG4gICAgd2hpbGUgKCF0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuZmluZE91dGxldChvdXRsZXRLZXkpKSB7XG4gICAgICB0b3BBY3RpdmF0ZWRSb3V0ZSA9IHRvcEFjdGl2YXRlZFJvdXRlLnBhcmVudDtcbiAgICAgIGlmICghdG9wQWN0aXZhdGVkUm91dGUpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIG91dGxldCBmb3Igcm91dGU6ICcgKyB0aGlzUm91dGVLZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG91dGxldEtleSA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5nZXRSb3V0ZUZ1bGxQYXRoKHRvcEFjdGl2YXRlZFJvdXRlKTtcbiAgICB9XG5cbiAgICBjb25zdCBuYXZpZ2F0ZWRGcm9tQ2FsbGJhY2sgPSAoPGFueT5nbG9iYWwpLlpvbmUuY3VycmVudC53cmFwKChhcmdzOiBOYXZpZ2F0ZWREYXRhKSA9PiB7XG4gICAgICBpZiAoYXJncy5pc0JhY2tOYXZpZ2F0aW9uKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5fYmVnaW5CYWNrUGFnZU5hdmlnYXRpb24odGhpcy5mcmFtZSwgb3V0bGV0S2V5KTtcbiAgICAgICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LmJhY2sobnVsbCwgdGhpcy5mcmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gVE9ETzogZXhwZXJpbWVudCB3aXRoIHVzaW5nIE5nWm9uZSBpbnN0ZWFkIG9mIGdsb2JhbCBhYm92ZVxuICAgIC8vIGNvbnN0IG5hdmlnYXRlZEZyb21DYWxsYmFjayA9IChhcmdzOiBOYXZpZ2F0ZWREYXRhKSA9PiB7XG4gICAgLy8gXHRpZiAoYXJncy5pc0JhY2tOYXZpZ2F0aW9uKSB7XG4gICAgLy8gICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgLy8gICAgICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5Ll9iZWdpbkJhY2tQYWdlTmF2aWdhdGlvbih0aGlzLmZyYW1lKTtcbiAgICAvLyAgICAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuYmFjayhudWxsLCB0aGlzLmZyYW1lKTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gXHR9XG4gICAgLy8gfTtcblxuICAgIHBhZ2Uub24oUGFnZS5uYXZpZ2F0ZWRGcm9tRXZlbnQsIG5hdmlnYXRlZEZyb21DYWxsYmFjayk7XG4gICAgY29tcG9uZW50UmVmLm9uRGVzdHJveSgoKSA9PiB7XG4gICAgICBpZiAocGFnZSkge1xuICAgICAgICBwYWdlLm9mZihQYWdlLm5hdmlnYXRlZEZyb21FdmVudCwgbmF2aWdhdGVkRnJvbUNhbGxiYWNrKTtcbiAgICAgICAgcGFnZSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBuYXZPcHRpb25zID0gdGhpcy5sb2NhdGlvblN0cmF0ZWd5Ll9iZWdpblBhZ2VOYXZpZ2F0aW9uKHRoaXMuZnJhbWUpO1xuICAgIGNvbnN0IGlzUmVwbGFjZSA9IG5hdk9wdGlvbnMucmVwbGFjZVVybCAmJiAhbmF2T3B0aW9ucy5jbGVhckhpc3Rvcnk7XG5cbiAgICAvLyBDbGVhciByZWZDYWNoZSBpZiBuYXZpZ2F0aW9uIHdpdGggY2xlYXJIaXN0b3J5XG4gICAgaWYgKG5hdk9wdGlvbnMuY2xlYXJIaXN0b3J5KSB7XG4gICAgICBjb25zdCBjbGVhckNhbGxiYWNrID0gKCkgPT5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMub3V0bGV0KSB7XG4gICAgICAgICAgICAvLyBwb3RlbnRpYWwgYWx0ZXJuYXRpdmUgZml4IChvbmx5IGZpeCBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBvdXRsZXQpXG4gICAgICAgICAgICAvLyBjb25zdCBuZXN0cyA9IG91dGxldEtleS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgLy8gdGhpcy5vdXRsZXQub3V0bGV0S2V5cy5maWx0ZXIoKGspID0+IGsuc3BsaXQoJy8nKS5sZW5ndGggPj0gbmVzdHMubGVuZ3RoKS5mb3JFYWNoKChrZXkpID0+IHRoaXMucm91dGVSZXVzZVN0cmF0ZWd5LmNsZWFyQ2FjaGUoa2V5KSk7XG4gICAgICAgICAgICB0aGlzLm91dGxldC5vdXRsZXRLZXlzLmZvckVhY2goKGtleSkgPT4gdGhpcy5yb3V0ZVJldXNlU3RyYXRlZ3kuY2xlYXJDYWNoZShrZXkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICBwYWdlLm9uY2UoUGFnZS5uYXZpZ2F0ZWRUb0V2ZW50LCBjbGVhckNhbGxiYWNrKTtcbiAgICB9IGVsc2UgaWYgKG5hdk9wdGlvbnMucmVwbGFjZVVybCkge1xuICAgICAgY29uc3QgY2xlYXJDYWxsYmFjayA9ICgpID0+XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLm91dGxldCkge1xuICAgICAgICAgICAgLy8gcG90ZW50aWFsIGFsdGVybmF0aXZlIGZpeCAob25seSBmaXggY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgb3V0bGV0KVxuICAgICAgICAgICAgLy8gY29uc3QgbmVzdHMgPSBvdXRsZXRLZXkuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIC8vIHRoaXMub3V0bGV0Lm91dGxldEtleXMuZmlsdGVyKChrKSA9PiBrLnNwbGl0KCcvJykubGVuZ3RoID49IG5lc3RzLmxlbmd0aCkuZm9yRWFjaCgoa2V5KSA9PiB0aGlzLnJvdXRlUmV1c2VTdHJhdGVneS5wb3BDYWNoZShrZXkpKTtcbiAgICAgICAgICAgIHRoaXMub3V0bGV0Lm91dGxldEtleXMuZm9yRWFjaCgoa2V5KSA9PiB0aGlzLnJvdXRlUmV1c2VTdHJhdGVneS5wb3BDYWNoZShrZXkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICBwYWdlLm9uY2UoUGFnZS5uYXZpZ2F0ZWRUb0V2ZW50LCBjbGVhckNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBjb25zdCBuYXZpZ2F0aW9uRW50cnk6IE5hdmlnYXRpb25FbnRyeSA9IHtcbiAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICB9LFxuICAgICAgY29udGV4dDogbmF2aWdhdGlvbkNvbnRleHQsXG4gICAgICBjbGVhckhpc3Rvcnk6IG5hdk9wdGlvbnMuY2xlYXJIaXN0b3J5LFxuICAgICAgYW5pbWF0ZWQ6IG5hdk9wdGlvbnMuYW5pbWF0ZWQsXG4gICAgICB0cmFuc2l0aW9uOiBuYXZPcHRpb25zLnRyYW5zaXRpb24sXG4gICAgfTtcblxuICAgIGlmIChpc1JlcGxhY2UgJiYgdGhpcy5mcmFtZS5jdXJyZW50UGFnZSkge1xuICAgICAgdGhpcy5mcmFtZS5yZXBsYWNlUGFnZShuYXZpZ2F0aW9uRW50cnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZyYW1lLm5hdmlnYXRlKG5hdmlnYXRpb25FbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCBhbmQgbWFyayB0aGUgdG9wIGFjdGl2YXRlZCByb3V0ZSBhcyBhbiBhY3RpdmF0ZWQgb25lLlxuICAvLyBJbiBucy1sb2NhdGlvbi1zdHJhdGVneSB3ZSBhcmUgcmV1c2luZyBjb21wb25lbnRzIG9ubHkgaWYgdGhlaXIgY29ycmVzcG9uaW5nIHJvdXRlc1xuICAvLyBhcmUgbWFya2VkIGFzIGFjdGl2YXRlZCBmcm9tIHRoaXMgbWV0aG9kLlxuICBwcml2YXRlIG1hcmtBY3RpdmF0ZWRSb3V0ZShhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCBxdWV1ZSA9IFtdO1xuICAgIHF1ZXVlLnB1c2goYWN0aXZhdGVkUm91dGUuc25hcHNob3QpO1xuICAgIGxldCBjdXJyZW50Um91dGUgPSBxdWV1ZS5zaGlmdCgpO1xuXG4gICAgd2hpbGUgKGN1cnJlbnRSb3V0ZSkge1xuICAgICAgY3VycmVudFJvdXRlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkUm91dGUpID0+IHtcbiAgICAgICAgcXVldWUucHVzaChjaGlsZFJvdXRlKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0b3BBY3RpdmF0ZWRSb3V0ZSA9IGZpbmRUb3BBY3RpdmF0ZWRSb3V0ZU5vZGVGb3JPdXRsZXQoY3VycmVudFJvdXRlKTtcbiAgICAgIGNvbnN0IG91dGxldEtleSA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5nZXRSb3V0ZUZ1bGxQYXRoKHRvcEFjdGl2YXRlZFJvdXRlKTtcbiAgICAgIGNvbnN0IG91dGxldCA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5maW5kT3V0bGV0KG91dGxldEtleSwgdG9wQWN0aXZhdGVkUm91dGUpO1xuXG4gICAgICBpZiAob3V0bGV0ICYmIG91dGxldC5mcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHRvcEFjdGl2YXRlZFJvdXRlW3BhZ2VSb3V0ZXJBY3RpdmF0ZWRTeW1ib2xdID0gdHJ1ZTtcbiAgICAgICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdBY3RpdmF0ZWQgcm91dGUgbWFya2VkIGFzIHBhZ2U6ICcgKyByb3V0ZVRvU3RyaW5nKHRvcEFjdGl2YXRlZFJvdXRlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3VycmVudFJvdXRlID0gcXVldWUuc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldENvbXBvbmVudEZhY3RvcnkoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCBsb2FkZWRSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTogQ29tcG9uZW50RmFjdG9yeTxhbnk+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBhY3RpdmF0ZWRSb3V0ZS5yb3V0ZUNvbmZpZy5jb21wb25lbnQgfHwgYWN0aXZhdGVkUm91dGUuY29tcG9uZW50O1xuXG4gICAgcmV0dXJuIGxvYWRlZFJlc29sdmVyID8gbG9hZGVkUmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KSA6IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCk7XG4gIH1cblxuICBwcml2YXRlIGdldE91dGxldChhY3RpdmF0ZWRSb3V0ZVNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogT3V0bGV0IHtcbiAgICBjb25zdCB0b3BBY3RpdmF0ZWRSb3V0ZSA9IGZpbmRUb3BBY3RpdmF0ZWRSb3V0ZU5vZGVGb3JPdXRsZXQoYWN0aXZhdGVkUm91dGVTbmFwc2hvdCk7XG4gICAgY29uc3Qgb3V0bGV0S2V5ID0gdGhpcy5sb2NhdGlvblN0cmF0ZWd5LmdldFJvdXRlRnVsbFBhdGgodG9wQWN0aXZhdGVkUm91dGUpO1xuICAgIGxldCBvdXRsZXQgPSB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuZmluZE91dGxldChvdXRsZXRLZXksIHRvcEFjdGl2YXRlZFJvdXRlKTtcblxuICAgIC8vIE5hbWVkIGxhenkgbG9hZGVkIG91dGxldC5cbiAgICBpZiAoIW91dGxldCAmJiB0aGlzLmlzRW1wdHlPdXRsZXQpIHtcbiAgICAgIGNvbnN0IHBhcmVudE91dGxldEtleSA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5nZXRSb3V0ZUZ1bGxQYXRoKHRvcEFjdGl2YXRlZFJvdXRlLnBhcmVudCk7XG4gICAgICBvdXRsZXQgPSB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuZmluZE91dGxldChwYXJlbnRPdXRsZXRLZXksIHRvcEFjdGl2YXRlZFJvdXRlLnBhcmVudCk7XG5cbiAgICAgIGlmIChvdXRsZXQpIHtcbiAgICAgICAgb3V0bGV0Lm91dGxldEtleXMucHVzaChvdXRsZXRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRsZXQ7XG4gIH1cbn1cbiJdfQ==