export class Outlet {
    constructor(outletKey, path, pathByOutlets, modalNavigationDepth) {
        this._navigatingBackOutlets = new Set();
        // More than one frame available when using NSEmptyOutletComponent component
        // in module that lazy loads children (loadChildren) and has outlet name.
        this.frames = [];
        this.states = [];
        // Used in reuse-strategy by its children to determine if they should be detached too.
        this.shouldDetach = true;
        this.outletKeys = [outletKey];
        this.isPageNavigationBack = false;
        this.showingModal = false;
        this.modalNavigationDepth = modalNavigationDepth || 0;
        this.pathByOutlets = pathByOutlets;
        this.path = path;
    }
    get isPageNavigationBack() {
        return this._navigatingBackOutlets.size > 0;
    }
    set isPageNavigationBack(isBack) {
        if (!isBack) {
            if (this._navigatingBackOutlets.size > 0) {
                this._navigatingBackOutlets.delete(this._navigatingBackOutlets.values().next().value);
            }
        }
        else {
            for (const key of this.outletKeys) {
                this._navigatingBackOutlets.add(key);
            }
        }
    }
    setOutletKeyNavigatingBack(key) {
        const nests = key.split('/');
        this.outletKeys
            .filter((k) => k.split('/').length >= nests.length)
            .forEach((k) => {
            this._navigatingBackOutlets.add(k);
        });
    }
    containsFrame(frame) {
        return this.frames.indexOf(frame) > -1;
    }
    peekState() {
        if (this.states.length > 0) {
            return this.states[this.states.length - 1];
        }
        return null;
    }
    containsTopState(stateUrl) {
        const lastState = this.peekState();
        return lastState && lastState.segmentGroup.toString() === stateUrl;
    }
    // Search for frame that can go back.
    // Nested 'primary' outlets could result in Outlet with multiple navigatable frames.
    getFrameToBack() {
        let frame = this.frames[this.frames.length - 1];
        if (!this.isNSEmptyOutlet) {
            for (let index = this.frames.length - 1; index >= 0; index--) {
                const currentFrame = this.frames[index];
                if (currentFrame.canGoBack()) {
                    frame = currentFrame;
                    break;
                }
            }
        }
        return frame;
    }
}
export const defaultNavOptions = {
    clearHistory: false,
    animated: true,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtbG9jYXRpb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvbGVnYWN5L3JvdXRlci9ucy1sb2NhdGlvbi11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsTUFBTSxPQUFPLE1BQU07SUFxQ2pCLFlBQVksU0FBaUIsRUFBRSxJQUFZLEVBQUUsYUFBcUIsRUFBRSxvQkFBNkI7UUFqQ2pHLDJCQUFzQixHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFvQjNDLDRFQUE0RTtRQUM1RSx5RUFBeUU7UUFDekUsV0FBTSxHQUFpQixFQUFFLENBQUM7UUFNMUIsV0FBTSxHQUF5QixFQUFFLENBQUM7UUFHbEMsc0ZBQXNGO1FBQ3RGLGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBRWxCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQXZDRCxJQUFJLG9CQUFvQjtRQUN0QixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDRCxJQUFJLG9CQUFvQixDQUFDLE1BQWU7UUFDdEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZGO1NBQ0Y7YUFBTTtZQUNMLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0QztTQUNGO0lBQ0gsQ0FBQztJQTRCRCwwQkFBMEIsQ0FBQyxHQUFXO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVU7YUFDWixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7YUFDbEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDYixJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQjtRQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkMsT0FBTyxTQUFTLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxRQUFRLENBQUM7SUFDckUsQ0FBQztJQUVELHFDQUFxQztJQUNyQyxvRkFBb0Y7SUFDcEYsY0FBYztRQUNaLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsS0FBSyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDNUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUU7b0JBQzVCLEtBQUssR0FBRyxZQUFZLENBQUM7b0JBQ3JCLE1BQU07aUJBQ1A7YUFDRjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBc0I7SUFDbEQsWUFBWSxFQUFFLEtBQUs7SUFDbkIsUUFBUSxFQUFFLElBQUk7Q0FDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhbWUsIE5hdmlnYXRpb25UcmFuc2l0aW9uIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IERlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZWdtZW50R3JvdXAsIFVybFRyZWUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25TdGF0ZSB7XG4gIHF1ZXJ5UGFyYW1zOiBQYXJhbXM7XG4gIHNlZ21lbnRHcm91cDogVXJsU2VnbWVudEdyb3VwO1xuICBpc1Jvb3RTZWdtZW50R3JvdXA6IGJvb2xlYW47XG4gIGlzUGFnZU5hdmlnYXRpb246IGJvb2xlYW47XG4gIGZyYW1lPzogRnJhbWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGlvbk9wdGlvbnMge1xuICBjbGVhckhpc3Rvcnk/OiBib29sZWFuO1xuICBhbmltYXRlZD86IGJvb2xlYW47XG4gIHRyYW5zaXRpb24/OiBOYXZpZ2F0aW9uVHJhbnNpdGlvbjtcbiAgcmVwbGFjZVVybD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBPdXRsZXQge1xuICBzaG93aW5nTW9kYWw6IGJvb2xlYW47XG4gIG1vZGFsTmF2aWdhdGlvbkRlcHRoOiBudW1iZXI7XG4gIHBhcmVudDogT3V0bGV0O1xuICBfbmF2aWdhdGluZ0JhY2tPdXRsZXRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGdldCBpc1BhZ2VOYXZpZ2F0aW9uQmFjaygpIHtcbiAgICByZXR1cm4gdGhpcy5fbmF2aWdhdGluZ0JhY2tPdXRsZXRzLnNpemUgPiAwO1xuICB9XG4gIHNldCBpc1BhZ2VOYXZpZ2F0aW9uQmFjayhpc0JhY2s6IGJvb2xlYW4pIHtcbiAgICBpZiAoIWlzQmFjaykge1xuICAgICAgaWYgKHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy5zaXplID4gMCkge1xuICAgICAgICB0aGlzLl9uYXZpZ2F0aW5nQmFja091dGxldHMuZGVsZXRlKHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm91dGxldEtleXMpIHtcbiAgICAgICAgdGhpcy5fbmF2aWdhdGluZ0JhY2tPdXRsZXRzLmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE1vcmUgdGhhbiBvbmUga2V5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIE5TRW1wdHlPdXRsZXRDb21wb25lbnQgY29tcG9uZW50XG4gIC8vIGluIG1vZHVsZSB0aGF0IGxhenkgbG9hZHMgY2hpbGRyZW4gKGxvYWRDaGlsZHJlbikgYW5kIGhhcyBvdXRsZXQgbmFtZS5cbiAgb3V0bGV0S2V5czogQXJyYXk8c3RyaW5nPjtcblxuICAvLyBNb3JlIHRoYW4gb25lIGZyYW1lIGF2YWlsYWJsZSB3aGVuIHVzaW5nIE5TRW1wdHlPdXRsZXRDb21wb25lbnQgY29tcG9uZW50XG4gIC8vIGluIG1vZHVsZSB0aGF0IGxhenkgbG9hZHMgY2hpbGRyZW4gKGxvYWRDaGlsZHJlbikgYW5kIGhhcyBvdXRsZXQgbmFtZS5cbiAgZnJhbWVzOiBBcnJheTxGcmFtZT4gPSBbXTtcbiAgLy8gVGhlIHVybCBwYXRoIHRvIHRoZSBPdXRsZXQuXG4gIC8vIEUuRzogdGhlIHBhdGggdG8gT3V0bGV0MyB0aGF0IGlzIG5lc3RlZCBPdXRsZXQxKGhvbWUpLT5PdXRsZXQyKG5lc3RlZDEpLT5PdXRsZXQzKG5lc3RlZDIpXG4gIC8vIHdpbGwgYmUgJ2hvbWUvbmVzdGVkMSdcbiAgcGF0aDogc3RyaW5nO1xuICBwYXRoQnlPdXRsZXRzOiBzdHJpbmc7XG4gIHN0YXRlczogQXJyYXk8TG9jYXRpb25TdGF0ZT4gPSBbXTtcbiAgaXNOU0VtcHR5T3V0bGV0OiBib29sZWFuO1xuXG4gIC8vIFVzZWQgaW4gcmV1c2Utc3RyYXRlZ3kgYnkgaXRzIGNoaWxkcmVuIHRvIGRldGVybWluZSBpZiB0aGV5IHNob3VsZCBiZSBkZXRhY2hlZCB0b28uXG4gIHNob3VsZERldGFjaCA9IHRydWU7XG4gIGNvbnN0cnVjdG9yKG91dGxldEtleTogc3RyaW5nLCBwYXRoOiBzdHJpbmcsIHBhdGhCeU91dGxldHM6IHN0cmluZywgbW9kYWxOYXZpZ2F0aW9uRGVwdGg/OiBudW1iZXIpIHtcbiAgICB0aGlzLm91dGxldEtleXMgPSBbb3V0bGV0S2V5XTtcbiAgICB0aGlzLmlzUGFnZU5hdmlnYXRpb25CYWNrID0gZmFsc2U7XG4gICAgdGhpcy5zaG93aW5nTW9kYWwgPSBmYWxzZTtcbiAgICB0aGlzLm1vZGFsTmF2aWdhdGlvbkRlcHRoID0gbW9kYWxOYXZpZ2F0aW9uRGVwdGggfHwgMDtcbiAgICB0aGlzLnBhdGhCeU91dGxldHMgPSBwYXRoQnlPdXRsZXRzO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gIH1cblxuICBzZXRPdXRsZXRLZXlOYXZpZ2F0aW5nQmFjayhrZXk6IHN0cmluZykge1xuICAgIGNvbnN0IG5lc3RzID0ga2V5LnNwbGl0KCcvJyk7XG4gICAgdGhpcy5vdXRsZXRLZXlzXG4gICAgICAuZmlsdGVyKChrKSA9PiBrLnNwbGl0KCcvJykubGVuZ3RoID49IG5lc3RzLmxlbmd0aClcbiAgICAgIC5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgIHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy5hZGQoayk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGNvbnRhaW5zRnJhbWUoZnJhbWU6IEZyYW1lKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVzLmluZGV4T2YoZnJhbWUpID4gLTE7XG4gIH1cblxuICBwZWVrU3RhdGUoKTogTG9jYXRpb25TdGF0ZSB7XG4gICAgaWYgKHRoaXMuc3RhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlc1t0aGlzLnN0YXRlcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb250YWluc1RvcFN0YXRlKHN0YXRlVXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBsYXN0U3RhdGUgPSB0aGlzLnBlZWtTdGF0ZSgpO1xuICAgIHJldHVybiBsYXN0U3RhdGUgJiYgbGFzdFN0YXRlLnNlZ21lbnRHcm91cC50b1N0cmluZygpID09PSBzdGF0ZVVybDtcbiAgfVxuXG4gIC8vIFNlYXJjaCBmb3IgZnJhbWUgdGhhdCBjYW4gZ28gYmFjay5cbiAgLy8gTmVzdGVkICdwcmltYXJ5JyBvdXRsZXRzIGNvdWxkIHJlc3VsdCBpbiBPdXRsZXQgd2l0aCBtdWx0aXBsZSBuYXZpZ2F0YWJsZSBmcmFtZXMuXG4gIGdldEZyYW1lVG9CYWNrKCk6IEZyYW1lIHtcbiAgICBsZXQgZnJhbWUgPSB0aGlzLmZyYW1lc1t0aGlzLmZyYW1lcy5sZW5ndGggLSAxXTtcblxuICAgIGlmICghdGhpcy5pc05TRW1wdHlPdXRsZXQpIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5mcmFtZXMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgICBjb25zdCBjdXJyZW50RnJhbWUgPSB0aGlzLmZyYW1lc1tpbmRleF07XG4gICAgICAgIGlmIChjdXJyZW50RnJhbWUuY2FuR29CYWNrKCkpIHtcbiAgICAgICAgICBmcmFtZSA9IGN1cnJlbnRGcmFtZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmcmFtZTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdE5hdk9wdGlvbnM6IE5hdmlnYXRpb25PcHRpb25zID0ge1xuICBjbGVhckhpc3Rvcnk6IGZhbHNlLFxuICBhbmltYXRlZDogdHJ1ZSxcbn07XG4iXX0=