/**
 * There are cases where multiple activatedRoute nodes should be associated/handled by the same PageRouterOutlet.
 * We can gat additional ActivatedRoutes nodes when there is:
 *  - Lazy loading - there is an additional ActivatedRoute node for the RouteConfig with the `loadChildren` setup
 *  - Componentless routes - there is an additional ActivatedRoute node for the componentless RouteConfig
 *
 * Example:
 *   R  <-- root
 *   |
 * feature (lazy module) <-- RouteConfig: { path: "lazy", loadChildren: "./feature/feature.module#FeatureModule" }
 *   |
 * module (componentless route) <-- RouteConfig: { path: "module", children: [...] } // Note: No 'component'
 *   |
 *  home <-- RouteConfig: { path: "module", component: MyComponent } - this is what we get as activatedRoute param
 *
 *  In these cases we will mark the top-most node (feature). NSRouteReuseStrategy will detach the tree there and
 *  use this ActivateRoute as a kay for caching.
 */
export function findTopActivatedRouteNodeForOutlet(activatedRoute) {
    // TODO: test this and figure it out if it's really no longer needed
    return activatedRoute;
    // let outletActivatedRoute = activatedRoute;
    // while (outletActivatedRoute.parent && outletActivatedRoute.parent.routeConfig && !outletActivatedRoute.parent.routeConfig.component) {
    //   outletActivatedRoute = outletActivatedRoute.parent;
    // }
    // return outletActivatedRoute;
}
export const pageRouterActivatedSymbol = Symbol('page-router-activated');
export const loaderRefSymbol = Symbol('loader-ref');
export function destroyComponentRef(componentRef) {
    if (componentRef) {
        const loaderRef = componentRef[loaderRefSymbol];
        if (loaderRef) {
            loaderRef.destroy();
        }
        componentRef.destroy();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1yb3V0ZXItb3V0bGV0LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2xlZ2FjeS9yb3V0ZXIvcGFnZS1yb3V0ZXItb3V0bGV0LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILE1BQU0sVUFBVSxrQ0FBa0MsQ0FBQyxjQUFzQztJQUN2RixvRUFBb0U7SUFDcEUsT0FBTyxjQUFjLENBQUM7SUFDdEIsNkNBQTZDO0lBRTdDLHlJQUF5STtJQUN6SSx3REFBd0Q7SUFDeEQsSUFBSTtJQUVKLCtCQUErQjtBQUNqQyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDekUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUVwRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsWUFBK0I7SUFDakUsSUFBSSxZQUFZLEVBQUU7UUFDaEIsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2hELElBQUksU0FBUyxFQUFFO1lBQ2IsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENoaWxkcmVuT3V0bGV0Q29udGV4dHMsIFBSSU1BUllfT1VUTEVUIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuLyoqXG4gKiBUaGVyZSBhcmUgY2FzZXMgd2hlcmUgbXVsdGlwbGUgYWN0aXZhdGVkUm91dGUgbm9kZXMgc2hvdWxkIGJlIGFzc29jaWF0ZWQvaGFuZGxlZCBieSB0aGUgc2FtZSBQYWdlUm91dGVyT3V0bGV0LlxuICogV2UgY2FuIGdhdCBhZGRpdGlvbmFsIEFjdGl2YXRlZFJvdXRlcyBub2RlcyB3aGVuIHRoZXJlIGlzOlxuICogIC0gTGF6eSBsb2FkaW5nIC0gdGhlcmUgaXMgYW4gYWRkaXRpb25hbCBBY3RpdmF0ZWRSb3V0ZSBub2RlIGZvciB0aGUgUm91dGVDb25maWcgd2l0aCB0aGUgYGxvYWRDaGlsZHJlbmAgc2V0dXBcbiAqICAtIENvbXBvbmVudGxlc3Mgcm91dGVzIC0gdGhlcmUgaXMgYW4gYWRkaXRpb25hbCBBY3RpdmF0ZWRSb3V0ZSBub2RlIGZvciB0aGUgY29tcG9uZW50bGVzcyBSb3V0ZUNvbmZpZ1xuICpcbiAqIEV4YW1wbGU6XG4gKiAgIFIgIDwtLSByb290XG4gKiAgIHxcbiAqIGZlYXR1cmUgKGxhenkgbW9kdWxlKSA8LS0gUm91dGVDb25maWc6IHsgcGF0aDogXCJsYXp5XCIsIGxvYWRDaGlsZHJlbjogXCIuL2ZlYXR1cmUvZmVhdHVyZS5tb2R1bGUjRmVhdHVyZU1vZHVsZVwiIH1cbiAqICAgfFxuICogbW9kdWxlIChjb21wb25lbnRsZXNzIHJvdXRlKSA8LS0gUm91dGVDb25maWc6IHsgcGF0aDogXCJtb2R1bGVcIiwgY2hpbGRyZW46IFsuLi5dIH0gLy8gTm90ZTogTm8gJ2NvbXBvbmVudCdcbiAqICAgfFxuICogIGhvbWUgPC0tIFJvdXRlQ29uZmlnOiB7IHBhdGg6IFwibW9kdWxlXCIsIGNvbXBvbmVudDogTXlDb21wb25lbnQgfSAtIHRoaXMgaXMgd2hhdCB3ZSBnZXQgYXMgYWN0aXZhdGVkUm91dGUgcGFyYW1cbiAqXG4gKiAgSW4gdGhlc2UgY2FzZXMgd2Ugd2lsbCBtYXJrIHRoZSB0b3AtbW9zdCBub2RlIChmZWF0dXJlKS4gTlNSb3V0ZVJldXNlU3RyYXRlZ3kgd2lsbCBkZXRhY2ggdGhlIHRyZWUgdGhlcmUgYW5kXG4gKiAgdXNlIHRoaXMgQWN0aXZhdGVSb3V0ZSBhcyBhIGtheSBmb3IgY2FjaGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRUb3BBY3RpdmF0ZWRSb3V0ZU5vZGVGb3JPdXRsZXQoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IHtcbiAgLy8gVE9ETzogdGVzdCB0aGlzIGFuZCBmaWd1cmUgaXQgb3V0IGlmIGl0J3MgcmVhbGx5IG5vIGxvbmdlciBuZWVkZWRcbiAgcmV0dXJuIGFjdGl2YXRlZFJvdXRlO1xuICAvLyBsZXQgb3V0bGV0QWN0aXZhdGVkUm91dGUgPSBhY3RpdmF0ZWRSb3V0ZTtcblxuICAvLyB3aGlsZSAob3V0bGV0QWN0aXZhdGVkUm91dGUucGFyZW50ICYmIG91dGxldEFjdGl2YXRlZFJvdXRlLnBhcmVudC5yb3V0ZUNvbmZpZyAmJiAhb3V0bGV0QWN0aXZhdGVkUm91dGUucGFyZW50LnJvdXRlQ29uZmlnLmNvbXBvbmVudCkge1xuICAvLyAgIG91dGxldEFjdGl2YXRlZFJvdXRlID0gb3V0bGV0QWN0aXZhdGVkUm91dGUucGFyZW50O1xuICAvLyB9XG5cbiAgLy8gcmV0dXJuIG91dGxldEFjdGl2YXRlZFJvdXRlO1xufVxuXG5leHBvcnQgY29uc3QgcGFnZVJvdXRlckFjdGl2YXRlZFN5bWJvbCA9IFN5bWJvbCgncGFnZS1yb3V0ZXItYWN0aXZhdGVkJyk7XG5leHBvcnQgY29uc3QgbG9hZGVyUmVmU3ltYm9sID0gU3ltYm9sKCdsb2FkZXItcmVmJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95Q29tcG9uZW50UmVmKGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4pIHtcbiAgaWYgKGNvbXBvbmVudFJlZikge1xuICAgIGNvbnN0IGxvYWRlclJlZiA9IGNvbXBvbmVudFJlZltsb2FkZXJSZWZTeW1ib2xdO1xuICAgIGlmIChsb2FkZXJSZWYpIHtcbiAgICAgIGxvYWRlclJlZi5kZXN0cm95KCk7XG4gICAgfVxuICAgIGNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gIH1cbn1cbiJdfQ==