import { ViewContainerRef, Component, ComponentFactoryResolver, ChangeDetectorRef, ApplicationRef, ViewChild } from '@angular/core';
import { ProxyViewContainer, Trace } from '@nativescript/core';
import { ComponentPortal, TemplatePortal } from './portal';
import { registerElement } from '../element-registry';
import * as i0 from "@angular/core";
registerElement('DetachedContainer', () => ProxyViewContainer, {
    skipAddToDom: true,
});
/**
 * Wrapper component used for loading components when navigating
 * It uses DetachedContainer as selector so that it is containerRef is not attached to
 * the visual tree.
 */
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class DetachedLoader {
    // tslint:disable-line:component-class-suffix
    constructor(resolver, changeDetector, containerRef, appRef) {
        this.resolver = resolver;
        this.changeDetector = changeDetector;
        this.containerRef = containerRef;
        this.appRef = appRef;
        this.disposeFunctions = [];
    }
    createComponentPortal(componentType, customInjector) {
        return new ComponentPortal(componentType, this.vc, customInjector || this.vc.injector);
    }
    createTemplatePortal(templateRef, context) {
        return new TemplatePortal(templateRef, this.vc, context);
    }
    loadInAppRef(componentType) {
        const factory = this.resolver.resolveComponentFactory(componentType);
        const componentRef = factory.create(this.containerRef.injector);
        this.appRef.attachView(componentRef.hostView);
        this.disposeFunctions.push(() => {
            this.appRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        // Component is created, built may not be checked if we are loading
        // inside component with OnPush CD strategy. Mark us for check to be sure CD will reach us.
        // We are inside a promise here so no need for setTimeout - CD should trigger
        // after the promise.
        Trace.write('DetachedLoader.loadInLocation component loaded -> markForCheck', 'detached-loader');
        return componentRef;
    }
    loadInLocation(componentType) {
        return this.vc.createComponent(componentType);
    }
    ngOnDestroy() {
        this.disposeFunctions.forEach((fn) => fn());
    }
    detectChanges() {
        this.changeDetector.markForCheck();
    }
    /**
     * @deprecated use Portals
     */
    loadComponent(componentType) {
        Trace.write('DetachedLoader.loadComponent', 'detached-loader');
        return Promise.resolve(this.loadInAppRef(componentType));
    }
    /**
     * @deprecated use Portals
     */
    loadComponentSync(componentType) {
        Trace.write('DetachedLoader.loadComponentSync', 'detached-loader');
        return this.loadInAppRef(componentType);
    }
    /**
     * @deprecated use Portals
     */
    loadComponentInLocation(componentType) {
        Trace.write('DetachedLoader.loadComponentInLocation', 'detached-loader');
        return this.loadInLocation(componentType);
    }
    /**
     * @deprecated use Portals
     */
    loadWithFactory(factory) {
        const componentRef = factory.create(this.containerRef.injector);
        this.appRef.attachView(componentRef.hostView);
        this.disposeFunctions.push(() => {
            this.appRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        return componentRef;
    }
    /**
     * @deprecated use Portals
     */
    loadWithFactoryInLocation(factory) {
        return this.vc.createComponent(factory);
    }
}
DetachedLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DetachedLoader, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });
DetachedLoader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: DetachedLoader, selector: "DetachedContainer", viewQueries: [{ propertyName: "vc", first: true, predicate: ["vc"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `<Placeholder #loader></Placeholder>
    <ng-container #vc></ng-container>
    <ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DetachedLoader, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'DetachedContainer',
                    template: `<Placeholder #loader></Placeholder>
    <ng-container #vc></ng-container>
    <ng-content></ng-content>`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }, { type: i0.ApplicationRef }]; }, propDecorators: { vc: [{
                type: ViewChild,
                args: ['vc', { read: ViewContainerRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,