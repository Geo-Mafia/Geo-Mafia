import { Trace } from '@nativescript/core';
export class NativeScriptDebug {
    static isLogEnabled() {
        return Trace.isEnabled();
    }
    static animationsLog(message) {
        Trace.write(message, NativeScriptDebug.animationsTraceCategory);
    }
    static rendererLog(msg) {
        Trace.write(msg, NativeScriptDebug.rendererTraceCategory);
    }
    static rendererError(message) {
        Trace.write(message, NativeScriptDebug.rendererTraceCategory, Trace.messageType.error);
    }
    static viewUtilLog(msg) {
        Trace.write(msg, NativeScriptDebug.viewUtilCategory);
    }
    static routerLog(message) {
        Trace.write(message, NativeScriptDebug.routerTraceCategory);
    }
    static routerError(message) {
        Trace.write(message, NativeScriptDebug.routerTraceCategory, Trace.messageType.error);
    }
    static routeReuseStrategyLog(message) {
        Trace.write(message, NativeScriptDebug.routeReuseStrategyTraceCategory);
    }
    static styleError(message) {
        Trace.write(message, Trace.categories.Style, Trace.messageType.error);
    }
    static listViewLog(message) {
        Trace.write(message, NativeScriptDebug.listViewTraceCategory);
    }
    static listViewError(message) {
        Trace.write(message, NativeScriptDebug.listViewTraceCategory, Trace.messageType.error);
    }
    static bootstrapLog(message) {
        Trace.write(message, NativeScriptDebug.bootstrapCategory);
    }
    static bootstrapLogError(message) {
        Trace.write(message, NativeScriptDebug.bootstrapCategory, Trace.messageType.error);
    }
}
NativeScriptDebug.animationsTraceCategory = 'ns-animations';
NativeScriptDebug.rendererTraceCategory = 'ns-renderer';
NativeScriptDebug.viewUtilCategory = 'ns-view-util';
NativeScriptDebug.routerTraceCategory = 'ns-router';
NativeScriptDebug.routeReuseStrategyTraceCategory = 'ns-route-reuse-strategy';
NativeScriptDebug.listViewTraceCategory = 'ns-list-view';
NativeScriptDebug.bootstrapCategory = 'bootstrap';
// TODO: migrate all usage to this - avoids extraneous method executions
NativeScriptDebug.enabled = Trace.isEnabled();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvdHJhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTNDLE1BQU0sT0FBTyxpQkFBaUI7SUFXNUIsTUFBTSxDQUFDLFlBQVk7UUFDakIsT0FBTyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBZTtRQUNsQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUc7UUFDcEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFlO1FBQ2xDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRztRQUNwQixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQWU7UUFDOUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVELE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUFlO1FBQzFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBZTtRQUMvQixLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQWU7UUFDaEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFlO1FBQ2xDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBZTtRQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBZTtRQUN0QyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JGLENBQUM7O0FBNURlLHlDQUF1QixHQUFHLGVBQWUsQ0FBQztBQUMxQyx1Q0FBcUIsR0FBRyxhQUFhLENBQUM7QUFDdEMsa0NBQWdCLEdBQUcsY0FBYyxDQUFDO0FBQ2xDLHFDQUFtQixHQUFHLFdBQVcsQ0FBQztBQUNsQyxpREFBK0IsR0FBRyx5QkFBeUIsQ0FBQztBQUM1RCx1Q0FBcUIsR0FBRyxjQUFjLENBQUM7QUFDdkMsbUNBQWlCLEdBQUcsV0FBVyxDQUFDO0FBQ2hELHdFQUF3RTtBQUN4RCx5QkFBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYWNlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcblxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdERlYnVnIHtcbiAgc3RhdGljIHJlYWRvbmx5IGFuaW1hdGlvbnNUcmFjZUNhdGVnb3J5ID0gJ25zLWFuaW1hdGlvbnMnO1xuICBzdGF0aWMgcmVhZG9ubHkgcmVuZGVyZXJUcmFjZUNhdGVnb3J5ID0gJ25zLXJlbmRlcmVyJztcbiAgc3RhdGljIHJlYWRvbmx5IHZpZXdVdGlsQ2F0ZWdvcnkgPSAnbnMtdmlldy11dGlsJztcbiAgc3RhdGljIHJlYWRvbmx5IHJvdXRlclRyYWNlQ2F0ZWdvcnkgPSAnbnMtcm91dGVyJztcbiAgc3RhdGljIHJlYWRvbmx5IHJvdXRlUmV1c2VTdHJhdGVneVRyYWNlQ2F0ZWdvcnkgPSAnbnMtcm91dGUtcmV1c2Utc3RyYXRlZ3knO1xuICBzdGF0aWMgcmVhZG9ubHkgbGlzdFZpZXdUcmFjZUNhdGVnb3J5ID0gJ25zLWxpc3Qtdmlldyc7XG4gIHN0YXRpYyByZWFkb25seSBib290c3RyYXBDYXRlZ29yeSA9ICdib290c3RyYXAnO1xuICAvLyBUT0RPOiBtaWdyYXRlIGFsbCB1c2FnZSB0byB0aGlzIC0gYXZvaWRzIGV4dHJhbmVvdXMgbWV0aG9kIGV4ZWN1dGlvbnNcbiAgc3RhdGljIHJlYWRvbmx5IGVuYWJsZWQgPSBUcmFjZS5pc0VuYWJsZWQoKTtcblxuICBzdGF0aWMgaXNMb2dFbmFibGVkKCkge1xuICAgIHJldHVybiBUcmFjZS5pc0VuYWJsZWQoKTtcbiAgfVxuXG4gIHN0YXRpYyBhbmltYXRpb25zTG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIFRyYWNlLndyaXRlKG1lc3NhZ2UsIE5hdGl2ZVNjcmlwdERlYnVnLmFuaW1hdGlvbnNUcmFjZUNhdGVnb3J5KTtcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJlckxvZyhtc2cpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtc2csIE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyVHJhY2VDYXRlZ29yeSk7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyZXJFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlclRyYWNlQ2F0ZWdvcnksIFRyYWNlLm1lc3NhZ2VUeXBlLmVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyB2aWV3VXRpbExvZyhtc2cpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtc2csIE5hdGl2ZVNjcmlwdERlYnVnLnZpZXdVdGlsQ2F0ZWdvcnkpO1xuICB9XG5cbiAgc3RhdGljIHJvdXRlckxvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJUcmFjZUNhdGVnb3J5KTtcbiAgfVxuXG4gIHN0YXRpYyByb3V0ZXJFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJUcmFjZUNhdGVnb3J5LCBUcmFjZS5tZXNzYWdlVHlwZS5lcnJvcik7XG4gIH1cblxuICBzdGF0aWMgcm91dGVSZXVzZVN0cmF0ZWd5TG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIFRyYWNlLndyaXRlKG1lc3NhZ2UsIE5hdGl2ZVNjcmlwdERlYnVnLnJvdXRlUmV1c2VTdHJhdGVneVRyYWNlQ2F0ZWdvcnkpO1xuICB9XG5cbiAgc3RhdGljIHN0eWxlRXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobWVzc2FnZSwgVHJhY2UuY2F0ZWdvcmllcy5TdHlsZSwgVHJhY2UubWVzc2FnZVR5cGUuZXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIGxpc3RWaWV3TG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIFRyYWNlLndyaXRlKG1lc3NhZ2UsIE5hdGl2ZVNjcmlwdERlYnVnLmxpc3RWaWV3VHJhY2VDYXRlZ29yeSk7XG4gIH1cblxuICBzdGF0aWMgbGlzdFZpZXdFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5saXN0Vmlld1RyYWNlQ2F0ZWdvcnksIFRyYWNlLm1lc3NhZ2VUeXBlLmVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyBib290c3RyYXBMb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobWVzc2FnZSwgTmF0aXZlU2NyaXB0RGVidWcuYm9vdHN0cmFwQ2F0ZWdvcnkpO1xuICB9XG5cbiAgc3RhdGljIGJvb3RzdHJhcExvZ0Vycm9yKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIFRyYWNlLndyaXRlKG1lc3NhZ2UsIE5hdGl2ZVNjcmlwdERlYnVnLmJvb3RzdHJhcENhdGVnb3J5LCBUcmFjZS5tZXNzYWdlVHlwZS5lcnJvcik7XG4gIH1cbn1cbiJdfQ==