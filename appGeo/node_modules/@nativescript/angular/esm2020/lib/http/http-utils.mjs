import { path } from '@nativescript/core';
import { Observable } from 'rxjs';
export function isLocalRequest(url) {
    return url.indexOf('~') === 0 || url.indexOf('/') === 0;
}
export function getAbsolutePath(url, nsFileSystem) {
    url = url.replace('~', '').replace('/', '');
    url = path.join(nsFileSystem.currentApp().path, url);
    return url;
}
export function processLocalFileRequest(url, nsFileSystem, successResponse, errorResponse) {
    url = getAbsolutePath(url, nsFileSystem);
    // request from local app resources
    return new Observable((observer) => {
        if (nsFileSystem.fileExists(url)) {
            const localFile = nsFileSystem.fileFromPath(url);
            localFile.readText().then((data) => {
                try {
                    const json = JSON.parse(data);
                    observer.next(successResponse(url, json, 200));
                    observer.complete();
                }
                catch (error) {
                    // Even though the response status was 2xx, this is still an error.
                    // The parse error contains the text of the body that failed to parse.
                    const errorResult = { error, text: data };
                    observer.error(errorResponse(url, errorResult, 200));
                }
            }, (err) => {
                observer.error(errorResponse(url, err, 400));
            });
        }
        else {
            observer.error(errorResponse(url, 'Not Found', 404));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9odHRwL2h0dHAtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxNQUFNLENBQUM7QUFNNUMsTUFBTSxVQUFVLGNBQWMsQ0FBQyxHQUFXO0lBQ3hDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsR0FBVyxFQUFFLFlBQTBCO0lBQ3JFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFJLEdBQVcsRUFBRSxZQUEwQixFQUFFLGVBQXVDLEVBQUUsYUFBK0I7SUFDMUosR0FBRyxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFekMsbUNBQW1DO0lBQ25DLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFxQixFQUFFLEVBQUU7UUFDOUMsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakQsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FDdkIsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDUCxJQUFJO29CQUNGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDL0MsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUNyQjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZCxtRUFBbUU7b0JBQ25FLHNFQUFzRTtvQkFDdEUsTUFBTSxXQUFXLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO29CQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3REO1lBQ0gsQ0FBQyxFQUNELENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ2QsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9DLENBQUMsQ0FDRixDQUFDO1NBQ0g7YUFBTTtZQUNMLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN0RDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhdGggfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5TRmlsZVN5c3RlbSB9IGZyb20gJy4uL2ZpbGUtc3lzdGVtL25zLWZpbGUtc3lzdGVtJztcblxuZXhwb3J0IHR5cGUgaHR0cFJlc3BvbnNlRmFjdG9yeTxUPiA9ICh1cmw6IHN0cmluZywgYm9keTogYW55LCBzdGF0dXM6IG51bWJlcikgPT4gVDtcbmV4cG9ydCB0eXBlIGh0dHBFcnJvckZhY3RvcnkgPSAodXJsOiBzdHJpbmcsIGJvZHk6IGFueSwgc3RhdHVzOiBudW1iZXIpID0+IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxSZXF1ZXN0KHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB1cmwuaW5kZXhPZignficpID09PSAwIHx8IHVybC5pbmRleE9mKCcvJykgPT09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBYnNvbHV0ZVBhdGgodXJsOiBzdHJpbmcsIG5zRmlsZVN5c3RlbTogTlNGaWxlU3lzdGVtKTogc3RyaW5nIHtcbiAgdXJsID0gdXJsLnJlcGxhY2UoJ34nLCAnJykucmVwbGFjZSgnLycsICcnKTtcbiAgdXJsID0gcGF0aC5qb2luKG5zRmlsZVN5c3RlbS5jdXJyZW50QXBwKCkucGF0aCwgdXJsKTtcbiAgcmV0dXJuIHVybDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NMb2NhbEZpbGVSZXF1ZXN0PFQ+KHVybDogc3RyaW5nLCBuc0ZpbGVTeXN0ZW06IE5TRmlsZVN5c3RlbSwgc3VjY2Vzc1Jlc3BvbnNlOiBodHRwUmVzcG9uc2VGYWN0b3J5PFQ+LCBlcnJvclJlc3BvbnNlOiBodHRwRXJyb3JGYWN0b3J5KTogT2JzZXJ2YWJsZTxUPiB7XG4gIHVybCA9IGdldEFic29sdXRlUGF0aCh1cmwsIG5zRmlsZVN5c3RlbSk7XG5cbiAgLy8gcmVxdWVzdCBmcm9tIGxvY2FsIGFwcCByZXNvdXJjZXNcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcbiAgICBpZiAobnNGaWxlU3lzdGVtLmZpbGVFeGlzdHModXJsKSkge1xuICAgICAgY29uc3QgbG9jYWxGaWxlID0gbnNGaWxlU3lzdGVtLmZpbGVGcm9tUGF0aCh1cmwpO1xuICAgICAgbG9jYWxGaWxlLnJlYWRUZXh0KCkudGhlbihcbiAgICAgICAgKGRhdGEpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHN1Y2Nlc3NSZXNwb25zZSh1cmwsIGpzb24sIDIwMCkpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRXZlbiB0aG91Z2ggdGhlIHJlc3BvbnNlIHN0YXR1cyB3YXMgMnh4LCB0aGlzIGlzIHN0aWxsIGFuIGVycm9yLlxuICAgICAgICAgICAgLy8gVGhlIHBhcnNlIGVycm9yIGNvbnRhaW5zIHRoZSB0ZXh0IG9mIHRoZSBib2R5IHRoYXQgZmFpbGVkIHRvIHBhcnNlLlxuICAgICAgICAgICAgY29uc3QgZXJyb3JSZXN1bHQgPSB7IGVycm9yLCB0ZXh0OiBkYXRhIH07XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvclJlc3BvbnNlKHVybCwgZXJyb3JSZXN1bHQsIDIwMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgKGVycjogT2JqZWN0KSA9PiB7XG4gICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3JSZXNwb25zZSh1cmwsIGVyciwgNDAwKSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yUmVzcG9uc2UodXJsLCAnTm90IEZvdW5kJywgNDA0KSk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==