import { Injectable } from '@angular/core';
import { HttpResponse, HttpErrorResponse, HttpXhrBackend } from '@angular/common/http';
import { XhrFactory } from '@angular/common';
import { NSFileSystem } from '../file-system/ns-file-system';
import { isLocalRequest, processLocalFileRequest } from './http-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../file-system/ns-file-system";
export class NsHttpBackEnd extends HttpXhrBackend {
    constructor(xhrFactory, nsFileSystem) {
        super(xhrFactory);
        this.nsFileSystem = nsFileSystem;
    }
    handle(req) {
        let result;
        if (isLocalRequest(req.url)) {
            result = this.handleLocalFileRequest(req.url);
        }
        else {
            result = super.handle(req);
        }
        return result;
    }
    handleLocalFileRequest(url) {
        return processLocalFileRequest(url, this.nsFileSystem, createSuccessResponse, createErrorResponse);
    }
}
NsHttpBackEnd.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NsHttpBackEnd, deps: [{ token: i1.XhrFactory }, { token: i2.NSFileSystem }], target: i0.ɵɵFactoryTarget.Injectable });
NsHttpBackEnd.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NsHttpBackEnd });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NsHttpBackEnd, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.XhrFactory }, { type: i2.NSFileSystem }]; } });
function createSuccessResponse(url, body, status) {
    return new HttpResponse({
        url,
        body,
        status,
        statusText: 'OK',
    });
}
function createErrorResponse(url, body, status) {
    return new HttpErrorResponse({
        url,
        error: body,
        status,
        statusText: 'ERROR',
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2h0dHAvbnMtaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixZQUFZLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0csT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sY0FBYyxDQUFDOzs7O0FBR3ZFLE1BQU0sT0FBTyxhQUFjLFNBQVEsY0FBYztJQUMvQyxZQUFZLFVBQXNCLEVBQVUsWUFBMEI7UUFDcEUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRHdCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBRXRFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBcUI7UUFDMUIsSUFBSSxNQUFrQyxDQUFDO1FBRXZDLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQixNQUFNLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMvQzthQUFNO1lBQ0wsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sc0JBQXNCLENBQUMsR0FBVztRQUN4QyxPQUFPLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLHFCQUFxQixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDckcsQ0FBQzs7MEdBbkJVLGFBQWE7OEdBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUR6QixVQUFVOztBQXVCWCxTQUFTLHFCQUFxQixDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsTUFBYztJQUNuRSxPQUFPLElBQUksWUFBWSxDQUFDO1FBQ3RCLEdBQUc7UUFDSCxJQUFJO1FBQ0osTUFBTTtRQUNOLFVBQVUsRUFBRSxJQUFJO0tBQ2pCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsTUFBYztJQUNqRSxPQUFPLElBQUksaUJBQWlCLENBQUM7UUFDM0IsR0FBRztRQUNILEtBQUssRUFBRSxJQUFJO1FBQ1gsTUFBTTtRQUNOLFVBQVUsRUFBRSxPQUFPO0tBQ3BCLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEV2ZW50LCBIdHRwUmVzcG9uc2UsIEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwWGhyQmFja2VuZCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFhockZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOU0ZpbGVTeXN0ZW0gfSBmcm9tICcuLi9maWxlLXN5c3RlbS9ucy1maWxlLXN5c3RlbSc7XG5pbXBvcnQgeyBpc0xvY2FsUmVxdWVzdCwgcHJvY2Vzc0xvY2FsRmlsZVJlcXVlc3QgfSBmcm9tICcuL2h0dHAtdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTnNIdHRwQmFja0VuZCBleHRlbmRzIEh0dHBYaHJCYWNrZW5kIHtcbiAgY29uc3RydWN0b3IoeGhyRmFjdG9yeTogWGhyRmFjdG9yeSwgcHJpdmF0ZSBuc0ZpbGVTeXN0ZW06IE5TRmlsZVN5c3RlbSkge1xuICAgIHN1cGVyKHhockZhY3RvcnkpO1xuICB9XG5cbiAgaGFuZGxlKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBsZXQgcmVzdWx0OiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcblxuICAgIGlmIChpc0xvY2FsUmVxdWVzdChyZXEudXJsKSkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5oYW5kbGVMb2NhbEZpbGVSZXF1ZXN0KHJlcS51cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBzdXBlci5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVMb2NhbEZpbGVSZXF1ZXN0KHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIHJldHVybiBwcm9jZXNzTG9jYWxGaWxlUmVxdWVzdCh1cmwsIHRoaXMubnNGaWxlU3lzdGVtLCBjcmVhdGVTdWNjZXNzUmVzcG9uc2UsIGNyZWF0ZUVycm9yUmVzcG9uc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSh1cmw6IHN0cmluZywgYm9keTogYW55LCBzdGF0dXM6IG51bWJlcik6IEh0dHBFdmVudDxhbnk+IHtcbiAgcmV0dXJuIG5ldyBIdHRwUmVzcG9uc2Uoe1xuICAgIHVybCxcbiAgICBib2R5LFxuICAgIHN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiAnT0snLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZSh1cmw6IHN0cmluZywgYm9keTogYW55LCBzdGF0dXM6IG51bWJlcik6IEh0dHBFcnJvclJlc3BvbnNlIHtcbiAgcmV0dXJuIG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG4gICAgdXJsLFxuICAgIGVycm9yOiBib2R5LFxuICAgIHN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiAnRVJST1InLFxuICB9KTtcbn1cbiJdfQ==