import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class NativeScriptLoadingService {
    constructor() {
        this.mainModuleReady$ = new BehaviorSubject(false);
        this.readyToDestroy$ = new BehaviorSubject(true);
        this.onMainModuleReady$ = this.mainModuleReady$.pipe(filter((ready) => ready));
    }
    /**
     * delays destroying this module until `notifyReadyToDestroy()`.
     * remember to call `notifyReadyToDestroy()` when done!
     */
    waitUntilNotified() {
        this.readyToDestroy$.next(false);
    }
    /**
     * notifies this module is ready to be destroyed
     */
    notifyReadyToDestroy() {
        this.readyToDestroy$.next(true);
    }
    isMainModuleReady() {
        return this.mainModuleReady$.value;
    }
    ngOnDestroy() {
        this.readyToDestroy$.complete();
        this.mainModuleReady$.complete();
    }
    /**
     * This funcion is called by the bootstrap code when the app is ready
     * @internal
     */
    _notifyMainModuleReady() {
        this.mainModuleReady$.next(true);
    }
}
NativeScriptLoadingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptLoadingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NativeScriptLoadingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptLoadingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: NativeScriptLoadingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2xvYWRpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUd4QyxNQUFNLE9BQU8sMEJBQTBCO0lBRHZDO1FBRVUscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEQsb0JBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1Qyx1QkFBa0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQStCM0U7SUE3QkM7OztPQUdHO0lBQ0gsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0JBQW9CO1FBQ2xCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsc0JBQXNCO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7dUhBakNVLDBCQUEwQjsySEFBMUIsMEJBQTBCLGNBRGIsTUFBTTsyRkFDbkIsMEJBQTBCO2tCQUR0QyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0TG9hZGluZ1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIG1haW5Nb2R1bGVSZWFkeSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgcmVhZHlUb0Rlc3Ryb3kkID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0cnVlKTtcbiAgb25NYWluTW9kdWxlUmVhZHkkID0gdGhpcy5tYWluTW9kdWxlUmVhZHkkLnBpcGUoZmlsdGVyKChyZWFkeSkgPT4gcmVhZHkpKTtcblxuICAvKipcbiAgICogZGVsYXlzIGRlc3Ryb3lpbmcgdGhpcyBtb2R1bGUgdW50aWwgYG5vdGlmeVJlYWR5VG9EZXN0cm95KClgLlxuICAgKiByZW1lbWJlciB0byBjYWxsIGBub3RpZnlSZWFkeVRvRGVzdHJveSgpYCB3aGVuIGRvbmUhXG4gICAqL1xuICB3YWl0VW50aWxOb3RpZmllZCgpIHtcbiAgICB0aGlzLnJlYWR5VG9EZXN0cm95JC5uZXh0KGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBub3RpZmllcyB0aGlzIG1vZHVsZSBpcyByZWFkeSB0byBiZSBkZXN0cm95ZWRcbiAgICovXG4gIG5vdGlmeVJlYWR5VG9EZXN0cm95KCkge1xuICAgIHRoaXMucmVhZHlUb0Rlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gIH1cbiAgaXNNYWluTW9kdWxlUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFpbk1vZHVsZVJlYWR5JC52YWx1ZTtcbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlYWR5VG9EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIHRoaXMubWFpbk1vZHVsZVJlYWR5JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY2lvbiBpcyBjYWxsZWQgYnkgdGhlIGJvb3RzdHJhcCBjb2RlIHdoZW4gdGhlIGFwcCBpcyByZWFkeVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9ub3RpZnlNYWluTW9kdWxlUmVhZHkoKSB7XG4gICAgdGhpcy5tYWluTW9kdWxlUmVhZHkkLm5leHQodHJ1ZSk7XG4gIH1cbn1cbiJdfQ==