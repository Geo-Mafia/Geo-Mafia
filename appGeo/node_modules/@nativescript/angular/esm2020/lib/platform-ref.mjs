import { PlatformRef } from '@angular/core';
import { runNativeScriptAngularApp } from './application';
export class NativeScriptPlatformRefProxy extends PlatformRef {
    constructor(platform, launchView) {
        super();
        this.platform = platform;
        this.launchView = launchView;
    }
    bootstrapModuleFactory(moduleFactory) {
        this.options = {
            appModuleBootstrap: () => this.platform.bootstrapModuleFactory(moduleFactory),
            launchView: () => this.launchView,
        };
        runNativeScriptAngularApp(this.options);
        return null;
    }
    bootstrapModule(moduleType, compilerOptions) {
        this.options = {
            appModuleBootstrap: () => this.platform.bootstrapModule(moduleType, compilerOptions),
        };
        runNativeScriptAngularApp(this.options);
        return null;
    }
    onDestroy(callback) {
        this.platform.onDestroy(callback);
    }
    get injector() {
        return this.platform.injector;
    }
    destroy() {
        this.platform.destroy();
    }
    get destroyed() {
        return this.platform.destroyed;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0tcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL3BsYXRmb3JtLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWtELFdBQVcsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUVsRyxPQUFPLEVBQWdDLHlCQUF5QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBd0R4RixNQUFNLE9BQU8sNEJBQTZCLFNBQVEsV0FBVztJQUUzRCxZQUFvQixRQUFxQixFQUFVLFVBQTBCO1FBQzNFLEtBQUssRUFBRSxDQUFDO1FBRFUsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQWdCO0lBRTdFLENBQUM7SUFFRCxzQkFBc0IsQ0FBSSxhQUFpQztRQUN6RCxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2Isa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUM7WUFDN0UsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVO1NBQ2xDLENBQUM7UUFFRix5QkFBeUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsZUFBZSxDQUFJLFVBQW1CLEVBQUUsZUFBa0c7UUFDeEksSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUM7U0FDckYsQ0FBQztRQUVGLHlCQUF5QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxTQUFTLENBQUMsUUFBb0I7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDaEMsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVyT3B0aW9ucywgSW5qZWN0b3IsIE5nTW9kdWxlUmVmLCBOZ1pvbmUsIFBsYXRmb3JtUmVmLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyDJtU5nTW9kdWxlRmFjdG9yeSBhcyBOZ01vZHVsZUZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcExhdW5jaFZpZXcsIEFwcFJ1bk9wdGlvbnMsIHJ1bk5hdGl2ZVNjcmlwdEFuZ3VsYXJBcHAgfSBmcm9tICcuL2FwcGxpY2F0aW9uJztcblxuLyoqXG4gKiBQcm92aWRlcyBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gdGhlIGJvb3RzdHJhcGluZyBwcm9jZXNzLlxuICpcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQm9vdHN0cmFwT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IHNwZWNpZnkgd2hpY2ggYE5nWm9uZWAgc2hvdWxkIGJlIHVzZWQuXG4gICAqXG4gICAqIC0gUHJvdmlkZSB5b3VyIG93biBgTmdab25lYCBpbnN0YW5jZS5cbiAgICogLSBgem9uZS5qc2AgLSBVc2UgZGVmYXVsdCBgTmdab25lYCB3aGljaCByZXF1aXJlcyBgWm9uZS5qc2AuXG4gICAqIC0gYG5vb3BgIC0gVXNlIGBOb29wTmdab25lYCB3aGljaCBkb2VzIG5vdGhpbmcuXG4gICAqL1xuICBuZ1pvbmU/OiBOZ1pvbmUgfCAnem9uZS5qcycgfCAnbm9vcCc7XG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IHNwZWNpZnkgY29hbGVzY2luZyBldmVudCBjaGFuZ2UgZGV0ZWN0aW9ucyBvciBub3QuXG4gICAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY2FzZS5cbiAgICpcbiAgICogPGRpdiAoY2xpY2spPVwiZG9Tb21ldGhpbmcoKVwiPlxuICAgKiAgIDxidXR0b24gKGNsaWNrKT1cImRvU29tZXRoaW5nRWxzZSgpXCI+PC9idXR0b24+XG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBXaGVuIGJ1dHRvbiBpcyBjbGlja2VkLCBiZWNhdXNlIG9mIHRoZSBldmVudCBidWJibGluZywgYm90aFxuICAgKiBldmVudCBoYW5kbGVycyB3aWxsIGJlIGNhbGxlZCBhbmQgMiBjaGFuZ2UgZGV0ZWN0aW9ucyB3aWxsIGJlXG4gICAqIHRyaWdnZXJlZC4gV2UgY2FuIGNvbGVzY2Ugc3VjaCBraW5kIG9mIGV2ZW50cyB0byBvbmx5IHRyaWdnZXJcbiAgICogY2hhbmdlIGRldGVjdGlvbiBvbmx5IG9uY2UuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgb3B0aW9uIHdpbGwgYmUgZmFsc2UuIFNvIHRoZSBldmVudHMgd2lsbCBub3QgYmVcbiAgICogY29hbGVzY2VkIGFuZCB0aGUgY2hhbmdlIGRldGVjdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICogQW5kIGlmIHRoaXMgb3B0aW9uIGJlIHNldCB0byB0cnVlLCB0aGUgY2hhbmdlIGRldGVjdGlvbiB3aWxsIGJlXG4gICAqIHRyaWdnZXJlZCBhc3luYyBieSBzY2hlZHVsaW5nIGEgYW5pbWF0aW9uIGZyYW1lLiBTbyBpbiB0aGUgY2FzZSBhYm92ZSxcbiAgICogdGhlIGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBvbmNlLlxuICAgKi9cbiAgbmdab25lRXZlbnRDb2FsZXNjaW5nPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgc3BlY2lmeSBpZiBgTmdab25lI3J1bigpYCBtZXRob2QgaW52b2NhdGlvbnMgc2hvdWxkIGJlIGNvYWxlc2NlZFxuICAgKiBpbnRvIGEgc2luZ2xlIGNoYW5nZSBkZXRlY3Rpb24uXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY2FzZS5cbiAgICpcbiAgICogZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArKykge1xuICAgKiAgIG5nWm9uZS5ydW4oKCkgPT4ge1xuICAgKiAgICAgLy8gZG8gc29tZXRoaW5nXG4gICAqICAgfSk7XG4gICAqIH1cbiAgICpcbiAgICogVGhpcyBjYXNlIHRyaWdnZXJzIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIG11bHRpcGxlIHRpbWVzLlxuICAgKiBXaXRoIG5nWm9uZVJ1bkNvYWxlc2Npbmcgb3B0aW9ucywgYWxsIGNoYW5nZSBkZXRlY3Rpb25zIGluIGFuIGV2ZW50IGxvb3AgdHJpZ2dlciBvbmx5IG9uY2UuXG4gICAqIEluIGFkZGl0aW9uLCB0aGUgY2hhbmdlIGRldGVjdGlvbiBleGVjdXRlcyBpbiByZXF1ZXN0QW5pbWF0aW9uLlxuICAgKlxuICAgKi9cbiAgbmdab25lUnVuQ29hbGVzY2luZz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRQbGF0Zm9ybVJlZlByb3h5IGV4dGVuZHMgUGxhdGZvcm1SZWYge1xuICBvcHRpb25zOiBBcHBSdW5PcHRpb25zPGFueSwgYW55PjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm1SZWYsIHByaXZhdGUgbGF1bmNoVmlldz86IEFwcExhdW5jaFZpZXcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYm9vdHN0cmFwTW9kdWxlRmFjdG9yeTxNPihtb2R1bGVGYWN0b3J5OiBOZ01vZHVsZUZhY3Rvcnk8TT4pOiBQcm9taXNlPE5nTW9kdWxlUmVmPE0+PiB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYXBwTW9kdWxlQm9vdHN0cmFwOiAoKSA9PiB0aGlzLnBsYXRmb3JtLmJvb3RzdHJhcE1vZHVsZUZhY3RvcnkobW9kdWxlRmFjdG9yeSksXG4gICAgICBsYXVuY2hWaWV3OiAoKSA9PiB0aGlzLmxhdW5jaFZpZXcsXG4gICAgfTtcblxuICAgIHJ1bk5hdGl2ZVNjcmlwdEFuZ3VsYXJBcHAodGhpcy5vcHRpb25zKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGJvb3RzdHJhcE1vZHVsZTxNPihtb2R1bGVUeXBlOiBUeXBlPE0+LCBjb21waWxlck9wdGlvbnM/OiAoQ29tcGlsZXJPcHRpb25zICYgQm9vdHN0cmFwT3B0aW9ucykgfCBBcnJheTxDb21waWxlck9wdGlvbnMgJiBCb290c3RyYXBPcHRpb25zPik6IFByb21pc2U8TmdNb2R1bGVSZWY8TT4+IHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBhcHBNb2R1bGVCb290c3RyYXA6ICgpID0+IHRoaXMucGxhdGZvcm0uYm9vdHN0cmFwTW9kdWxlKG1vZHVsZVR5cGUsIGNvbXBpbGVyT3B0aW9ucyksXG4gICAgfTtcblxuICAgIHJ1bk5hdGl2ZVNjcmlwdEFuZ3VsYXJBcHAodGhpcy5vcHRpb25zKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgb25EZXN0cm95KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5wbGF0Zm9ybS5vbkRlc3Ryb3koY2FsbGJhY2spO1xuICB9XG5cbiAgZ2V0IGluamVjdG9yKCk6IEluamVjdG9yIHtcbiAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybS5pbmplY3RvcjtcbiAgfVxuXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5wbGF0Zm9ybS5kZXN0cm95KCk7XG4gIH1cblxuICBnZXQgZGVzdHJveWVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBsYXRmb3JtLmRlc3Ryb3llZDtcbiAgfVxufVxuIl19