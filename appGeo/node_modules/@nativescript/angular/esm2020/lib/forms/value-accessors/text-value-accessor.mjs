import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const TEXT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TextValueAccessor),
    multi: true,
};
/**
 * The accessor for writing a text and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TextField [(ngModel)]="model.test">
 *  ```
 */
export class TextValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value ? `${value}` : value);
        this.view.text = normalized;
    }
}
TextValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: TextValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TextValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.3", type: TextValueAccessor, selector: "TextField[ngModel],TextField[formControlName],TextField[formControl],textField[ngModel],textField[formControlName],textField[formControl],textfield[ngModel],textfield[formControlName],textfield[formControl],text-field[ngModel],text-field[formControlName],text-field[formControl],TextView[ngModel],TextView[formControlName],TextView[formControl],textView[ngModel],textView[formControlName],textView[formControl],textview[ngModel],textview[formControlName],textview[formControl],text-view[ngModel],text-view[formControlName],text-view[formControl],SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],searchBar[ngModel],searchBar[formControlName],searchBar[formControl],searchbar[ngModel],searchbar[formControlName],searchbar[formControl],search-bar[ngModel], search-bar[formControlName],search-bar[formControl]", host: { listeners: { "blur": "onTouched()", "textChange": "onChange($event.value)" } }, providers: [TEXT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: TextValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'TextField[ngModel],TextField[formControlName],TextField[formControl],' +
                        'textField[ngModel],textField[formControlName],textField[formControl],' +
                        'textfield[ngModel],textfield[formControlName],textfield[formControl],' +
                        'text-field[ngModel],text-field[formControlName],text-field[formControl],' +
                        'TextView[ngModel],TextView[formControlName],TextView[formControl],' +
                        'textView[ngModel],textView[formControlName],textView[formControl],' +
                        'textview[ngModel],textview[formControlName],textview[formControl],' +
                        'text-view[ngModel],text-view[formControlName],text-view[formControl],' +
                        'SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],' +
                        'searchBar[ngModel],searchBar[formControlName],searchBar[formControl],' +
                        'searchbar[ngModel],searchbar[formControlName],searchbar[formControl],' +
                        'search-bar[ngModel], search-bar[formControlName],search-bar[formControl]',
                    providers: [TEXT_VALUE_ACCESSOR],
                    host: {
                        '(blur)': 'onTouched()',
                        '(textChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvdGV4dC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRTFELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQUlGOzs7Ozs7OztHQVFHO0FBcUJILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxpQkFBMkI7SUFDaEUsNkNBQTZDO0lBQzdDLFlBQVksVUFBc0I7UUFDaEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUM5QixDQUFDOzs4R0FUVSxpQkFBaUI7a0dBQWpCLGlCQUFpQiw0NkJBTmpCLENBQUMsbUJBQW1CLENBQUM7MkZBTXJCLGlCQUFpQjtrQkFwQjdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUNOLHVFQUF1RTt3QkFDdkUsdUVBQXVFO3dCQUN2RSx1RUFBdUU7d0JBQ3ZFLDBFQUEwRTt3QkFDMUUsb0VBQW9FO3dCQUNwRSxvRUFBb0U7d0JBQ3BFLG9FQUFvRTt3QkFDcEUsdUVBQXVFO3dCQUN2RSx1RUFBdUU7d0JBQ3ZFLHVFQUF1RTt3QkFDdkUsdUVBQXVFO3dCQUN2RSwwRUFBMEU7b0JBQzVFLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNoQyxJQUFJLEVBQUU7d0JBQ0osUUFBUSxFQUFFLGFBQWE7d0JBQ3ZCLGNBQWMsRUFBRSx3QkFBd0I7cUJBQ3pDO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQmFzZVZhbHVlQWNjZXNzb3IgfSBmcm9tICcuL2Jhc2UtdmFsdWUtYWNjZXNzb3InO1xuXG5jb25zdCBURVhUX1ZBTFVFX0FDQ0VTU09SID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGV4dFZhbHVlQWNjZXNzb3IpLFxuICBtdWx0aTogdHJ1ZSxcbn07XG5cbmV4cG9ydCB0eXBlIFRleHRWaWV3ID0geyB0ZXh0OiBzdHJpbmcgfSAmIFZpZXc7XG5cbi8qKlxuICogVGhlIGFjY2Vzc29yIGZvciB3cml0aW5nIGEgdGV4dCBhbmQgbGlzdGVuaW5nIHRvIGNoYW5nZXMgdGhhdCBpcyB1c2VkIGJ5IHRoZVxuICoge0BsaW5rIE5nTW9kZWx9IGRpcmVjdGl2ZXMuXG4gKlxuICogICMjIyBFeGFtcGxlXG4gKiAgYGBgXG4gKiAgPFRleHRGaWVsZCBbKG5nTW9kZWwpXT1cIm1vZGVsLnRlc3RcIj5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOlxuICAgICdUZXh0RmllbGRbbmdNb2RlbF0sVGV4dEZpZWxkW2Zvcm1Db250cm9sTmFtZV0sVGV4dEZpZWxkW2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dEZpZWxkW25nTW9kZWxdLHRleHRGaWVsZFtmb3JtQ29udHJvbE5hbWVdLHRleHRGaWVsZFtmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHRmaWVsZFtuZ01vZGVsXSx0ZXh0ZmllbGRbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0ZmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0LWZpZWxkW25nTW9kZWxdLHRleHQtZmllbGRbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0LWZpZWxkW2Zvcm1Db250cm9sXSwnICtcbiAgICAnVGV4dFZpZXdbbmdNb2RlbF0sVGV4dFZpZXdbZm9ybUNvbnRyb2xOYW1lXSxUZXh0Vmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHRWaWV3W25nTW9kZWxdLHRleHRWaWV3W2Zvcm1Db250cm9sTmFtZV0sdGV4dFZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0dmlld1tuZ01vZGVsXSx0ZXh0dmlld1tmb3JtQ29udHJvbE5hbWVdLHRleHR2aWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dC12aWV3W25nTW9kZWxdLHRleHQtdmlld1tmb3JtQ29udHJvbE5hbWVdLHRleHQtdmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ1NlYXJjaEJhcltuZ01vZGVsXSxTZWFyY2hCYXJbZm9ybUNvbnRyb2xOYW1lXSxTZWFyY2hCYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWFyY2hCYXJbbmdNb2RlbF0sc2VhcmNoQmFyW2Zvcm1Db250cm9sTmFtZV0sc2VhcmNoQmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VhcmNoYmFyW25nTW9kZWxdLHNlYXJjaGJhcltmb3JtQ29udHJvbE5hbWVdLHNlYXJjaGJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlYXJjaC1iYXJbbmdNb2RlbF0sIHNlYXJjaC1iYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWFyY2gtYmFyW2Zvcm1Db250cm9sXScsXG4gIHByb3ZpZGVyczogW1RFWFRfVkFMVUVfQUNDRVNTT1JdLFxuICBob3N0OiB7XG4gICAgJyhibHVyKSc6ICdvblRvdWNoZWQoKScsXG4gICAgJyh0ZXh0Q2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudmFsdWUpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVGV4dFZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBCYXNlVmFsdWVBY2Nlc3NvcjxUZXh0Vmlldz4ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3VwZXIubm9ybWFsaXplVmFsdWUodmFsdWUgPyBgJHt2YWx1ZX1gIDogdmFsdWUpO1xuICAgIHRoaXMudmlldy50ZXh0ID0gbm9ybWFsaXplZDtcbiAgfVxufVxuIl19