import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DateValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a date and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <DatePicker [(ngModel)]="model.test">
 *  ```
 */
export class DateValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.view.date = normalized;
    }
}
DateValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DateValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
DateValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.3", type: DateValueAccessor, selector: "DatePicker[ngModel],DatePicker[formControlName],DatePicker[formControl],datepicker[ngModel],datepicker[formControlName],datepicker[formControl],datePicker[ngModel],datePicker[formControlName],datePicker[formControl],date-picker[ngModel],date-picker[formControlName],date-picker[formControl]", host: { listeners: { "dateChange": "onChange($event.value)" } }, providers: [DATE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DateValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'DatePicker[ngModel],DatePicker[formControlName],DatePicker[formControl],' + 'datepicker[ngModel],datepicker[formControlName],datepicker[formControl],' + 'datePicker[ngModel],datePicker[formControlName],datePicker[formControl],' + 'date-picker[ngModel],date-picker[formControlName],date-picker[formControl]',
                    providers: [DATE_VALUE_ACCESSOR],
                    host: {
                        '(dateChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvZGF0ZS12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRTFELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBUUgsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGlCQUE2QjtJQUNsRSw2Q0FBNkM7SUFDN0MsWUFBWSxVQUFzQjtRQUNoQyxLQUFLLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBVTtRQUNuQixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUM5QixDQUFDOzs4R0FUVSxpQkFBaUI7a0dBQWpCLGlCQUFpQiw4WEFMakIsQ0FBQyxtQkFBbUIsQ0FBQzsyRkFLckIsaUJBQWlCO2tCQVA3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwRUFBMEUsR0FBRywwRUFBMEUsR0FBRywwRUFBMEUsR0FBRyw0RUFBNEU7b0JBQzdULFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNoQyxJQUFJLEVBQUU7d0JBQ0osY0FBYyxFQUFFLHdCQUF3QjtxQkFDekM7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRGF0ZVBpY2tlciB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBCYXNlVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4vYmFzZS12YWx1ZS1hY2Nlc3Nvcic7XG5cbmNvbnN0IERBVEVfVkFMVUVfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBEYXRlVmFsdWVBY2Nlc3NvciksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuLyoqXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHNldHRpbmcgYSBkYXRlIGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0aGF0IGlzIHVzZWQgYnkgdGhlXG4gKiB7QGxpbmsgTmdNb2RlbH0gZGlyZWN0aXZlcy5cbiAqXG4gKiAgIyMjIEV4YW1wbGVcbiAqICBgYGBcbiAqICA8RGF0ZVBpY2tlciBbKG5nTW9kZWwpXT1cIm1vZGVsLnRlc3RcIj5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnRGF0ZVBpY2tlcltuZ01vZGVsXSxEYXRlUGlja2VyW2Zvcm1Db250cm9sTmFtZV0sRGF0ZVBpY2tlcltmb3JtQ29udHJvbF0sJyArICdkYXRlcGlja2VyW25nTW9kZWxdLGRhdGVwaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxkYXRlcGlja2VyW2Zvcm1Db250cm9sXSwnICsgJ2RhdGVQaWNrZXJbbmdNb2RlbF0sZGF0ZVBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGRhdGVQaWNrZXJbZm9ybUNvbnRyb2xdLCcgKyAnZGF0ZS1waWNrZXJbbmdNb2RlbF0sZGF0ZS1waWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxkYXRlLXBpY2tlcltmb3JtQ29udHJvbF0nLFxuICBwcm92aWRlcnM6IFtEQVRFX1ZBTFVFX0FDQ0VTU09SXSxcbiAgaG9zdDoge1xuICAgICcoZGF0ZUNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnZhbHVlKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIERhdGVWYWx1ZUFjY2Vzc29yIGV4dGVuZHMgQmFzZVZhbHVlQWNjZXNzb3I8RGF0ZVBpY2tlcj4ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3VwZXIubm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIHRoaXMudmlldy5kYXRlID0gbm9ybWFsaXplZDtcbiAgfVxufVxuIl19