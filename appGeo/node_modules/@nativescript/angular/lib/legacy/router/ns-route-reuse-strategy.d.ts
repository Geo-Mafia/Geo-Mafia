import { RouteReuseStrategy, ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router';
import { NSLocationStrategy } from './ns-location-strategy';
import * as i0 from "@angular/core";
/**
 * Detaches subtrees loaded inside PageRouterOutlet in forward navigation
 * and reattaches them on back.
 * Reuses routes as long as their route config is the same.
 */
export declare class NSRouteReuseStrategy implements RouteReuseStrategy {
    private location;
    private cacheByOutlet;
    constructor(location: NSLocationStrategy);
    shouldDetach(route: ActivatedRouteSnapshot): boolean;
    protected findValidOutletAndKey(targetRoute: ActivatedRouteSnapshot): {
        outlet: import("@nativescript/angular").Outlet;
        outletKey: string;
    };
    shouldAttach(route: ActivatedRouteSnapshot): boolean;
    store(route: ActivatedRouteSnapshot, state: DetachedRouteHandle): void;
    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;
    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;
    clearCache(outletKey: string): void;
    popCache(outletKey: string): void;
    clearModalCache(outletKey: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NSRouteReuseStrategy, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NSRouteReuseStrategy>;
}
