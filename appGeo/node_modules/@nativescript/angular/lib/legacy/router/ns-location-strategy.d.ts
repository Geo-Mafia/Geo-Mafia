import { LocationStrategy } from '@angular/common';
import { UrlSegmentGroup, ActivatedRouteSnapshot } from '@angular/router';
import { Frame } from '@nativescript/core';
import { FrameService } from '../frame.service';
import { Outlet, NavigationOptions } from './ns-location-utils';
import * as i0 from "@angular/core";
export declare class NSLocationStrategy extends LocationStrategy {
    private frameService;
    private startPath?;
    private outlets;
    private currentOutlet;
    private popStateCallbacks;
    private _currentNavigationOptions;
    private currentUrlTree;
    _modalNavigationDepth: number;
    constructor(frameService: FrameService, startPath?: string);
    getState(): unknown;
    path(): string;
    prepareExternalUrl(internal: string): string;
    pushState(state: any, title: string, url: string, queryParams: string): void;
    pushStateInternal(state: any, title: string, url: string, queryParams: string, replace?: boolean): void;
    replaceState(state: any, title: string, url: string, queryParams: string): void;
    forward(): void;
    back(outlet?: Outlet, frame?: Frame): void;
    canGoBack(outlet?: Outlet): boolean;
    onPopState(fn: (_: any) => any): void;
    getBaseHref(): string;
    private callPopState;
    toString(): string;
    _beginBackPageNavigation(frame: Frame, outletKey: string): void;
    _finishBackPageNavigation(frame: Frame): void;
    _beginModalNavigation(frame: Frame): void;
    _closeModalNavigation(): Promise<unknown>;
    _beginPageNavigation(frame: Frame): NavigationOptions;
    _setNavigationOptions(options: NavigationOptions): void;
    _getOutlets(): Array<Outlet>;
    updateOutletFrame(outlet: Outlet, frame: Frame, isEmptyOutletFrame: boolean): void;
    clearOutlet(frame: Frame): void;
    getSegmentGroupFullPath(segmentGroup: UrlSegmentGroup): string;
    getRouteFullPath(currentRoute: any): string;
    getPathByOutlets(urlSegmentGroup: any): string;
    findOutlet(outletKey: string, activatedRouteSnapshot?: ActivatedRouteSnapshot): Outlet;
    private findOutletByModal;
    private getOutletByFrame;
    private updateStates;
    private updateParentsStates;
    private createOutlet;
    private getSegmentGroupByOutlet;
    private updateSegmentGroup;
    private upsertModalOutlet;
    private getOutletKey;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NSLocationStrategy, [null, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NSLocationStrategy>;
}
