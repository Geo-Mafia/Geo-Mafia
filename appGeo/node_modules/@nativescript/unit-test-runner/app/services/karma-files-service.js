export class KarmaFilesService {
    constructor(http, config) {
        this.http = http;
        this.extensionRegex = /\.([^.\/]+)$/;
        this.appPrefix = null;
        this.testsPrefix = null;
        this.absoluteTestsPrefix = null;
        this.nodeModulesPrefix = null;
        this.bundle = false;
        this.appPrefix = `/base/${config.options.appDirectoryRelativePath}/`;
        this.testsPrefix = `/base/${config.options.appDirectoryRelativePath}/tests`;
        this.absoluteTestsPrefix = `/absolute`;
        this.nodeModulesPrefix = `/base/node_modules/`;
        this.bundle = config.options.bundle;
    }
    getServedFilesData(baseUrl) {
        const contextUrl = `${baseUrl}/context.json`;
        console.log("NSUTR: downloading " + contextUrl);
        return this.http.getString(contextUrl)
            .then(content => {
            const parsedContent = JSON.parse(content);
            return parsedContent.files;
        })
            .then(scriptUrls => {
            return Promise.all(scriptUrls.map((url) => {
                const { extension, localPath, type } = this.getScriptData(url);
                if (localPath) {
                    return Promise.resolve({
                        url,
                        type,
                        localPath,
                    });
                }
                else {
                    return this.http.getString(baseUrl + url)
                        .then(contents => {
                        return {
                            url,
                            type,
                            contents,
                            shouldEval: !extension || extension.toLowerCase() === "js" || extension.toLowerCase() === "ts"
                        };
                    });
                }
            }));
        });
    }
    getScriptData(url) {
        const queryStringStartIndex = url.lastIndexOf('?');
        const pathWithoutQueryString = url.substring(0, queryStringStartIndex);
        const extension = this.extensionRegex.exec(pathWithoutQueryString)[1];
        const type = this.getScriptType(url);
        let localPath = null;
        if (!this.bundle && url.startsWith(this.appPrefix)) {
            localPath = this.getScriptLocalPath(url, extension);
        }
        return { extension, localPath, type };
    }
    getScriptType(url) {
        let type = 1;
        if (url.startsWith(this.testsPrefix) || url.startsWith(this.absoluteTestsPrefix)) {
            type = 0;
        }
        else if (url.startsWith(this.nodeModulesPrefix)) {
            type = 2;
        }
        return type;
    }
    getScriptLocalPath(url, scriptExtension) {
        let localPath = null;
        const queryStringStartIndex = url.lastIndexOf('?');
        const relativePath = url.substring(this.appPrefix.length, queryStringStartIndex);
        localPath = '../../../../' + relativePath;
        if (scriptExtension === "ts") {
            localPath = localPath.substring(0, localPath.length - 2) + "js";
        }
        return localPath;
    }
}
