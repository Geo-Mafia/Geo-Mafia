import { getNativeApplication, android as androidApp } from '../application';
import { Trace } from '../trace';
import { numberHasDecimals, numberIs64Bit } from './types';
export function dataDeserialize(nativeData) {
    if (nativeData === null || typeof nativeData !== 'object') {
        return nativeData;
    }
    let store;
    switch (nativeData.getClass().getName()) {
        case 'java.lang.String': {
            return String(nativeData);
        }
        case 'java.lang.Boolean': {
            return String(nativeData) === 'true';
        }
        case 'java.lang.Float':
        case 'java.lang.Integer':
        case 'java.lang.Long':
        case 'java.lang.Double':
        case 'java.lang.Short': {
            return Number(nativeData);
        }
        case 'org.json.JSONArray': {
            store = [];
            for (let j = 0; j < nativeData.length(); j++) {
                store[j] = dataDeserialize(nativeData.get(j));
            }
            break;
        }
        case 'org.json.JSONObject': {
            store = {};
            let i = nativeData.keys();
            while (i.hasNext()) {
                let key = i.next();
                store[key] = dataDeserialize(nativeData.get(key));
            }
            break;
        }
        case 'androidx.collection.SimpleArrayMap': {
            const count = nativeData.size();
            for (let l = 0; l < count; l++) {
                const key = nativeData.keyAt(l);
                store[key] = dataDeserialize(nativeData.get(key));
            }
            break;
        }
        case 'androidx.collection.ArrayMap':
        case 'android.os.Bundle':
        case 'java.util.HashMap':
        case 'java.util.Map': {
            store = {};
            const keys = nativeData.keySet().toArray();
            for (let k = 0; k < keys.length; k++) {
                const key = keys[k];
                store[key] = dataDeserialize(nativeData.get(key));
            }
            break;
        }
        default:
            if (typeof nativeData === 'object' && nativeData instanceof java.util.List) {
                const array = [];
                const size = nativeData.size();
                for (let i = 0, n = size; i < n; i++) {
                    array[i] = dataDeserialize(nativeData.get(i));
                }
                store = array;
            }
            else {
                store = null;
            }
            break;
    }
    return store;
}
export function dataSerialize(data, wrapPrimitives) {
    let store;
    switch (typeof data) {
        case 'string':
        case 'boolean': {
            if (wrapPrimitives) {
                if (typeof data === 'string') {
                    return new java.lang.String(data);
                }
                return new java.lang.Boolean(data);
            }
            return data;
        }
        case 'number': {
            const hasDecimals = numberHasDecimals(data);
            if (numberIs64Bit(data)) {
                if (hasDecimals) {
                    return java.lang.Double.valueOf(data);
                }
                else {
                    return java.lang.Long.valueOf(data);
                }
            }
            else {
                if (hasDecimals) {
                    return java.lang.Float.valueOf(data);
                }
                else {
                    return java.lang.Integer.valueOf(data);
                }
            }
        }
        case 'object': {
            if (!data) {
                return null;
            }
            if (data instanceof Date) {
                return new java.util.Date(data.getTime());
            }
            if (Array.isArray(data)) {
                store = new java.util.ArrayList();
                data.forEach((item) => store.add(dataSerialize(item, wrapPrimitives)));
                return store;
            }
            if (data.native) {
                return data.native;
            }
            store = new java.util.HashMap();
            Object.keys(data).forEach((key) => store.put(key, dataSerialize(data[key], wrapPrimitives)));
            return store;
        }
        default:
            return null;
    }
}
// We are using "ad" here to avoid namespace collision with the global android object
export var ad;
(function (ad) {
    let application;
    let applicationContext;
    let contextResources;
    let packageName;
    function getApplicationContext() {
        if (!applicationContext) {
            applicationContext = getApplication().getApplicationContext();
        }
        return applicationContext;
    }
    ad.getApplicationContext = getApplicationContext;
    function getApplication() {
        if (!application) {
            application = getNativeApplication();
        }
        return application;
    }
    ad.getApplication = getApplication;
    function getResources() {
        if (!contextResources) {
            contextResources = getApplication().getResources();
        }
        return contextResources;
    }
    ad.getResources = getResources;
    function getPackageName() {
        if (!packageName) {
            packageName = getApplicationContext().getPackageName();
        }
        return packageName;
    }
    let inputMethodManager;
    function getInputMethodManager() {
        if (!inputMethodManager) {
            inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
        }
        return inputMethodManager;
    }
    ad.getInputMethodManager = getInputMethodManager;
    function showSoftInput(nativeView) {
        const inputManager = getInputMethodManager();
        if (inputManager && nativeView instanceof android.view.View) {
            inputManager.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
        }
    }
    ad.showSoftInput = showSoftInput;
    function dismissSoftInput(nativeView) {
        const inputManager = getInputMethodManager();
        let windowToken;
        if (nativeView instanceof android.view.View) {
            if (!nativeView.hasFocus()) {
                return;
            }
            windowToken = nativeView.getWindowToken();
        }
        else if (androidApp.foregroundActivity instanceof androidx.appcompat.app.AppCompatActivity) {
            const decorView = androidApp.foregroundActivity.getWindow().getDecorView();
            if (decorView) {
                windowToken = decorView.getWindowToken();
                decorView.requestFocus();
            }
            else {
                windowToken = null;
            }
        }
        if (inputManager && windowToken) {
            inputManager.hideSoftInputFromWindow(windowToken, 0);
        }
    }
    ad.dismissSoftInput = dismissSoftInput;
    let collections;
    (function (collections) {
        function stringArrayToStringSet(str) {
            const hashSet = new java.util.HashSet();
            if (str !== undefined) {
                for (const element in str) {
                    hashSet.add('' + str[element]);
                }
            }
            return hashSet;
        }
        collections.stringArrayToStringSet = stringArrayToStringSet;
        function stringSetToStringArray(stringSet) {
            const arr = [];
            if (stringSet !== undefined) {
                const it = stringSet.iterator();
                while (it.hasNext()) {
                    const element = '' + it.next();
                    arr.push(element);
                }
            }
            return arr;
        }
        collections.stringSetToStringArray = stringSetToStringArray;
    })(collections = ad.collections || (ad.collections = {}));
    let resources;
    (function (resources_1) {
        let attr;
        const attrCache = new Map();
        function getDrawableId(name) {
            return getId(':drawable/' + name);
        }
        resources_1.getDrawableId = getDrawableId;
        function getStringId(name) {
            return getId(':string/' + name);
        }
        resources_1.getStringId = getStringId;
        function getId(name) {
            const resources = getResources();
            const packageName = getPackageName();
            const uri = packageName + name;
            return resources.getIdentifier(uri, null, null);
        }
        resources_1.getId = getId;
        function getPalleteColor(name, context) {
            return getPaletteColor(name, context);
        }
        resources_1.getPalleteColor = getPalleteColor;
        function getPaletteColor(name, context) {
            if (attrCache.has(name)) {
                return attrCache.get(name);
            }
            let result = 0;
            try {
                if (!attr) {
                    attr = java.lang.Class.forName('androidx.appcompat.R$attr');
                }
                let colorID = 0;
                const field = attr.getField(name);
                if (field) {
                    colorID = field.getInt(null);
                }
                if (colorID) {
                    const typedValue = new android.util.TypedValue();
                    context.getTheme().resolveAttribute(colorID, typedValue, true);
                    result = typedValue.data;
                }
            }
            catch (ex) {
                Trace.write('Cannot get pallete color: ' + name, Trace.categories.Error, Trace.messageType.error);
            }
            attrCache.set(name, result);
            return result;
        }
        resources_1.getPaletteColor = getPaletteColor;
    })(resources = ad.resources || (ad.resources = {}));
    function isRealDevice() {
        const fingerprint = android.os.Build.FINGERPRINT;
        return fingerprint != null && (fingerprint.indexOf('vbox') > -1 || fingerprint.indexOf('generic') > -1);
    }
    ad.isRealDevice = isRealDevice;
})(ad || (ad = {}));
export const iOSNativeHelper = 0;
//# sourceMappingURL=native-helper.android.js.map