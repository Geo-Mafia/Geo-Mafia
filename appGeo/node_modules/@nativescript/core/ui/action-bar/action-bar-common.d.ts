import { ActionBar as ActionBarDefinition, ActionItems as ActionItemsDefinition, ActionItem as ActionItemDefinition, NavigationButton, IOSActionItemSettings, AndroidActionItemSettings, AndroidActionBarSettings } from '.';
import { CoreTypes } from '../../core-types';
import { View } from '../core/view';
import { ViewBase } from '../core/view-base';
import { CssProperty, Property } from '../core/properties';
import { Style } from '../styling/style';
export declare class ActionBarBase extends View implements ActionBarDefinition {
    private _actionItems;
    private _navigationButton;
    private _titleView;
    title: string;
    flat: boolean;
    iosIconRenderingMode: 'automatic' | 'alwaysOriginal' | 'alwaysTemplate';
    effectiveContentInsetLeft: number;
    effectiveContentInsetRight: number;
    get navigationButton(): NavigationButton;
    disposeNativeView(): void;
    set navigationButton(value: NavigationButton);
    get actionItems(): ActionItems;
    set actionItems(value: ActionItems);
    get titleView(): View;
    set titleView(value: View);
    get androidContentInset(): string | CoreTypes.LengthType;
    set androidContentInset(value: string | CoreTypes.LengthType);
    get androidContentInsetLeft(): CoreTypes.LengthType;
    set androidContentInsetLeft(value: CoreTypes.LengthType);
    get androidContentInsetRight(): CoreTypes.LengthType;
    set androidContentInsetRight(value: CoreTypes.LengthType);
    get ios(): any;
    get android(): AndroidActionBarSettings;
    get _childrenCount(): number;
    constructor();
    static onTitleChanged: any;
    update(): void;
    _onTitlePropertyChanged(): void;
    _addArrayFromBuilder(name: string, value: Array<any>): void;
    eachChildView(callback: (child: View) => boolean): void;
    eachChild(callback: (child: ViewBase) => boolean): void;
    _isEmpty(): boolean;
}
export declare class ActionItems implements ActionItemsDefinition {
    private _items;
    private _actionBar;
    constructor(actionBar: ActionBarDefinition);
    addItem(item: ActionItemDefinition): void;
    removeItem(item: ActionItemDefinition): void;
    getItems(): Array<ActionItemDefinition>;
    getVisibleItems(): Array<ActionItemDefinition>;
    getItemAt(index: number): ActionItemDefinition;
    setItems(items: Array<ActionItemDefinition>): void;
    private invalidate;
}
export declare class ActionItemBase extends ViewBase implements ActionItemDefinition {
    static tapEvent: string;
    private _actionBar;
    private _actionView;
    ios: IOSActionItemSettings;
    android: AndroidActionItemSettings;
    text: string;
    icon: string;
    visibility: string;
    get actionView(): View;
    set actionView(value: View);
    get actionBar(): ActionBarDefinition;
    set actionBar(value: ActionBarDefinition);
    onLoaded(): void;
    _raiseTap(): void;
    _addChildFromBuilder(name: string, value: any): void;
    _onVisibilityChanged(visibility: string): void;
    eachChild(callback: (child: ViewBase) => boolean): void;
}
export declare function isVisible(item: ActionItemDefinition): boolean;
export declare const titleProperty: Property<ActionBarBase, string>;
export declare function traceMissingIcon(icon: string): void;
export declare const iosIconRenderingModeProperty: Property<ActionBarBase, "automatic" | "alwaysOriginal" | "alwaysTemplate">;
export declare const textProperty: Property<ActionItemBase, string>;
export declare const iconProperty: Property<ActionItemBase, string>;
export declare const visibilityProperty: Property<ActionItemBase, string>;
export declare const flatProperty: Property<ActionBarBase, boolean>;
export declare const androidContentInsetLeftProperty: CssProperty<Style, CoreTypes.LengthType>;
export declare const androidContentInsetRightProperty: CssProperty<Style, CoreTypes.LengthType>;
